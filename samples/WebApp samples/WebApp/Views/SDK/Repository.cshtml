@using Lion.Utils.Mvc.Web
<div class="container">

    <script id="objectModel" type="text/C#">
        
        [DataContract]
        [ClassDescription(typeof(ISampleDbContext))]
        public class SampleObjectModel: EntityObject<SampleObjectModel>, IEntityObjectId
        {
            public string Id {
            get { return SampleObjectId; }
            set { SampleObjectId = value; }
            }

            [DataMember]
            string SampleObjectId { get; set; }

            [DataMember]
            int TestProp { get; set; }
        }
    
    </script>

    <script id="dbContextInterface" type="text/C#">
        
        public interface ISampleDbContext: IDbDataContext
        {
        }
    
    </script>

    <script id="objectModelExportedInterface" type="text/C#">
        
        public interface ISampleObjectModel : IRepositoryId<SampleObjectModel>
        {
            //declare additional methods or properties here
        }
    
    </script>

    <script id="objectModelImplementation" type="text/C#">
        
[Export(typeof(ISampleObjectModel))]
class SampleDataObjects : RepositoryId<SampleObjectModel>, ISampleObjectModel
{
    //declare additional methods or properties here
}
    
    </script>

    <script id="objectModelDbContext" type="text/C#">
        
[Export(typeof(ISampleDbContext)), PartCreationPolicy(CreationPolicy.NonShared)]
internal class SampleDbContext : ISampleDbContext
{
    //Implementation goes here
}
    
    </script>

    <h2 class="sdk_sample_step">Repository</h2>

    <a class="stepProject" href="#">Repository</a>

    <div class="sdk_content">

        <h2>Functions overview</h2>

        <p>
            Provides access business objects of different subsystems using a universal API, called the Repository API.
            Custom modules could provide their own business objects, avaliable to other subsystems (if needed) - for example, Telematics module declares business object Device, avaliable through Repository API.
        </p>

    
        <p>
            There are number of business objects, coming out of the box:
        </p>

        <table class="table table-striped table-bordered table-hover table-condensed table-responsive">
            <thead>
                <tr>
                    <td>
                        Class
                    </td>
                    <td>
                        Description
                    </td>
                    <td>
                        Type
                    </td>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Application</td>
                    <td>Class, representing Applications registred</td>
                    <td>TotalApi.Billing.Application</td>
                </tr>
                <tr>
                    <td>ApiUser</td>
                    <td>Class, representing the user of API</td>
                    <td>TotalApi.Billing.ApiUser</td>
                </tr>
                <tr>
                    <td>SubSystem</td>
                    <td>Class, representing subsystems that are connected</td>
                    <td>TotalApi.Billing.SubSystem</td>
                </tr>
                <tr>
                    <td>Device</td>
                    <td>Class, representing tracking device</td>
                    <td>TotalApi.Telematics.Device</td>
                </tr>
            </tbody>
        </table>

        <h3>Creating custom repositories</h3>

        <p>
            To create custom repository class you need to declare some interfaces and classes:

            <ol>
                <li>
                    Create custom data model class, SampleObjectModel in samples, DataContractAttribute and ClassDescriptionAttribute is mandatory.
                    ClassDescriptionAttribute connects custom repository class to implementation of IDbDataContext, which is needed for retrieving the data.
 
                    <pre class="brush: csharp;" sample-id="objectModel"></pre>

                </li>
                <li>
                    Create ISampleDbContext interface mentioned above:

                    <pre class="brush: csharp;" sample-id="dbContextInterface"></pre>
                </li>
                <li>
                    Create the interface that implements @Html.Span("IRepositoryId<SampleObjectModel>"):

                    <pre class="brush: csharp;" sample-id="objectModelExportedInterface"></pre>
                </li>
                <li>
                    Create the class that should implement the interface above, and the @Html.Span("RepositoryId<SampleObjectModel>") interfacem that actually declares custom class as repository item:

                    <pre class="brush: csharp;" sample-id="objectModelImplementation"></pre>
                </li>

                <li>
                    Create the class that implements ISampleDbContext and exports it as the handler for retrieving data:

                    <pre class="brush: csharp;" sample-id="objectModelDbContext"></pre>
                </li>
            </ol>

        </p>


    </div>

</div>