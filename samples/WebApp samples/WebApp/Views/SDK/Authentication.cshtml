
<div class="container">

    <h2 class="sdk_sample_step">Authentication</h2>

    <div class="sdk_content">

        <h3>Authentication overview</h3>

        <p>
            TotalApi authentication - transfering authentication info to services during calling API services.
            <a href="http://localhost:30098/Help/ResourceModel?modelName=TotalApiAuth">TotalApiAuth</a> class, representing authentication information described <a href="#">here</a>.
        </p>

        <h3>Terms of authentication model</h3>

        <table class="table table-striped table-bordered table-hover table-condensed table-responsive">
            <thead>
                <tr>
                    <td>
                        Property
                    </td>
                    <td>
                        Description
                    </td>
                    <td>
                        Type
                    </td>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>ApiKey</td>
                    <td>Unique and secret key to access the API.</td>
                    <td>string</td>
                </tr>
                <tr>
                    <td>SSID</td>
                    <td>Subsystem identifier. Needed only for calling the methods of billing subsystem.</td>
                    <td>string</td>
                </tr>
                <tr>
                    <td>AppKey</td>
                    <td>
                        Unique public key for applications.
                        Distributed with ApiKey when registering a new user application - the API user.
                        It makes sense only if a third-party developer, bought ApiKey, developing their client (mobile, desktop or js). application, 
                        and does not want to publish the ApiKey on the client side.
                    </td>
                    <td>string</td>
                </tr>
            <tr>
                <td>UserLogin</td>
                <td>
                    Returns user login for AppUser authorization.
                    If UserLogin is not set or UserLogin is set but AppKey is not set - throw an authorization exception.
                </td>
                <td>string</td>
            </tr>
            <tr>
                <td>UserPassword</td>
                <td>
                    Returns UserPassword for AppUser authorization.
                    If UserLogin is not set or UserLogin is set but AppKey is not set - throw an authorization exception.
                </td>
                <td>string</td>
            </tr>
            <tr>
                <td>ClientId</td>
                <td>
                    The unique identifier of a specific instance of the client application.
                    It may be generated at the start of the application.
                    It does not affect the authentication, but is important to optimize the transmission of notifications between instances of the client applications.
                </td>
                <td>string</td>
            </tr>
                <tr>
                    <td>SessionKey</td>
                    <td>
                        Identifier of a temporary session.
                        Alternative AppKey use on the client side.
                        Using ApiKey or AppUser authorization, the client receives a temporary session token, which can only be used for this session some time. 
                        Compromise of this token bears no threat to security, because it is valid for a short time, and only for that session.
                    </td>
                    <td>string</td>
                </tr>
            </tbody>
        </table>

        <h3>Authentication </h3>

        <p>
            Authentication infornmation could be delivered to the services by one of three possible ways:
        </p>
        <ul>
            <li>
                Delivering <a href="http://localhost:30098/Help/ResourceModel?modelName=TotalApiAuth">TotalApiAuth</a> json object as the parameter of api's endpoint url, for example:
                <a href="#">https://s1.totalapi.com/totalapi/api/v1/wcf/ITelematicsService?auth={ApiKey:”456”}</a>
            </li>
            <li>
                Delivering <a href="http://localhost:30098/Help/ResourceModel?modelName=TotalApiAuth">TotalApiAuth</a> json object in Authorization header of HTTP request:
                Authorization: {ApiKey:”456”}
            </li>
            <li>
                Delivering <a href="http://localhost:30098/Help/ResourceModel?modelName=TotalApiAuth">TotalApiAuth</a> json object in Authorization header of WCF request (only for WCF API):
            </li>
        </ul>
        <p>
            Depending on delivered authentication info, several authorization modes are avaliable:
        </p>

        <h3>ApiKey authorization</h3>
        <p>
            ApiKey property filled correctly. Used for direct work with API (in a web application backend, for example).
            Full access to all data connected to provided ApiKey are avaliable.
        </p>

        <h3>AppKey authorization</h3>
        <p>
            ApiKey property is filled with a valid value.
            ApiKey and SSID properties is not specified.
            Can be used exclusively in third-party client applications to register a new user of the application.
        </p>

        <h3>AppUser authorization</h3>
        <p>
            ApiKey, UserLogin, UserPassword properties filled with valid values.
            ApiKey and the SSID property is not filled.
            Used exclusively in third-party client applications to work with data API, limited only to the specified user.
        </p>

        <h3>SessionKey authorization</h3>
        <p>
            SessionKey property is filled with a valid value obtained by calling GetSessionKey method.
            AppKey, UserLogin, UserPassword, ApiKey and the SSID property is not filled.
            Used in client applications for working with data API directly from the frontend.
            The level of access to the API is the same as calling GetSessionKey method.
        </p>


    </div>

</div>