<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TotalApi.Core</name>
    </assembly>
    <members>
        <member name="T:TotalApi.Core.Api.ICustomers">
            <summary>
            Interface of a Customer repository item.
            </summary>
        </member>
        <member name="T:TotalApi.Core.Api.AggregateLogger">
            <summary>
            Aggregated logger.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Api.AggregateLogger.Loggers">
            <summary>
            Gets the loggers set.
            </summary>
            <value>
            The loggers.
            </value>
        </member>
        <member name="P:TotalApi.Core.Api.AggregateLogger.Instance">
            <summary>
            Gets the logger instance.
            </summary>
            <value>
            The logger instance.
            </value>
        </member>
        <member name="M:TotalApi.Core.Api.AggregateLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Core.Api.AggregateLogger"/> class.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Api.AggregateLogger.InternalDoLog(System.String,TotalApi.Core.Api.LogMessageType,TotalApi.Core.Api.BaseLogger.LogInstanceInfo)">
            <summary>
            Internal logging method.
            </summary>
            <param name="msg">Message to be logged.</param>
            <param name="type">Type of the logged message.</param>
            <param name="logInfo">Log message information.</param>
        </member>
        <member name="M:TotalApi.Core.Api.AggregateLogger.DoLog(System.String,TotalApi.Core.Api.LogMessageType,TotalApi.Core.Api.BaseLogger.LogInstanceInfo)">
            <summary>
            Doing nothing in this implementation.
            </summary>
        </member>
        <member name="T:TotalApi.Core.Api.AsyncTask">
            <summary>
            Class representing asynchronous task.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Api.AsyncTask.Id">
            <summary>
            Asynchronous task identifier.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Api.AsyncTask.TaskHandler">
            <summary>
            Handler of asynchronous task <see cref="T:TotalApi.Core.Api.IAsyncTaskHandler"/>.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Api.AsyncTask.Status">
            <summary>
            Asynchronous task status <see cref="T:TotalApi.Core.Api.AsyncTaskStatus"/>.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Api.AsyncTask.TaskResult">
            <summary>
            Asynchronous task result <see cref="T:TotalApi.Core.Api.AsyncTaskResult"/>.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Api.AsyncTask.Settings">
            <summary>
            Asynchronous task settings <see cref="T:TotalApi.Core.AsyncTasks.AsyncTaskSettings"/>.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Api.AsyncTask.StartTime">
            <summary>
            Asynchronous task start time.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Api.AsyncTask.ParamsHash">
            <summary>
            Hash of the asynchronous task parameters. Used for internal tasks cache.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Api.AsyncTask.Params">
            <summary>
            Asynchronous task parameters <see cref="T:TotalApi.Core.Api.AsyncTaskObject"/>.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Api.AsyncTask.CancellationTokenSource">
            <summary>
            Cancellation token of asynchronous task execution.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Api.AsyncTask.Cancel">
            <summary>
            Cancells asynchronous task execution.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Api.AsyncTask.#ctor(System.Func{TotalApi.Core.Api.AsyncTaskResult},System.Threading.CancellationToken)">
            <summary>
            Asynchronous task constructor.
            </summary>
            <param name="function">Function that will be used as asynchronous task body and returning <see cref="T:TotalApi.Core.Api.AsyncTaskResult"/></param>
            <param name="cancellationToken">Token for cancelling asynchronous task execution.</param>
        </member>
        <member name="T:TotalApi.Core.Api.AsyncTaskHandler">
            <summary>
            Handler of asynchronous task.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Api.AsyncTaskHandler.Params">
            <summary>
            Asynchronous task parameters <see cref="T:TotalApi.Core.Api.AsyncTaskObject"/>.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Api.AsyncTaskHandler.StartTime">
            <summary>
            Asynchronous task start time.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Api.AsyncTaskHandler.Settings">
            <summary>
            Asynchronous task settings <see cref="T:TotalApi.Core.AsyncTasks.AsyncTaskSettings"/>.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Api.AsyncTaskHandler.Clone">
            <summary>
            Clones asynchronous task handler.
            </summary>
            <returns>Handler of asynchronous task <see cref="T:TotalApi.Core.Api.IAsyncTaskHandler"/></returns>
        </member>
        <member name="T:TotalApi.Core.Api.AsyncTaskHandler`2">
            <summary>
            Handler of asynchronous task.
            </summary>
            <typeparam name="TTaskObject">Asynchronous task <see cref="T:TotalApi.Core.Api.AsyncTaskObject"/>.</typeparam>
            <typeparam name="TResult">The result of asynchronous task.</typeparam>
        </member>
        <member name="P:TotalApi.Core.Api.AsyncTaskHandler`2.TaskName">
            <summary>
            Asynchronous task name.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Api.AsyncTaskHandler`2.Params">
            <summary>
            Asynchronous task parameters <see cref="T:TotalApi.Core.Api.AsyncTaskObject"/>.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Api.AsyncTaskHandler`2.Start(`0,System.Threading.CancellationToken,TotalApi.Utils.Tasks.IProgressEx)">
            <summary>
            Starts asynchronous task.
            </summary>
            <param name="p">Asynchronous task parameters <see cref="T:TotalApi.Core.Api.AsyncTaskObject"/>.</param>
            <param name="cancellationToken">Cancellation token of asynchronous task.</param>
            <param name="prg">Asynchronous task execution progress <see cref="T:TotalApi.Utils.Tasks.IProgressEx"/>.</param>
            <returns></returns>
        </member>
        <member name="T:TotalApi.Core.Api.AsyncTaskHandler`1">
            <summary>
            Handler of asynchronous task.
            </summary>
            <typeparam name="TTaskObject"></typeparam>
        </member>
        <member name="T:TotalApi.Core.Api.AsyncTaskManager">
            <summary>
            Asynchronous task manager. 
            Manages task execution and lifetime.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Api.AsyncTaskManager.Instance">
            <summary>
            Instance of asynchronous task manager. 
            </summary>
        </member>
        <member name="P:TotalApi.Core.Api.AsyncTaskManager.RegisteredTaskHandlers">
            <summary>
            Array of registered task handlers.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Api.AsyncTaskManager.#ctor">
            <summary>
            Initializes <see cref="T:TotalApi.Core.Api.AsyncTaskManager"/>.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Api.AsyncTaskManager.FindTask(System.String)">
            <summary>
            Finds task by its identifier.
            </summary>
            <param name="taskId">Asynchronous task identifier.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.Api.AsyncTaskManager.All">
            <summary>
            Retrieves all asynchronous tasks.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.Api.AsyncTaskManager.GetResult(System.String)">
            <summary>
            Gets asynchronous task execution result.
            </summary>
            <param name="taskId">The task identifier.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.Api.AsyncTaskManager.Start(TotalApi.Core.Api.AsyncTaskObject)">
            <summary>
            Starts the specified asynchronous task.
            </summary>
            <param name="task">Asynchronous task parameters <see cref="T:TotalApi.Core.Api.AsyncTaskObject"/>.</param>
            <returns>Asynchronous task.</returns>
            <exception cref="T:TotalApi.Core.Api.AsyncTaskUnregisteredTaskNameException"></exception>
        </member>
        <member name="M:TotalApi.Core.Api.AsyncTaskManager.Cancel(System.String)">
            <summary>
            Cancels the specified asynchronous task by task identifier.
            </summary>
            <param name="taskId">The task identifier.</param>
        </member>
        <member name="M:TotalApi.Core.Api.AsyncTaskManager.GetSettings">
            <summary>
            Gets the asynchronous task settings.
            </summary>
            <returns></returns>
        </member>
        <member name="F:TotalApi.Core.Api.AsyncTaskManager.ClearRunningTaskMagicValue">
            <summary>
            Magic value used for unit-tests, to manually clean 1-st level cache.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Api.AsyncTaskManager.SetSettings(TotalApi.Core.AsyncTasks.AsyncTaskSettings)">
            <summary>
            Sets the asynchronous task settings.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="P:TotalApi.Core.Api.IAsyncTaskHandler.TaskName">
            <summary>
            Gets the name of the task.
            </summary>
            <value>
            The name of the task.
            </value>
        </member>
        <member name="M:TotalApi.Core.Api.IAsyncTaskHandler.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.Api.IAsyncTaskHandler.Start(TotalApi.Core.Api.AsyncTaskObject,System.Threading.CancellationToken,TotalApi.Utils.Tasks.IProgressEx)">
            <summary>
            Starts the specified task.
            </summary>
            <param name="task">The task.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="prg">Task execution progress.</param>
            <returns></returns>
        </member>
        <member name="T:TotalApi.Core.Api.IAsyncTaskManager">
            <summary>
            Interface for asynchronous task manager.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Api.IAsyncTaskManager.All">
            <summary>
            Retrieves all task.
            </summary>
            <returns><see cref="T:TotalApi.Core.Api.AsyncTask"/></returns>
        </member>
        <member name="M:TotalApi.Core.Api.IAsyncTaskManager.FindTask(System.String)">
            <summary>
            Finds the task.
            </summary>
            <param name="taskId">The task identifier.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.Api.IAsyncTaskManager.GetResult(System.String)">
            <summary>
            Gets the result.
            </summary>
            <param name="taskId">The task identifier.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.Api.IAsyncTaskManager.Start(TotalApi.Core.Api.AsyncTaskObject)">
            <summary>
            Starts the specified task.
            </summary>
            <param name="task">The task.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.Api.IAsyncTaskManager.Cancel(System.String)">
            <summary>
            Cancels the task by task identifier.
            </summary>
            <param name="taskId">The task identifier.</param>
        </member>
        <member name="M:TotalApi.Core.Api.IAsyncTaskManager.GetSettings">
            <summary>
            Gets the task settings.
            </summary>
            <returns><see cref="T:TotalApi.Core.AsyncTasks.AsyncTaskSettings"/></returns>
        </member>
        <member name="M:TotalApi.Core.Api.IAsyncTaskManager.SetSettings(TotalApi.Core.AsyncTasks.AsyncTaskSettings)">
            <summary>
            Sets the task settings.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:TotalApi.Core.Api.BaseLogger">
            <summary>
            Base abstract class for any custom loggers.
            </summary>
        </member>
        <member name="T:TotalApi.Core.Api.BaseLogger.LogInstanceInfo">
            <summary>
            Class, describing metadata information about the logged message.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Api.BaseLogger.LogInstanceInfo.Created">
            <summary>
            Gets or sets logged message creation date.
            </summary>
            <value>
            Created date.
            </value>
        </member>
        <member name="P:TotalApi.Core.Api.BaseLogger.LogInstanceInfo.Source">
            <summary>
            Gets the source of logger message .
            </summary>
            <value>
            The source object.
            </value>
        </member>
        <member name="P:TotalApi.Core.Api.BaseLogger.LogInstanceInfo.Exception">
            <summary>
            Gets the exception related to log message.
            </summary>
            <value>
            The exception.
            </value>
        </member>
        <member name="M:TotalApi.Core.Api.BaseLogger.LogInstanceInfo.Create(System.Object,System.Exception)">
            <summary>
            Creates the specified logger source <see cref="T:TotalApi.Core.Api.BaseLogger.LogInstanceInfo"/>.
            </summary>
            <param name="source">The log message source.</param>
            <param name="exception">The log message exception.</param>
            <returns></returns>
        </member>
        <member name="P:TotalApi.Core.Api.BaseLogger.LogQueue">
            <summary>
            Gets the log queue.
            </summary>
            <value>
            The log queue.
            </value>
        </member>
        <member name="E:TotalApi.Core.Api.BaseLogger.OnLog">
            <summary>
            Occurs when log message logged.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Api.BaseLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Core.Api.BaseLogger"/> class.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Api.BaseLogger.Log(System.String,System.Object[])">
            <summary>
            Logs the specified message.
            </summary>
            <param name="msg">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:TotalApi.Core.Api.BaseLogger.LogInstance(System.Object,System.String,System.Object[])">
            <summary>
            Logs the informational message from the source.
            </summary>
            <param name="source">The source.</param>
            <param name="msg">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:TotalApi.Core.Api.BaseLogger.Warning(System.String,System.Object[])">
            <summary>
            Logs the warning message.
            </summary>
            <param name="msg">The warning message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:TotalApi.Core.Api.BaseLogger.WarningInstance(System.Object,System.String,System.Object[])">
            <summary>
            Logs the warning message from the source.
            </summary>
            <param name="source">The source.</param>
            <param name="msg">The warning message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:TotalApi.Core.Api.BaseLogger.Error(System.String,System.Object[])">
            <summary>
            Logs the error message.
            </summary>
            <param name="msg">The error message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:TotalApi.Core.Api.BaseLogger.ErrorInstance(System.Object,System.String,System.Object[])">
            <summary>
            Logs the error message from the source.
            </summary>
            <param name="source">The source.</param>
            <param name="msg">The warning message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:TotalApi.Core.Api.BaseLogger.Error(System.Exception,System.String,System.Object[])">
            <summary>
            Logs the error message caused by specified exception.
            </summary>
            <param name="e">The exception.</param>
            <param name="msg">The error message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:TotalApi.Core.Api.BaseLogger.ErrorInstance(System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            Logs the error message from the source caused by specified exception.
            </summary>
            <param name="e">The exception.</param>
            <param name="source">The source.</param>
            <param name="msg">The warning message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:TotalApi.Core.Api.BaseLogger.EnqueueLog(System.String,TotalApi.Core.Api.LogMessageType,System.Object)">
            <summary>
            Enqueues the log message.
            </summary>
            <param name="msg">The message.</param>
            <param name="type">Log message type.</param>
            <param name="source">Log message source.</param>
        </member>
        <member name="M:TotalApi.Core.Api.BaseLogger.InternalDoLog(System.String,TotalApi.Core.Api.LogMessageType,TotalApi.Core.Api.BaseLogger.LogInstanceInfo)">
            <summary>
            Internal logging method.
            </summary>
            <param name="msg">The message.</param>
            <param name="type">Log message type.</param>
            <param name="logInfo">Log message information.</param>
        </member>
        <member name="M:TotalApi.Core.Api.BaseLogger.DoLog(System.String,TotalApi.Core.Api.LogMessageType,TotalApi.Core.Api.BaseLogger.LogInstanceInfo)">
            <summary>
            Does the logging.
            </summary>
            <param name="msg">The message.</param>
            <param name="type">Log message type.</param>
            <param name="logInfo">Log message information.</param>
        </member>
        <member name="T:TotalApi.Core.Api.ControlApi.ConsoleKeyHandlersManager">
            <summary>
            Handler of keyboard keys for console applications.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Api.ControlApi.ConsoleKeyHandlersManager.StartListeningConsole">
            <summary>
            Starts the console listening.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Api.ControlApi.ConsoleKeyHandlersManager.Init">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="T:TotalApi.Core.Api.ControlApi.IConsoleKeyHandler">
            <summary>
            Used for handling keyboard keys.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Api.ControlApi.IConsoleKeyHandler.Init">
            <summary>
            Called on the start of the application. Could be used for displaying commands decription in a console.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Api.ControlApi.IConsoleKeyHandler.HandleConsoleKey(System.ConsoleKey)">
            <summary>
            Keyboard key press handler.
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:TotalApi.Core.Api.ControlApi.IDataProcessingFilter">
            <summary>
            Base data filter interface.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Api.ControlApi.IDataProcessingFilter.Id">
            <summary>
            Filter identifier.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Api.ControlApi.IDataProcessingFilter.Name">
            <summary>
            Filter name.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Api.ControlApi.IDataProcessingFilter.Description">
            <summary>
            Filter description.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Api.ControlApi.IDataProcessingFilter.DependsOn">
            <summary>
            List of filters, which should be executed before current filter.
            If no dependent filters - could return <c>null</c> or empty list.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Api.ControlApi.IDataProcessingFilter.IsFinalFilter">
            <summary>
            If <c>true</c>, the filter will be added at the end of filters pipeline.
            Filters, dependent from this filter will be certainly added after this filter.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Api.ControlApi.IDataProcessingFilter.FilterParametersType">
            <summary>
            Type, distributing the parameters class of current filter.
            This type should have public constructor without parameters and be serializeable.
            Even if there is no parameters - it should return the type of an empty class.
            Types of parameters should be unique across different filters.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Api.ControlApi.IDataProcessingFilter.Execute(System.Object,System.Object)">
            <summary>
            Starts processing of passing series of data.
            </summary>
            <param name="series">Series of data with metadata</param>
            <param name="prms">Filter parameters - type of the parameters defines by the value of <see cref="P:TotalApi.Core.Api.ControlApi.IDataProcessingFilter.FilterParametersType" /> property</param>
        </member>
        <member name="T:TotalApi.Core.Api.ControlApi.IModuleStartup">
            <summary>
            Interface for automatic modules startup.
            If module exports interface <see cref="T:TotalApi.Core.Api.ControlApi.IModuleStartup"/>, its method <see cref="M:TotalApi.Core.Api.ControlApi.IModuleStartup.Start"/> 
            will be automatically called immediatelly after MEF components composition.
            Method are called AFTER initializing authentication and subsystem registration.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Api.ControlApi.IModuleStartup.Start">
            <summary>
            Starts module initialization.
            </summary>
        </member>
        <member name="T:TotalApi.Core.Api.ControlApi.InitOrders">
            <summary>
            Class declaring constants used for ordering modules composition.
            </summary>
        </member>
        <member name="F:TotalApi.Core.Api.ControlApi.InitOrders.Billing">
            <summary>
            The Billing subsystem order value.
            </summary>
        </member>
        <member name="F:TotalApi.Core.Api.ControlApi.InitOrders.BillingClient">
            <summary>
            The Billing client order value.
            </summary>
        </member>
        <member name="F:TotalApi.Core.Api.ControlApi.InitOrders.Database">
            <summary>
            The Database module order value.
            </summary>
        </member>
        <member name="T:TotalApi.Core.Api.ControlApi.ISensorDataFilter">
            <summary>
            Все фильтры для данных датчиков должны реализовывать и экспортировать этот интерфейс.
            </summary>
        </member>
        <member name="T:TotalApi.Core.Api.ControlApi.ICoordinateFilter">
            <summary>
            Coordinate filter interface.
            </summary>
        </member>
        <member name="T:TotalApi.Core.Api.ControlApi.IModuleInitializer">
            <summary>
            Interface for automatic modules initialization.
            If module exports interface <see cref="T:TotalApi.Core.Api.ControlApi.IModuleInitializer"/>, its method <see cref="M:TotalApi.Core.Api.ControlApi.IModuleInitializer.Init"/> 
            will be automatically called immediatelly after MEF components composition.
            Method are called BEFORE initializing authentication and subsystem registration.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Api.ControlApi.IModuleInitializer.Init">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="T:TotalApi.Core.Api.CoreApi">
            <summary>
            Static class, that should aggreegate all factories of internal interfaces of the system.
            For better transparency, and ability for modules unit-testing, ANY access to internal system's interfaces should be provided through this class.
            All internal interfaces, accessed by this class, are implemented as singletons.
            In the case of using IoC frameworks for interfaces initialization, there is nothing to do,
            but for unit testing, values of testing interfaces should be initialized by correspondent mock oblects.
            </summary>
        </member>
        <member name="F:TotalApi.Core.Api.CoreApi.TelematicsSubSystem">
            <summary>
            Код телематической подсистемы
            </summary>
        </member>
        <member name="F:TotalApi.Core.Api.CoreApi.GeoSubSystem">
            <summary>
            Код геолокационной подсистемы
            </summary>
        </member>
        <member name="P:TotalApi.Core.Api.CoreApi.Repository">
            <summary>
            Universal interface of a standart CRUD repository.
            LINQ queries are supported.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Api.CoreApi.Events">
            <summary>
            Interface that aggreegates all events of the system.
            In the fact, this interface methods calls duplicate calls of <see cref="M:TotalApi.Core.Api.IEventManager.Publish(System.Object)"/>.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Api.CoreApi.EventManager">
            <summary>
            Interface, responsible for subscribing and publishing the events, transfered across the modules.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Api.CoreApi.Logger">
            <summary>
            Interface, responsible for logging various debugging informtion.
            Do not use this interface for logging actions done by used for the further analysis.
            For this purpose, use <see cref="!:"/> interface.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Api.CoreApi.AsyncTaskManager">
            <summary>
            Interface, responsible for management of asynchronous taks.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Api.CoreApi.Applications">
            <summary>
            Interface, responsible for applications management.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Api.CoreApi.ApiUsers">
            <summary>
            Interface, responsible for ApiUsers management.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Api.CoreApi.SubSystems">
            <summary>
            Interface, responsible for SubSystems management.
            </summary>
        </member>
        <member name="T:TotalApi.Core.Api.IApplications">
            <summary>
            Interface of a Application repository item.
            </summary>
        </member>
        <member name="T:TotalApi.Core.Api.ITotalApiCoreEvents">
            <summary>
            Interface, representing system's core events.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Api.ITotalApiCoreEvents.OnPing(System.String)">
            <summary>
            Called when Ping event fired.
            </summary>
            <param name="content">The message sent by ping event.</param>
        </member>
        <member name="M:TotalApi.Core.Api.ITotalApiCoreEvents.OnProgress(System.String,System.Int32,System.String)">
            <summary>
            Called when progress of a task changes.
            </summary>
            <param name="instanceId">The task instance identifier.</param>
            <param name="progress">Task progress.</param>
            <param name="statusText">Task status text.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:TotalApi.Core.Api.ITotalApiCoreEvents.OnDataChanged(TotalApi.Core.IEntityObjectId,TotalApi.Core.Events.OnDataChanged.Action)" -->
        <!-- Badly formed XML comment ignored for member "M:TotalApi.Core.Api.ITotalApiCoreEvents.OnDataChanged``1(System.String,TotalApi.Core.Events.OnDataChanged.Action)" -->
        <!-- Badly formed XML comment ignored for member "M:TotalApi.Core.Api.ITotalApiCoreEvents.OnDataChanged(System.Type,System.String,TotalApi.Core.Events.OnDataChanged.Action)" -->
        <member name="T:TotalApi.Core.Api.FileLogger">
            <summary>
            Logger used to write log messages to a file.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Api.FileLogger.DisposeManagedResources">
            <summary>
            Disposes the managed resources by closing all StreamWriter instances.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Api.FileLogger.Instance">
            <summary>
            Gets the logger instance.
            </summary>
            <value>
            The instance.
            </value>
        </member>
        <member name="M:TotalApi.Core.Api.FileLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Core.Api.FileLogger"/> class.
            Uses parameters from *.config file.
            
            Config file must include section '<totalapi.log></totalapi.log>' with a section '<files></files>'.
            Inside '<files></files>' section declare 'add' tag as follow: <example><add file="{file path}" console="true" append="true" level="7" /></example>.
            Here 'file' - the file path, 'console' - duplicate message to console, 'append' - if true - appends message to the file, otherwise file will be rewritten each time, 
            'level' - logging level, bit mask parameter of <see cref="T:TotalApi.Core.Api.LogMessageType"/>.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Api.FileLogger.InternalDoLog(System.String,TotalApi.Core.Api.LogMessageType,TotalApi.Core.Api.BaseLogger.LogInstanceInfo)">
            <summary>
            Internal logging method.
            </summary>
            <param name="msg">The message.</param>
            <param name="type">Log message type.</param>
            <param name="logInfo">Log message information.</param>
        </member>
        <member name="M:TotalApi.Core.Api.FileLogger.TraceWriteLine(System.String,TotalApi.Core.Api.LogMessageType,TotalApi.Core.Api.BaseLogger.LogInstanceInfo)">
            <summary>
            Tracing logging method.
            </summary>
            <param name="msg">The message.</param>
            <param name="type">Log message type.</param>
            <param name="logInfo">Log message information.</param>
        </member>
        <member name="T:TotalApi.Core.Api.FileLoggerConfiguration">
            <summary>
            File logger configuration class.
            </summary>
        </member>
        <member name="T:TotalApi.Core.Api.FileLoggerConfiguration.TotalApiLogCollection">
            <summary>
            Collection of logger configuration parameters.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Api.FileLoggerConfiguration.TotalApiLogCollection.CreateNewElement">
            <summary>
            Creates the new element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.Api.FileLoggerConfiguration.TotalApiLogCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key.
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="P:TotalApi.Core.Api.FileLoggerConfiguration.TotalApiLogCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:TotalApi.Core.Api.FileLoggerConfiguration.TotalApiLogFileElement"/> with the specified index.
            </summary>
            <value>
            The <see cref="T:TotalApi.Core.Api.FileLoggerConfiguration.TotalApiLogFileElement"/>.
            </value>
            <param name="idx">The index.</param>
            <returns></returns>
        </member>
        <member name="T:TotalApi.Core.Api.FileLoggerConfiguration.TotalApiLogFileElement">
            <summary>
            Logger file element configuration.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Api.FileLoggerConfiguration.TotalApiLogFileElement.File">
            <summary>
            Gets or sets the file.
            </summary>
            <value>
            The file.
            </value>
        </member>
        <member name="P:TotalApi.Core.Api.FileLoggerConfiguration.TotalApiLogFileElement.Level">
            <summary>
            Gets or sets the level.
            </summary>
            <value>
            The level.
            </value>
        </member>
        <member name="P:TotalApi.Core.Api.FileLoggerConfiguration.TotalApiLogFileElement.Append">
            <summary>
            Gets or sets a value indicating whether to append or rewrite logger file.
            </summary>
            <value>
              <c>true</c> if append; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TotalApi.Core.Api.FileLoggerConfiguration.TotalApiLogFileElement.Console">
            <summary>
            Gets or sets a value indicating whether to replicate message to console.
            </summary>
            <value>
              <c>true</c> if write to console; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TotalApi.Core.Api.FileLoggerConfiguration.Files">
            <summary>
            Gets the configuration's files elements collection.
            </summary>
            <value>
            The files elements collection.
            </value>
        </member>
        <member name="T:TotalApi.Core.Api.IRepositoryId`1">
            <summary>
            This interface designed for work with the repositories of business objects that uses the Id property as the object identifier.
            The class, that implements this interface, calls the methods of <c>RepositoryApi</c> service
            in a correspondent distributed subsystems, if it is necessary, making working with distributed business logic
            absolutelly transparent to the developer.
            
            For work ApiKey or AppUser authorization are needed.
            </summary>
            <typeparam name="TEntityObjectId">The type of the entity object.</typeparam>
        </member>
        <member name="M:TotalApi.Core.Api.IRepositoryId`1.Find(System.String)">
            <summary>
            Searches for an object by its identifier.
            </summary>
            <param name="id">Object identifier.</param>
        </member>
        <member name="M:TotalApi.Core.Api.IRepositoryId`1.Delete(System.String)">
            <summary>
            Deletes the object by its identifier.
            </summary>
            <param name="id">Deletes object by its identifier.</param>
        </member>
        <member name="T:TotalApi.Core.Api.IApiUsers">
            <summary>
            Interface of a ApiUser repository item.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Api.IApiUsers.HashPassword(System.String)">
            <summary>
            Hashes the password.
            </summary>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.Api.IApiUsers.ComparePasswords(System.String,System.String)">
            <summary>
            Compares the passwords.
            </summary>
            <param name="password1">The password1.</param>
            <param name="password2">The password2.</param>
            <returns></returns>
        </member>
        <member name="T:TotalApi.Core.Api.IRepository`1">
            <summary>
            This interface designed for work with the repositories of business objects.
            The class, that implements this interface, calls the methods of <c>RepositoryApi</c> service
            in a correspondent distributed subsystems, if it is necessary, making working with distributed business logic
            absolutelly transparent to the developer.
            
            For work ApiKey or AppUser authorization are needed.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Api.IRepository`1.ExecuteQuery(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{`0}})">
            <summary>
            Executes the query using a query function.
            
            Keep in mind that the data would be selected without LazyLoading mode,
            because lazy loading after result retrieving is impossible, and the data could not be requested from distributed subsystem.
            
            Use <see cref="M:TotalApi.Utils.Expressions.QueryableEx.Include``1(System.Linq.IQueryable{``0},System.String)"/> for specifying which referenced properties should be retrieved by query.
            </summary>
            <param name="query">Query function.</param>
        </member>
        <member name="M:TotalApi.Core.Api.IRepository`1.ExecuteScalar(System.Func{System.Linq.IQueryable{`0},`0})">
            <summary>
            Executes the query, returning only single object using a query function.
            If a function not specified - FirstOrDefault() uses.
            
            Keep in mind that the data would be selected without LazyLoading mode,
            because lazy loading after result retrieving is impossible, and the data could not be requested from distributed subsystem.
            
            Use <see cref="M:TotalApi.Utils.Expressions.QueryableEx.Include``1(System.Linq.IQueryable{``0},System.String)"/> for specifying which referenced properties should be retrieved by query.
            </summary>
            <param name="query">Query function.</param>
        </member>
        <member name="M:TotalApi.Core.Api.IRepository`1.Save(`0,System.Boolean)">
            <summary>
            Saves the object.
            </summary>
            <param name="entity">Object to be saved.</param>
            <param name="isNew">Indicates if the object is new.</param>
        </member>
        <member name="T:TotalApi.Core.Api.IRepositoryApi">
            <summary>
            This interface designed for work with the repositories of business objects.
            The class, that implements this interface, calls the methods of <c>RepositoryApi</c> service
            in a correspondent distributed subsystems, if it is necessary, making working with distributed business logic
            absolutelly transparent to the developer.
            
            To be able to work with the class using this interface - one of the subsystems modules should decalre
            the repository of this class - the class, that implements <see cref="T:TotalApi.Core.Api.IRepository`1"/> interface
            or one of the derived class, should be marked by <c>[Export(typeof(IRepository{TEntityObject}))]</c> attrubute.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Api.IRepositoryApi.Count``1(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``0}})">
            <summary>
            Returns the record count of the query using a query function.
            
            Keep in mind that the data would be selected without LazyLoading mode,
            because lazy loading after result retrieving is impossible, and the data could not be requested from distributed subsystem.
            
            Use <see cref="M:TotalApi.Utils.Expressions.QueryableEx.Include``1(System.Linq.IQueryable{``0},System.String)"/> for specifying which referenced properties should be retrieved by query.
            </summary>
            <param name="query">Query function.</param>
        </member>
        <member name="M:TotalApi.Core.Api.IRepositoryApi.ExecuteQuery``1(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``0}})">
            <summary>
            Executes the query using a query function.
            
            Keep in mind that the data would be selected without LazyLoading mode,
            because lazy loading after result retrieving is impossible, and the data could not be requested from distributed subsystem.
            
            Use <see cref="M:TotalApi.Utils.Expressions.QueryableEx.Include``1(System.Linq.IQueryable{``0},System.String)"/> for specifying which referenced properties should be retrieved by query.
            </summary>
            <param name="query">Query function.</param>
        </member>
        <member name="M:TotalApi.Core.Api.IRepositoryApi.ExecuteScalar``1(System.Func{System.Linq.IQueryable{``0},``0})">
            <summary>
            Executes the query, returning only single object using a query function.
            If a function not specified - FirstOrDefault() uses.
            
            Keep in mind that the data would be selected without LazyLoading mode,
            because lazy loading after result retrieving is impossible, and the data could not be requested from distributed subsystem.
            
            Use <see cref="M:TotalApi.Utils.Expressions.QueryableEx.Include``1(System.Linq.IQueryable{``0},System.String)"/> for specifying which referenced properties should be retrieved by query.
            </summary>
            <param name="query">Query function.</param>
        </member>
        <member name="M:TotalApi.Core.Api.IRepositoryApi.Find``1(System.String)">
            <summary>
            Searches for an object by its identifier.
            </summary>
            <param name="id">Object identifier.</param>
        </member>
        <member name="M:TotalApi.Core.Api.IRepositoryApi.Save``1(``0,System.Boolean)">
            <summary>
            Saves the object.
            </summary>
            <param name="entity">Object to be saved.</param>
            <param name="isNew">Indicates if the object is new.</param>
        </member>
        <member name="M:TotalApi.Core.Api.IRepositoryApi.Delete``1(System.String)">
            <summary>
            Deletes the object by its identifier.
            </summary>
            <param name="id">Deletes object by its identifier.</param>
        </member>
        <member name="T:TotalApi.Core.Api.IRepositoryApiAsync">
            <summary>
            This interface designed for work with the repositories of business objects in asynchronous mode.
            The class, that implements this interface, calls the methods of <c>RepositoryApi</c> service
            in a correspondent distributed subsystems, if it is necessary, making working with distributed business logic
            absolutelly transparent to the developer.
            
            To be able to work with the class using this interface - one of the subsystems modules should decalre
            the repository of this class - the class, that implements <see cref="T:TotalApi.Core.Api.IRepository`1"/> interface
            or one of the derived class, should be marked by <c>[Export(typeof(IRepository{TEntityObject}))]</c> attrubute.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Api.IRepositoryApiAsync.ExecuteQueryAsync``1(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``0}})">
            <summary>
            Executes the query using a query function.
            
            Keep in mind that the data would be selected without LazyLoading mode,
            because lazy loading after result retrieving is impossible, and the data could not be requested from distributed subsystem.
            
            Use <see cref="M:TotalApi.Utils.Expressions.QueryableEx.Include``1(System.Linq.IQueryable{``0},System.String)"/> for specifying which referenced properties should be retrieved by query.
            </summary>
            <param name="query">Query function.</param>
        </member>
        <member name="M:TotalApi.Core.Api.IRepositoryApiAsync.ExecuteScalarAsync``1(System.Func{System.Linq.IQueryable{``0},``0})">
            <summary>
            Executes the query, returning only single object using a query function.
            If a function not specified - FirstOrDefault() uses.
            
            Keep in mind that the data would be selected without LazyLoading mode,
            because lazy loading after result retrieving is impossible, and the data could not be requested from distributed subsystem.
            
            Use <see cref="M:TotalApi.Utils.Expressions.QueryableEx.Include``1(System.Linq.IQueryable{``0},System.String)"/> for specifying which referenced properties should be retrieved by query.
            </summary>
            <param name="query">Query function.</param>
        </member>
        <member name="M:TotalApi.Core.Api.IRepositoryApiAsync.FindAsync``1(System.String)">
            <summary>
            Searches for an object by its identifier.
            </summary>
            <param name="id">Object identifier.</param>
        </member>
        <member name="M:TotalApi.Core.Api.IRepositoryApiAsync.SaveAsync(TotalApi.Core.IEntityObject,System.Boolean)">
            <summary>
            Saves the object.
            </summary>
            <param name="entity">Object to be saved.</param>
            <param name="isNew">Indicates if the object is new.</param>
        </member>
        <member name="M:TotalApi.Core.Api.IRepositoryApiAsync.DeleteAsync``1(System.String)">
            <summary>
            Deletes the object by its identifier.
            </summary>
            <param name="id">Object identifier.</param>
        </member>
        <member name="T:TotalApi.Core.Api.ISessions">
            <summary>
            Interface for <see cref="T:TotalApi.Core.Billing.Session"/> collection.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Api.ISessions.All">
            <summary>
            Returns full list of valid sessions.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Api.ISessions.GetSessionKey">
            <summary>
            Returns temporary session key.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TotalApi.Core.Api.ISubSystems">
            <summary>
            Interface for subsystem.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Api.ISubSystems.All(System.String)">
            <summary>
            Returns full list of subsystems, which can work with specified application.
            Or absolutelly all, if <paramref name="apiKey"/> equals <c>null</c>.
            </summary>
            <returns>Collection of subsystems.</returns>
        </member>
        <member name="M:TotalApi.Core.Api.ISubSystems.Update(TotalApi.Billing.SubSystem)">
            <summary>
            Refreshes all subsystems data, including billing information.
            </summary>
            <returns>Updated subsystem.</returns>
        </member>
        <member name="M:TotalApi.Core.Api.ISubSystems.Delete(System.String)">
            <summary>
            Deletes subsystem from common system by its <paramref name="ssid"/>.
            </summary>
            <returns><c>true</c> if delete is succesfull, otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:TotalApi.Core.Api.ISubSystems.Register(TotalApi.Billing.SubSystem)">
            <summary>
            Регистрирует подсистему в общей системе. Если такой подсистемы ещё нет - она будет создана, 
            если есть - параметры, определяющие подсистему будут обновлены (точки подключения, принимаемые/отправляемые события, классы).
            Registeres subsystem in common system. 
            If no such subsystem avaliable - it would be created if parameters, determining the subsystem are updated (connection endpoints, events, exported classes).
            </summary>
            <returns>Subsystem, filled with billing information (applications? which can work with subsystem, restrictions).</returns>
        </member>
        <member name="P:TotalApi.Core.Api.ISubSystems.CallerIp">
            <summary>
            Returns IP address of calling client.
            Makes a sense only for client side of a module. Will return 127.0.0.1 if calling this property from billing module.
            </summary>
            <returns>Caller IP address</returns>
        </member>
        <member name="T:TotalApi.Core.Api.TotalApiCoreEvents">
            <summary>
            Implementation of system's core events.
            </summary>
        </member>
        <member name="T:TotalApi.Core.Api.Repository`1">
            <summary>
            Class that implements RepositoryApi logic.
            </summary>
            <typeparam name="TEntityObject">The type of the entity object.</typeparam>
        </member>
        <member name="M:TotalApi.Core.Api.Repository`1.ExecuteQuery(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{`0}})">
            <summary>
            Executes the query using a query function.
            
            Keep in mind that the data would be selected without LazyLoading mode,
            because lazy loading after result retrieving is impossible, and the data could not be requested from distributed subsystem.
            
            Use <see cref="M:TotalApi.Utils.Expressions.QueryableEx.Include``1(System.Linq.IQueryable{``0},System.String)"/> for specifying which referenced properties should be retrieved by query.
            </summary>
            <param name="query">Query function.</param>
        </member>
        <member name="M:TotalApi.Core.Api.Repository`1.ExecuteScalar(System.Func{System.Linq.IQueryable{`0},`0})">
            <summary>
            Executes the query, returning only single object using a query function.
            If a function not specified - FirstOrDefault() uses.
            
            Keep in mind that the data would be selected without LazyLoading mode,
            because lazy loading after result retrieving is impossible, and the data could not be requested from distributed subsystem.
            
            Use <see cref="M:TotalApi.Utils.Expressions.QueryableEx.Include``1(System.Linq.IQueryable{``0},System.String)"/> for specifying which referenced properties should be retrieved by query.
            </summary>
            <param name="query">Query function.</param>
        </member>
        <member name="M:TotalApi.Core.Api.Repository`1.Save(`0,System.Boolean)">
            <summary>
            Saves the object.
            </summary>
            <param name="entity">Object to be saved.</param>
            <param name="isNew">Indicates if the object is new.</param>
        </member>
        <member name="M:TotalApi.Core.Api.Repository`1.BeforeSave(`0,System.Boolean)">
            <summary>
            Calls before saving the entity.
            You can check and fix it here.
            </summary>
            <param name="entity">Entity ti save/</param>
            <param name="isNew">Flag whether the entity is new.</param>
        </member>
        <member name="T:TotalApi.Core.Api.RepositoryApi">
            <summary>
            Repository API implementation
            </summary>
        </member>
        <member name="M:TotalApi.Core.Api.RepositoryApi.ExecuteQuery``1(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``0}})">
            <summary>
            Executes the query using a query function.
            
            Keep in mind that the data would be selected without LazyLoading mode,
            because lazy loading after result retrieving is impossible, and the data could not be requested from distributed subsystem.
            
            Use <see cref="M:TotalApi.Utils.Expressions.QueryableEx.Include``1(System.Linq.IQueryable{``0},System.String)"/> for specifying which referenced properties should be retrieved by query.
            </summary>
            <param name="query">Query function.</param>
        </member>
        <member name="M:TotalApi.Core.Api.RepositoryApi.Count``1(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``0}})">
            <summary>
            Returns the record count of the query using a query function.
            
            Keep in mind that the data would be selected without LazyLoading mode,
            because lazy loading after result retrieving is impossible, and the data could not be requested from distributed subsystem.
            
            Use <see cref="M:TotalApi.Utils.Expressions.QueryableEx.Include``1(System.Linq.IQueryable{``0},System.String)"/> for specifying which referenced properties should be retrieved by query.
            </summary>
            <param name="query">Query function.</param>
        </member>
        <member name="M:TotalApi.Core.Api.RepositoryApi.ExecuteScalar``1(System.Func{System.Linq.IQueryable{``0},``0})">
            <summary>
            Executes the query, returning only single object using a query function.
            If a function not specified - FirstOrDefault() uses.
            
            Keep in mind that the data would be selected without LazyLoading mode,
            because lazy loading after result retrieving is impossible, and the data could not be requested from distributed subsystem.
            
            Use <see cref="M:TotalApi.Utils.Expressions.QueryableEx.Include``1(System.Linq.IQueryable{``0},System.String)"/> for specifying which referenced properties should be retrieved by query.
            </summary>
            <param name="query">Query function.</param>
        </member>
        <member name="M:TotalApi.Core.Api.RepositoryApi.Find``1(System.String)">
            <summary>
            Searches for an object by its identifier.
            </summary>
            <param name="id">Object identifier.</param>
        </member>
        <member name="M:TotalApi.Core.Api.RepositoryApi.Save``1(``0,System.Boolean)">
            <summary>
            Saves the object.
            </summary>
            <param name="entity">Object to be saved.</param>
            <param name="isNew">Indicates if the object is new.</param>
        </member>
        <member name="M:TotalApi.Core.Api.RepositoryApi.Delete``1(System.String)">
            <summary>
            Deletes the object by its identifier.
            </summary>
            <param name="id">Deletes object by its identifier.</param>
        </member>
        <member name="M:TotalApi.Core.Api.RepositoryApi.ExecuteQueryAsync``1(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``0}})">
            <summary>
            Executes the query using a query function.
            
            Keep in mind that the data would be selected without LazyLoading mode,
            because lazy loading after result retrieving is impossible, and the data could not be requested from distributed subsystem.
            
            Use <see cref="M:TotalApi.Utils.Expressions.QueryableEx.Include``1(System.Linq.IQueryable{``0},System.String)"/> for specifying which referenced properties should be retrieved by query.
            </summary>
            <param name="query">Query function.</param>
        </member>
        <member name="M:TotalApi.Core.Api.RepositoryApi.ExecuteScalarAsync``1(System.Func{System.Linq.IQueryable{``0},``0})">
            <summary>
            Executes the query, returning only single object using a query function.
            If a function not specified - FirstOrDefault() uses.
            
            Keep in mind that the data would be selected without LazyLoading mode,
            because lazy loading after result retrieving is impossible, and the data could not be requested from distributed subsystem.
            
            Use <see cref="M:TotalApi.Utils.Expressions.QueryableEx.Include``1(System.Linq.IQueryable{``0},System.String)"/> for specifying which referenced properties should be retrieved by query.
            </summary>
            <param name="query">Query function.</param>
        </member>
        <member name="M:TotalApi.Core.Api.RepositoryApi.FindAsync``1(System.String)">
            <summary>
            Searches for an object by its identifier.
            </summary>
            <param name="id">Object identifier.</param>
        </member>
        <member name="M:TotalApi.Core.Api.RepositoryApi.SaveAsync(TotalApi.Core.IEntityObject,System.Boolean)">
            <summary>
            Saves the object.
            </summary>
            <param name="entity">Object to be saved.</param>
            <param name="isNew">Indicates if the object is new.</param>
        </member>
        <member name="M:TotalApi.Core.Api.RepositoryApi.DeleteAsync``1(System.String)">
            <summary>
            Deletes the object by its identifier.
            </summary>
            <param name="id">Object identifier.</param>
        </member>
        <member name="T:TotalApi.Core.Api.RepositoryId`1">
            <summary>
            Class that implements RepositoryApi logic.
            </summary>
            <typeparam name="TEntityObjectId">The type of the entity object.</typeparam>
        </member>
        <member name="M:TotalApi.Core.Api.RepositoryId`1.Find(System.String)">
            <summary>
            Searches for an object by its identifier.
            </summary>
            <param name="id">Object identifier.</param>
        </member>
        <member name="M:TotalApi.Core.Api.RepositoryId`1.Delete(System.String)">
            <summary>
            Deletes the object by its identifier.
            </summary>
            <param name="id">Deletes object by its identifier.</param>
        </member>
        <member name="T:TotalApi.Core.Api.AsyncTaskResult">
            <summary>
            Class that includes the information about task execution result.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Api.AsyncTaskResult.TaskId">
            <summary>
            Unique task identifier.
            Sets automatically on task creation.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Api.AsyncTaskResult.Status">
            <summary>
            Current task status.
            </summary>
            <returns><see cref="T:TotalApi.Core.Api.AsyncTaskStatus"/></returns>
        </member>
        <member name="P:TotalApi.Core.Api.AsyncTaskResult.Result">
            <summary>
            Task result.
            Will be initialized if the task finished without errors, 
            otherwise it will contain <see cref="T:TotalApi.Core.Api.AsyncTaskException"/>
            </summary>
            <returns>Task result or <see cref="T:TotalApi.Core.Api.AsyncTaskException"/></returns>
        </member>
        <member name="P:TotalApi.Core.Api.AsyncTaskResult.Progress">
            <summary>
            Current progress of task execution.
            Will be set only if task handler propagates the execution progress,
            otherwise <c>-1</c>.
            </summary>
            <returns>Task execution progress.</returns>
        </member>
        <member name="P:TotalApi.Core.Api.AsyncTaskResult.StatusText">
            <summary>
            Current status of the task in a text format.
            Will be set only if task handler propagates test status during task execution,
            otherwise <c>null</c>.
            </summary>
            <returns>Task execution status.</returns>
        </member>
        <member name="M:TotalApi.Core.Api.AsyncTaskResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Core.Api.AsyncTaskResult"/> class.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Api.AsyncTaskResult.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Core.Api.AsyncTaskResult"/> class.
            </summary>
            <param name="taskId">The task identifier.</param>
        </member>
        <member name="T:TotalApi.Core.Api.AsyncTaskException">
            <summary>
            Exception of async task module.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Api.AsyncTaskException.Type">
            <summary>
            Exception type.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Api.AsyncTaskException.Message">
            <summary>
            Exception message.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Api.AsyncTaskException.#ctor">
            <summary>
            Initializes exception with no additional message.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Api.AsyncTaskException.#ctor(System.String)">
            <summary>
            Initializes exception with a message.
            </summary>
            <param name="message">Exception message.</param>
        </member>
        <member name="M:TotalApi.Core.Api.AsyncTaskException.#ctor(System.Exception)">
            <summary>
            Initializes asynchronous task exception from <see cref="T:System.Exception"/>.
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="T:TotalApi.Core.Api.AsyncTaskUnregisteredTaskNameException">
            <summary>
            Asynchronous task exception for unregistered task.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Api.AsyncTaskUnregisteredTaskNameException.#ctor(System.String)">
            <summary>
            Initializes exception for unregistered asynchronous task with a name.
            </summary>
            <param name="taskName">Asynchronous task name.</param>
        </member>
        <member name="T:TotalApi.Core.Api.AsyncTaskTimeoutException">
            <summary>
            Exception for asynchronous task timeout.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Api.AsyncTaskTimeoutException.#ctor">
            <summary>
            Initializes exception for asynchronous task timeout.
            </summary>
        </member>
        <member name="T:TotalApi.Core.Api.AsyncTaskObject">
            <summary>
            Base class for asynchronous task parameters.
            Parameters of all asynchronous tasks must derive from this class of from class, derived from this.
            Even if asynchronous task do not have real parameters - it must have an empty parameters class,
            derived from this class, because the asynchronous task parameters class identifies task type.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Api.AsyncTaskObject.ApiKey">
            <summary>
            Gets or sets the API key.
            </summary>
            <value>
            The API key.
            </value>
        </member>
        <member name="P:TotalApi.Core.Api.AsyncTaskObject.UserId">
            <summary>
            Gets or sets the user identifier.
            </summary>
            <value>
            The user identifier.
            </value>
        </member>
        <member name="P:TotalApi.Core.Api.AsyncTaskObject.TaskName">
            <summary>
            Gets the name of the task.
            </summary>
            <value>
            The name of the task.
            </value>
        </member>
        <member name="M:TotalApi.Core.Api.AsyncTaskObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Core.Api.AsyncTaskObject"/> class.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Api.AsyncTaskObject.Sanity">
            <summary>
            Sanities this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TotalApi.Core.Api.AsyncTaskStatus">
            <summary>
            Async task statuses.
            </summary>
        </member>
        <member name="F:TotalApi.Core.Api.AsyncTaskStatus.Running">
            <summary>
            Running.
            </summary>
        </member>
        <member name="F:TotalApi.Core.Api.AsyncTaskStatus.Cancelled">
            <summary>
            Canceled. (Cancel method was called).
            </summary>
        </member>
        <member name="F:TotalApi.Core.Api.AsyncTaskStatus.Done">
            <summary>
            Finished without errors.
            </summary>
        </member>
        <member name="F:TotalApi.Core.Api.AsyncTaskStatus.Faulted">
            <summary>
            Finished with errors.
            </summary>
        </member>
        <member name="T:TotalApi.Core.Api.IEventManager">
            <summary>
            Interface, responsible for subscribing and publishing events, transmitted between the modules.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Api.IEventManager.Subscribe(System.Object)">
            <summary>
            Subscribes the specified subscriber.
            </summary>
            <param name="subscriber">The subscriber.</param>
        </member>
        <member name="M:TotalApi.Core.Api.IEventManager.Unsubscribe(System.Object)">
            <summary>
            Unsubscribes the specified subscriber.
            </summary>
            <param name="subscriber">The subscriber.</param>
        </member>
        <member name="M:TotalApi.Core.Api.IEventManager.Publish(System.Object)">
            <summary>
            Publishes the specified event.
            </summary>
            <param name="e">The event object.</param>
        </member>
        <member name="T:TotalApi.Core.Api.LogMessageType">
            <summary>
            Logging messages types.
            </summary>
        </member>
        <member name="F:TotalApi.Core.Api.LogMessageType.Info">
            <summary>
            The informational message.
            </summary>
        </member>
        <member name="F:TotalApi.Core.Api.LogMessageType.Warning">
            <summary>
            The warning message.
            </summary>
        </member>
        <member name="F:TotalApi.Core.Api.LogMessageType.Error">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:TotalApi.Core.Api.OnLogDelegate">
            <summary>
            Logging delegate.
            </summary>
            <param name="logMessageType">Type of the log message.</param>
            <param name="logInfo">The log information.</param>
            <param name="message">The message.</param>
            <param name="handled">if set to <c>true</c> then logging is handled.</param>
        </member>
        <member name="T:TotalApi.Core.Api.ILogger">
            <summary>
            Interface for a loggers implementations.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Api.ILogger.Log(System.String,System.Object[])">
            <summary>
            Logs the specified message.
            </summary>
            <param name="msg">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:TotalApi.Core.Api.ILogger.LogInstance(System.Object,System.String,System.Object[])">
            <summary>
            Logs the informational message from the source.
            </summary>
            <param name="source">The source.</param>
            <param name="msg">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:TotalApi.Core.Api.ILogger.Warning(System.String,System.Object[])">
            <summary>
            Logs the warning message.
            </summary>
            <param name="msg">The warning message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:TotalApi.Core.Api.ILogger.WarningInstance(System.Object,System.String,System.Object[])">
            <summary>
            Logs the warning message from the source.
            </summary>
            <param name="source">The source.</param>
            <param name="msg">The warning message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:TotalApi.Core.Api.ILogger.Error(System.String,System.Object[])">
            <summary>
            Logs the error message.
            </summary>
            <param name="msg">The error message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:TotalApi.Core.Api.ILogger.ErrorInstance(System.Object,System.String,System.Object[])">
            <summary>
            Logs the error message from the source.
            </summary>
            <param name="source">The source.</param>
            <param name="msg">The warning message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:TotalApi.Core.Api.ILogger.Error(System.Exception,System.String,System.Object[])">
            <summary>
            Logs the error message caused by specified exception.
            </summary>
            <param name="e">The exception.</param>
            <param name="msg">The error message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:TotalApi.Core.Api.ILogger.ErrorInstance(System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            Logs the error message from the source caused by specified exception.
            </summary>
            <param name="e">The exception.</param>
            <param name="source">The source.</param>
            <param name="msg">The warning message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="E:TotalApi.Core.Api.ILogger.OnLog">
            <summary>
            Logging event.
            </summary>
        </member>
        <member name="T:TotalApi.Core.Api.TraceLogger">
            <summary>
            Logger that uses Trace as the output.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Api.TraceLogger.Instance">
            <summary>
            Gets the logger instance.
            </summary>
            <value>
            Logger instance.
            </value>
        </member>
        <member name="M:TotalApi.Core.Api.TraceLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Core.Api.TraceLogger"/> class.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Api.TraceLogger.DoLog(System.String,TotalApi.Core.Api.LogMessageType,TotalApi.Core.Api.BaseLogger.LogInstanceInfo)">
            <summary>
            Logs the message.
            </summary>
            <param name="msg">The message.</param>
            <param name="type">Log message type.</param>
            <param name="logInfo">Log message information.</param>
        </member>
        <member name="M:TotalApi.Core.Api.TraceLogger.TraceWriteLine(System.String,TotalApi.Core.Api.LogMessageType,TotalApi.Core.Api.BaseLogger.LogInstanceInfo)">
            <summary>
            Writes the message to Trace.
            </summary>
            <param name="msg">The message.</param>
            <param name="type">Log message type.</param>
            <param name="logInfo">Log message information.</param>
        </member>
        <member name="T:TotalApi.Core.Authentication.TotalApiIdentity">
            <summary>
            Authorization identity class.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Authentication.TotalApiIdentity.ApiKey">
            <summary>
            Gets or sets the API key.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Authentication.TotalApiIdentity.AppKey">
            <summary>
            Gets or sets the application key.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Authentication.TotalApiIdentity.AppUser">
            <summary>
            Gets or sets the application user.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Authentication.TotalApiIdentity.SSID">
            <summary>
            Gets or sets the ssid.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Authentication.TotalApiIdentity.SessionKey">
            <summary>
            Gets or sets the session key.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Authentication.TotalApiIdentity.UserPassword">
            <summary>
            Gets or sets the user password.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Authentication.TotalApiIdentity.UserId">
            <summary>
            Gets or sets the user identifier.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Authentication.TotalApiIdentity.AuthenticationType">
            <summary>
            Gets the authentication type.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Authentication.TotalApiIdentity.IsAuthenticated">
            <summary>
            Gets a value that indicates whether the identity has been authenticated.
            </summary>
        </member>
        <member name="T:TotalApi.Core.Authentication.AuthorizedAttribute">
            <summary>
            Используется для деларативной пометки доступа к методам только для авторизированного кода.
            Классы и методы помеченные этим атрибутом будут доступны по умолчанию только в случае если Principal текущего потока IsAuthorized.
            
            Used for declarative set the access for methods
            </summary>
        </member>
        <member name="P:TotalApi.Core.Authentication.AuthorizedAttribute.Name">
            <summary>
            Principal name.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Authentication.AuthorizedAttribute.Role">
            <summary>
            Principal role.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Authentication.AuthorizedAttribute.Authenticated">
            <summary>
            Is authenticated flag.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Authentication.AuthorizedAttribute.#ctor(System.Security.Permissions.SecurityAction)">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Core.Authentication.AuthorizedAttribute"/> class.
            </summary>
            <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction" /> values.</param>
        </member>
        <member name="M:TotalApi.Core.Authentication.AuthorizedAttribute.CreatePermission">
            <summary>
            When overridden in a derived class, creates a permission object that can then be serialized into binary form and persistently stored along with the <see cref="T:System.Security.Permissions.SecurityAction" /> in an assembly's metadata.
            </summary>
            <returns>
            A serializable permission object.
            </returns>
        </member>
        <member name="T:TotalApi.Core.Authentication.TotalApiAuthenticationType">
            <summary>
            Authentication types.
            </summary>
        </member>
        <member name="F:TotalApi.Core.Authentication.TotalApiAuthenticationType.AuthPropertyName">
            <summary>
            Name of the property, in the WCF packet of request header (in uppercase), indicating 
            authentication type, or indicating the name of property with authentication data in the connection string.
            </summary>
        </member>
        <member name="F:TotalApi.Core.Authentication.TotalApiAuthenticationType.AppUser">
            <summary>
            Application key authorization type.
            </summary>
        </member>
        <member name="F:TotalApi.Core.Authentication.TotalApiAuthenticationType.ApiKeyUser">
            <summary>
            Authorization using application user key or api key.
            Used as a role when <see cref="F:TotalApi.Core.Authentication.TotalApiAuthenticationType.AuthPropertyName"/> or <see cref="F:TotalApi.Core.Authentication.TotalApiAuthenticationType.AppUser"/> used.
            </summary>
        </member>
        <member name="F:TotalApi.Core.Authentication.TotalApiAuthenticationType.SuperApiKey">
            <summary>
            Super api-key authorization.
            Used as a role.
            </summary>
        </member>
        <member name="F:TotalApi.Core.Authentication.TotalApiAuthenticationType.ApiKey">
            <summary>
            Api key authorization.
            </summary>
        </member>
        <member name="F:TotalApi.Core.Authentication.TotalApiAuthenticationType.SSID">
            <summary>
            Subsystem key authorization.
            </summary>
        </member>
        <member name="F:TotalApi.Core.Authentication.TotalApiAuthenticationType.AppKey">
            <summary>
            Application key authorization.
            </summary>
        </member>
        <member name="F:TotalApi.Core.Authentication.TotalApiAuthenticationType.SessionKey">
            <summary>
            Session key authorization.
            This authorization type could be set for a short time just for initial check. After check - authorization type could change to <see cref="F:TotalApi.Core.Authentication.TotalApiAuthenticationType.ApiKey"/> or <see cref="F:TotalApi.Core.Authentication.TotalApiAuthenticationType.AppUser"/>.
            </summary>
        </member>
        <member name="T:TotalApi.Core.Authentication.TotalApiAuth">
            <summary>
            Authentication information that should be transfered during services requests.
            </summary>
        </member>
        <member name="F:TotalApi.Core.Authentication.TotalApiAuth.ChechAuth">
            <summary>
            Delegate to check authetication.
            Returns true if authenctication is valid.
            <para></para>
            The hanlder must resolve all properties that it can:<para></para>
                <see cref="P:TotalApi.Core.Authentication.TotalApiPrincipal.ApiKey"/> by <see cref="P:TotalApi.Core.Authentication.TotalApiPrincipal.AppKey"/><para></para>
                <see cref="P:TotalApi.Core.Authentication.TotalApiPrincipal.UserId"/> by <see cref="P:TotalApi.Core.Authentication.TotalApiPrincipal.AppKey"/> and <see cref="P:TotalApi.Core.Authentication.TotalApiPrincipal.UserLogin"/><para></para>
            NEVER assign<para></para>
                <see cref="P:TotalApi.Core.Authentication.TotalApiPrincipal.AppKey"/> by <see cref="P:TotalApi.Core.Authentication.TotalApiPrincipal.ApiKey"/>
            </summary>
        </member>
        <member name="M:TotalApi.Core.Authentication.TotalApiAuth.ThrowNotAuthorizedException(System.Boolean,System.String)">
            <summary>
            Throws the not authorized exception.
            </summary>
            <param name="doThrow">if set to <c>true</c> throws the exception.</param>
            <param name="authType">Type of the authentication.</param>
            <returns>Exception</returns>
        </member>
        <member name="M:TotalApi.Core.Authentication.TotalApiAuth.ThrowExpiredException">
            <summary>
            Throws the expired exception.
            </summary>
            <exception cref="T:System.ServiceModel.Security.ExpiredSecurityTokenException">Session key is expired.</exception>
        </member>
        <member name="P:TotalApi.Core.Authentication.TotalApiAuth.ApiKey">
            <summary>
            Returns unique secret identifier of the application using the API.
            If value is not set - throw an authorization exception.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Authentication.TotalApiAuth.AppKey">
            <summary>
            Returns unique public identifier of the application using the API.
            If value is not set - throw an authorization exception.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Authentication.TotalApiAuth.SSID">
            <summary>
            Returns unique secret identifier of the sub system using the API.
            If value is not set - throw an authorization exception.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Authentication.TotalApiAuth.UserId">
            <summary>
            Returns UserId for AppUser authorization.
            If UserLogin is set but value is not set - throw an authorization exception.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Authentication.TotalApiAuth.UserLogin">
            <summary>
            Returns UserLogin for AppUser authorization.
            If UserLogin is not set or UserLogin is set but AppKey is not set - throw an authorization exception.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Authentication.TotalApiAuth.UserPassword">
            <summary>
            Returns UserPassword for AppUser authorization.
            If UserLogin is not set or UserLogin is set but AppKey is not set - throw an authorization exception.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Authentication.TotalApiAuth.SetAuth(System.Action)">
            <summary>
            Служит для временной аутентификации. По окончании - восстанавливает предыдущее состояние аутентификации.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Authentication.TotalApiAuth.ClientId">
            <summary>
            Returns unique client identifier.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Authentication.TotalApiAuth.AuthType">
            <summary>
            Currently used authentication type.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Authentication.TotalApiAuth.IsAuthenticated">
            <summary>
            If True - user is authenticated, otherwise - not authenticated.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Authentication.TotalApiAuth.Set">
            <summary>
            Check the <see cref="P:TotalApi.Core.Authentication.TotalApiPrincipal.Current"/> for valid auth and set <see cref="P:System.Threading.Thread.CurrentPrincipal"/>
            if authentication is valid.
            </summary>
            <returns><c>true</c> if authentication is valid. <c>false</c> - otherwise.</returns>
        </member>
        <member name="M:TotalApi.Core.Authentication.TotalApiAuth.Clear">
            <summary>
            Clear all authentification info. <see cref="P:TotalApi.Core.Authentication.TotalApiAuth.ClientId"/> is not cleared.
            </summary>
        </member>
        <member name="T:TotalApi.Core.Authentication.TotalApiClaimsIdentity">
            <summary>
            Authorization claims identity class.
            </summary>
        </member>
        <member name="F:TotalApi.Core.Authentication.TotalApiClaimsIdentity.AuthIssuer">
            <summary>
            Издатель клаймов для <see cref="T:TotalApi.Core.Authentication.TotalApiIdentity"/>.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Authentication.TotalApiClaimsIdentity.ApiKey">
            <summary>
            Gets or sets the API key.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Authentication.TotalApiClaimsIdentity.AppKey">
            <summary>
            Gets or sets the application key.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Authentication.TotalApiClaimsIdentity.AppUser">
            <summary>
            Gets or sets the application user.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Authentication.TotalApiClaimsIdentity.SSID">
            <summary>
            Gets or sets the ssid.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Authentication.TotalApiClaimsIdentity.SessionKey">
            <summary>
            Gets or sets the session key.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Authentication.TotalApiClaimsIdentity.UserPassword">
            <summary>
            Gets or sets the user password.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Authentication.TotalApiClaimsIdentity.UserId">
            <summary>
            Gets or sets the user identifier.
            </summary>
        </member>
        <member name="T:TotalApi.Core.Authentication.TotalApiPrincipal">
            <summary>
            Authorization principal class.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Authentication.TotalApiPrincipal.IsPrimary">
            <summary>
            Gets or sets a value indicating whether this instance is primary.
            </summary>
            <value>
            <c>true</c> if this instance is primary; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TotalApi.Core.Authentication.TotalApiPrincipal.Current">
            <summary>
            Gets the current principal.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Authentication.TotalApiPrincipal.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:TotalApi.Core.Authentication.TotalApiPrincipal.Identity">
            <summary>
            Gets the primary claims identity associated with this claims principal.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Authentication.TotalApiPrincipal.Create(System.String)">
            <summary>
            Creates the principal using json information.
            </summary>
            <param name="jsonInfo">The json information.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.Authentication.TotalApiPrincipal.Create(System.String,System.String)">
            <summary>
            Creates the principal using API key and used identifier.
            </summary>
            <param name="apiKey">The API key.</param>
            <param name="userId">The user identifier.</param>
            <returns></returns>
        </member>
        <member name="P:TotalApi.Core.Authentication.TotalApiPrincipal.ApiKey">
            <summary>
            Unique secret identifier of the application using the API
            </summary>
        </member>
        <member name="P:TotalApi.Core.Authentication.TotalApiPrincipal.AppKey">
            <summary>
            Unique public identifier of the application using the API
            </summary>
        </member>
        <member name="P:TotalApi.Core.Authentication.TotalApiPrincipal.SessionKey">
            <summary>
            Unique session identifier using the API
            </summary>
        </member>
        <member name="P:TotalApi.Core.Authentication.TotalApiPrincipal.SSID">
            <summary>
            Unique secret identifier of the sub system using the API
            </summary>
        </member>
        <member name="P:TotalApi.Core.Authentication.TotalApiPrincipal.UserLogin">
            <summary>
            Login of the user using the API
            </summary>
        </member>
        <member name="P:TotalApi.Core.Authentication.TotalApiPrincipal.UserPassword">
            <summary>
            Password of the user using the API
            </summary>
        </member>
        <member name="P:TotalApi.Core.Authentication.TotalApiPrincipal.UserId">
            <summary>
            Id of the user using the API.
            Not set on the client side, but must be set on the server side when checking authentication.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Authentication.TotalApiPrincipal.ClientId">
            <summary>
            Unique identifier of the client using the API. Recreated on each start the client.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Authentication.TotalApiPrincipal.Origin">
            <summary>
            Defined on server side. Remote origin address info about connection.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Authentication.TotalApiPrincipal.ToJson">
            <summary>
            Converts current principal to json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.Authentication.TotalApiPrincipal.Clear(System.Boolean)">
            <summary>
            Clears current principal properties.
            </summary>
            <param name="saveClientId">if set to <c>true</c> saves client identifier.</param>
        </member>
        <member name="M:TotalApi.Core.Authentication.TotalApiPrincipal.FromJson(System.String)">
            <summary>
            Deserializes principal from json.
            </summary>
            <param name="jsonString">The json string.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.Authentication.TotalApiPrincipal.IsInRole(System.String)">
            <summary>
            Returns a value that indicates whether the entity (user) represented by this claims principal is in the specified role.
            </summary>
            <param name="role">The role for which to check.</param>
            <returns>
            true if claims principal is in the specified role; otherwise, false.
            </returns>
        </member>
        <member name="P:TotalApi.Core.Authentication.TotalApiPrincipal.Header">
            <summary>
            Converts the current instance from/to the web query header.
            Supports three input formats which can be encoded  with Base64 or not encoded:
              1. Raw: ...json data...
              2. Authorization Header: TOTALAPI ...json data...
              3. Query String: [?]auth=...json data...
            </summary>
        </member>
        <member name="T:TotalApi.Core.DataModel.Annotations.ApiDocIgnoreAttribute">
            <summary>
            Attribute used only for api documentation autogeneration.
            </summary>
        </member>
        <member name="P:TotalApi.Core.DataModel.Annotations.ApiDocIgnoreAttribute.DoIgnore">
            <summary>
            Gets a value indicating whether to ignore the property.
            </summary>
        </member>
        <member name="M:TotalApi.Core.DataModel.Annotations.ApiDocIgnoreAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Core.DataModel.Annotations.ApiDocIgnoreAttribute"/> class.
            </summary>
            <param name="doIgnore">if set to <c>true</c> - ignore the property.</param>
        </member>
        <member name="T:TotalApi.Core.DataModel.Annotations.IndexAttribute">
            <summary>
            Attributes indicating if property is indexed by database.
            </summary>
        </member>
        <member name="P:TotalApi.Core.DataModel.Annotations.IndexAttribute.Name">
            <summary>
            The index name.
            
            </summary>
            
            <remarks>
            Multi-column indexes are created by using the same index name in multiple attributes. The information
                        in these attributes is then merged together to specify the actual database index.
            
            </remarks>
        </member>
        <member name="P:TotalApi.Core.DataModel.Annotations.IndexAttribute.Order">
            <summary>
            A number which will be used to determine column ordering for multi-column indexes. This will be -1 if no
                        column order has been specified.
            
            </summary>
            
            <remarks>
            Multi-column indexes are created by using the same index name in multiple attributes. The information
                        in these attributes is then merged together to specify the actual database index.
            
            </remarks>
        </member>
        <member name="P:TotalApi.Core.DataModel.Annotations.IndexAttribute.IsClustered">
            <summary>
            Set this property to true to define a clustered index. Set this property to false to define a
                        non-clustered index.
            
            </summary>
            
            <remarks>
            The value of this property is only relevant if <see cref="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsClusteredConfigured"/> returns true.
                        If <see cref="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsClusteredConfigured"/> returns false, then the value of this property is meaningless.
            
            </remarks>
        </member>
        <member name="P:TotalApi.Core.DataModel.Annotations.IndexAttribute.IsClusteredConfigured">
            <summary>
            Returns true if <see cref="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsClustered"/> has been set to a value.
            
            </summary>
        </member>
        <member name="P:TotalApi.Core.DataModel.Annotations.IndexAttribute.IsUnique">
            <summary>
            Set this property to true to define a unique index. Set this property to false to define a
                        non-unique index.
            
            </summary>
            
            <remarks>
            The value of this property is only relevant if <see cref="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsUniqueConfigured"/> returns true.
                        If <see cref="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsUniqueConfigured"/> returns false, then the value of this property is meaningless.
            
            </remarks>
        </member>
        <member name="P:TotalApi.Core.DataModel.Annotations.IndexAttribute.IsUniqueConfigured">
            <summary>
            Returns true if <see cref="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsUnique"/> has been set to a value.
            
            </summary>
        </member>
        <member name="P:TotalApi.Core.DataModel.Annotations.IndexAttribute.TypeId">
            <summary>
            Returns a different ID for each object instance such that type descriptors won't
                        attempt to combine all IndexAttribute instances into a single instance.
            
            </summary>
        </member>
        <member name="M:TotalApi.Core.DataModel.Annotations.IndexAttribute.#ctor">
            <summary>
            Creates a <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute"/> instance for an index that will be named by convention and
                        has no column order, clustering, or uniqueness specified.
            
            </summary>
        </member>
        <member name="M:TotalApi.Core.DataModel.Annotations.IndexAttribute.#ctor(System.String)">
            <summary>
            Creates a <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute"/> instance for an index with the given name and
                        has no column order, clustering, or uniqueness specified.
            
            </summary>
            <param name="name">The index name.</param>
        </member>
        <member name="M:TotalApi.Core.DataModel.Annotations.IndexAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Creates a <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute"/> instance for an index with the given name and column order,
                        but with no clustering or uniqueness specified.
            
            </summary>
            
            <remarks>
            Multi-column indexes are created by using the same index name in multiple attributes. The information
                        in these attributes is then merged together to specify the actual database index.
            
            </remarks>
            <param name="name">The index name.</param><param name="order">A number which will be used to determine column ordering for multi-column indexes.</param>
        </member>
        <member name="M:TotalApi.Core.DataModel.Annotations.IndexAttribute.#ctor(System.String,System.Int32,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Core.DataModel.Annotations.IndexAttribute"/> class.
            </summary>
            <param name="name">Index name.</param>
            <param name="order">Index order.</param>
            <param name="isClustered">Is clustered index.</param>
            <param name="isUnique">Is unique index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">order</exception>
        </member>
        <member name="M:TotalApi.Core.DataModel.Annotations.IndexAttribute.Equals(TotalApi.Core.DataModel.Annotations.IndexAttribute)">
            <summary>
            Returns true if this attribute specifies the same name and configuration as the given attribute.
            
            </summary>
            <param name="other">The attribute to compare.</param>
            <returns>
            True if the other object is equal to this object; otherwise false.
            </returns>
        </member>
        <member name="M:TotalApi.Core.DataModel.Annotations.IndexAttribute.Equals(System.Object)">
            <inheritdoc/>
            <summary>
            Returns true if this attribute specifies the same name and configuration as the given attribute.
            
            </summary>
            <param name="obj">The attribute to compare.</param>
            <returns>
            True if the other object is equal to this object; otherwise false.
            </returns>
        </member>
        <member name="M:TotalApi.Core.DataModel.Annotations.IndexAttribute.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:TotalApi.Core.DataModel.Annotations.PropertyAnnotationAttribute">
            <summary>
            Abstract class for annotating entities classes properties.
            </summary>
        </member>
        <member name="T:TotalApi.Core.DataModel.Annotations.UniqueAttribute">
            <summary>
            Attribute indicating if a property of the entity class is unique
            </summary>
        </member>
        <member name="M:TotalApi.Core.DataModel.Annotations.UniqueAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Core.DataModel.Annotations.UniqueAttribute"/> class.
            </summary>
        </member>
        <member name="T:TotalApi.Core.AsyncDbDataContext">
            <summary>
            Data conext class for asynchronous operations
            </summary>
        </member>
        <member name="M:TotalApi.Core.AsyncDbDataContext.#ctor(TotalApi.Core.IDbDataContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Core.AsyncDbDataContext"/> class.
            </summary>
            <param name="dbContext">The database context.</param>
        </member>
        <member name="M:TotalApi.Core.AsyncDbDataContext.DeleteAsync(TotalApi.Core.IEntityObject)">
            <summary>
            Deletes the entity object.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.AsyncDbDataContext.SaveChangesAsync">
            <summary>
            Saves changes of entity object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.AsyncDbDataContext.FindAsync``1(System.String)">
            <summary>
            Finds the entity object.
            </summary>
            <typeparam name="TEntityObjectId">The type of the entity object identifier.</typeparam>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.AsyncDbDataContext.DeleteAndSaveAsync``1(System.String)">
            <summary>
            Deletes entity object.
            </summary>
            <typeparam name="TEntityObjectId">The type of the entity object identifier.</typeparam>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.AsyncDbDataContext.SaveAsync(TotalApi.Core.IEntityObject,System.Boolean)">
            <summary>
            Saves the entity object.
            </summary>
            <param name="entity">The entity.</param>
            <param name="isNew">Indicating that entity object is new object</param>
            <returns></returns>
        </member>
        <member name="T:TotalApi.Core.AsyncTasks.AsyncTaskSettings">
            <summary>
            Settings for tasks execution.
            </summary>
        </member>
        <member name="P:TotalApi.Core.AsyncTasks.AsyncTaskSettings.StorageHandlerPeriod">
            <summary>
            Working period of a cycle, handling 1-st level cache.
            This cycle clears cache of obsolete tasks and canceles
            tasks that has exceeded their timeout.
            Try not to change this value, otherwise - do not set it as very big or very small.
            </summary>
            <returns><see cref="T:System.TimeSpan"/></returns>
        </member>
        <member name="P:TotalApi.Core.AsyncTasks.AsyncTaskSettings.StorePeriod">
            <summary>
            Time of storing results of tasks execution in 1-st level cache.
            Not recomended to set this value as very big - in this case results might be not actual and memory consumption will increase drammatically.
            There is no sense of setting this parameter to less then <see cref="P:TotalApi.Core.AsyncTasks.AsyncTaskSettings.StorageHandlerPeriod"/>.
            </summary>
            <returns><see cref="T:System.TimeSpan"/></returns>
        </member>
        <member name="P:TotalApi.Core.AsyncTasks.AsyncTaskSettings.CachingPeriod">
            <summary>
            Time of caching tasks results in a 2-nd level cache.
            If it equals TimeSpan.MaxValue - results will not be cached at all.
            </summary>
            <returns><see cref="T:System.TimeSpan"/></returns>
        </member>
        <member name="P:TotalApi.Core.AsyncTasks.AsyncTaskSettings.Timeout">
            <summary>
            Task processing timeout.
            No sense to set this parameter as less then <see cref="P:TotalApi.Core.AsyncTasks.AsyncTaskSettings.StorageHandlerPeriod"/>.
            </summary>
            <returns><see cref="T:System.TimeSpan"/></returns>
        </member>
        <member name="M:TotalApi.Core.AsyncTasks.AsyncTaskSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Core.AsyncTasks.AsyncTaskSettings"/> class.
            </summary>
        </member>
        <member name="M:TotalApi.Core.AsyncTasks.AsyncTaskSettings.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Core.AsyncTasks.AsyncTaskSettings"/> class.
            </summary>
            <param name="storageHandlerPeriod">The storage handler period.</param>
        </member>
        <member name="T:TotalApi.Core.Billing.IBillingDbContext">
            <summary>
            Context interface for billing database.
            </summary>
        </member>
        <member name="T:TotalApi.Core.Billing.Session">
            <summary>
            Temporary session descriptor
            </summary>
        </member>
        <member name="P:TotalApi.Core.Billing.Session.Id">
            <summary>
            Temporary session unique identifier
            </summary>
        </member>
        <member name="P:TotalApi.Core.Billing.Session.ExpiredAt">
            <summary>
            Session validity date.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Billing.Session.PrincipalInfo">
            <summary>
            Identification data for which the session was created.
            </summary>
        </member>
        <member name="T:TotalApi.Core.Billing.SubSystemManager">
            <summary>
            Subsystem manager.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Billing.SubSystemManager.NoConnection">
            <summary>
            Sets up when the subsystem determines disconnection with billing subsystem.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Billing.SubSystemManager.NoConnectionError">
            <summary>
            Error message in the case of disconnection with billing subsystem.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Billing.SubSystemManager.CurrentSSID">
            <summary>
            Subsystem identifier of current subsystem.
            Equals <c>null</c> if current domain is not registered as the separate subsystem.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Billing.SubSystemManager.CurrentSSIDPrincipal">
            <summary>
            Gets the current subsystem identifier principal.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Billing.SubSystemManager.Current">
            <summary>
            Current subsystem. Equals <c>null</c> if current domain is not registered as the separate subsystem. 
            </summary>
        </member>
        <member name="F:TotalApi.Core.Billing.SubSystemManager.CurrentRestrictions">
            <summary>
            List of restrictions of current subsystem. The list will be empty in the case if current domain is not registered as the separate subsystem. 
            </summary>
        </member>
        <member name="P:TotalApi.Core.Billing.SubSystemManager.CurrentClassesIds">
            <summary>
            Gets the subsystem's classes ids.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Billing.SubSystemManager.IsCurrentSubSystemBilling">
            <summary>
            Indicates that current subsystem is billing subsystem.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Billing.SubSystemManager.IsBillingSubSystemDown">
            <summary>
            <c>true</c> if billing subsystem is unavaliable.
            </summary>
        </member>
        <member name="F:TotalApi.Core.Billing.SubSystemManager.Cache">
            <summary>
            The subsystems cache.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Billing.SubSystemManager.GetSubsystemConfig(System.String,System.Boolean)">
            <summary>
            Searches for file in modules folder and, optionally, in subfolders.
            If more than one file found - returns the first one.
            </summary>
            <param name="fileName">Name of the file or mask to search without path.</param>
            <param name="isRecursive">Search in subfolders.</param>
        </member>
        <member name="M:TotalApi.Core.Billing.SubSystemManager.LoadConfig``1(System.String,System.Boolean)">
            <summary>
            Searches and loads json file in modules folders and, optionally, in subfolders.
            If more than one file found - returns the first one.
            </summary>
            <param name="fileName">Name of the file or mask to search without path. If no name specified - will use the fileName as the name of the class with .json extension.</param>
            <param name="isRecursive">Search in subfolders.</param>
        </member>
        <member name="M:TotalApi.Core.Billing.SubSystemManager.Register">
            <summary>
            Registeres the subsystem.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.Billing.SubSystemManager.CacheSubSystems">
            <summary>
            Caches the subsystem.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Billing.SubSystemManager.Create(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates the subsystem.
            </summary>
            <param name="id">The identifier.</param>
            <param name="ssid">The ssid.</param>
            <param name="description">The description.</param>
            <param name="incomingEvents">The incoming events.</param>
            <param name="outgoingEvents">The outgoing events.</param>
            <param name="repositoryClasses">The repository classes.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.Billing.SubSystemManager.IsSSIDValid(System.String)">
            <summary>
            Determines whether ssid is valid.
            </summary>
            <param name="ssid">The ssid.</param>
        </member>
        <member name="M:TotalApi.Core.Billing.SubSystemManager.IsApiKeyValid(System.String)">
            <summary>
            Determines whether the API key is valid.
            </summary>
            <param name="apiKey">The API key.</param>
        </member>
        <member name="M:TotalApi.Core.Billing.SubSystemManager.GetApiKeyByAppKey(System.String)">
            <summary>
            Gets the API key by application key.
            </summary>
            <param name="appKey">The application key.</param>
        </member>
        <member name="M:TotalApi.Core.Billing.SubSystemManager.FindAuthUser">
            <summary>
            Finds the authentication user.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Billing.SubSystemManager.FindSession(System.String)">
            <summary>
            Finds the session.
            </summary>
            <param name="sessionKey">The session key.</param>
        </member>
        <member name="T:TotalApi.Core.Billing.SessionInfo">
            <summary>
            Temporary session parameters.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Billing.SessionInfo.SessionKey">
            <summary>
            Session identifier value.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Billing.SessionInfo.ExpiredIn">
            <summary>
            Session lifetime (from the moment being initialized).
            </summary>
        </member>
        <member name="T:TotalApi.Core.ClassDescriptionAttribute">
            <summary>
            Any entity accessable via RepositoryApi module can be marked with this attribute to extend its registration information.
            NOTE: Subsystem must have either the class implemented IRepository{TEntity} or the class exported IRepository{TEntity} for TEnity to be accessable via RepositoryApi.
            </summary>
        </member>
        <member name="P:TotalApi.Core.ClassDescriptionAttribute.Id">
            <summary>
            Unique entity class identifier. If not defined - full class name will be used.
            </summary>
        </member>
        <member name="P:TotalApi.Core.ClassDescriptionAttribute.Description">
            <summary>
            User friendly entity class description. If not defined - short class name will be used.
            </summary>
        </member>
        <member name="P:TotalApi.Core.ClassDescriptionAttribute.DbContextType">
            <summary>
            Explicit definition database context of the entity
            </summary>
            <value>
            The type of the database context.
            </value>
            <exception cref="T:System.ApplicationException">{0}: Cannot assign this type to a IDbDataContext interface. The assembly {1} contains more than one children of this interface. Mark the type {0} with attribute [ClassDescription] and specify DbContextType property in it..Fmt(EntityType.FullName, EntityType.Assembly.FullName)</exception>
        </member>
        <member name="M:TotalApi.Core.ClassDescriptionAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Core.ClassDescriptionAttribute"/> class.
            </summary>
        </member>
        <member name="M:TotalApi.Core.ClassDescriptionAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Core.ClassDescriptionAttribute"/> class with entity description and identifier.
            </summary>
            <param name="description">User friendly entity class description. If not defined - short class name will be used.</param>
            <param name="id">Unique entity class identifier. If not defined - full class name will be used.</param>
        </member>
        <member name="M:TotalApi.Core.ClassDescriptionAttribute.#ctor(System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Core.ClassDescriptionAttribute"/> class with database context type, entity description and identifier.
            </summary>
            <param name="dbContextType">Explicit definition database context of the entity.</param>
            <param name="description">User friendly entity class description. If not defined - short class name will be used.</param>
            <param name="id">Unique entity class identifier. If not defined - full class name will be used.</param>
        </member>
        <member name="T:TotalApi.Core.DataModelExtensions">
            <summary>
            Data model helper methods.
            </summary>
        </member>
        <member name="M:TotalApi.Core.DataModelExtensions.IsRepositoryType(System.String,System.Type)">
            <summary>
            Determines whether type identifier is the specified type.
            </summary>
            <param name="typeId">The type identifier.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.DataModelExtensions.IsRepositoryType``1(System.String)">
            <summary>
            Determines whether type identifier is the specified type.
            </summary>
            <typeparam name="T"><see cref="T:TotalApi.Core.IEntityObject"/></typeparam>
            <param name="typeId">The type identifier.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.DataModelExtensions.GetRepositoryTypeDescription(System.Type)">
            <summary>
            Gets the repository type description marked by <see cref="T:TotalApi.Core.ClassDescriptionAttribute"/>.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.DataModelExtensions.GetRepositoryType(System.String)">
            <summary>
            Gets the type of the repository.
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.DataModelExtensions.GetRepositoryDbContext(System.String)">
            <summary>
            Gets the repository database context.
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="T:TotalApi.Core.Events.TotalApiEventObject">
            <summary>
            Base events class, which includes (optionally) information about access rights.
            If <see cref="P:TotalApi.Core.Events.TotalApiEventObject.ApiKey"/> is not set - event will not be avaliable to subscribers,
            otherwise if <see cref="P:TotalApi.Core.Events.TotalApiEventObject.UserId"/> is not set - event will be avaliable to all subscribers, authorized by <see cref="P:TotalApi.Core.Events.TotalApiEventObject.ApiKey"/>,
            if <see cref="P:TotalApi.Core.Events.TotalApiEventObject.UserId"/> is set - additionally, only for subscribers with correspondent <c>UserKey</c> authorization.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Events.TotalApiEventObject.ApiKey">
            <summary>
            Gets or sets the API key.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Events.TotalApiEventObject.UserId">
            <summary>
            Gets or sets the user identifier.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Events.TotalApiEventObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Core.Events.TotalApiEventObject"/> class.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Events.TotalApiEventObject.Sanity">
            <summary>
            Sanities this event.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TotalApi.Core.Events.EventManagerBase">
            <summary>
            Events manager base class.
            </summary>
        </member>
        <member name="F:TotalApi.Core.Events.EventManagerBase.DefaultGetEventsPeriod">
            <summary>
            Default value. Period of checking for new events.
            MinValue or MaxValue - turns off checking (use only for debugging purposes).
            </summary>
        </member>
        <member name="F:TotalApi.Core.Events.EventManagerBase.GetEventsPeriod">
            <summary>
            Period of checking for new events.
            MinValue or MaxValue - turns off checking (use only for debugging purposes).
            </summary>
        </member>
        <member name="P:TotalApi.Core.Events.EventManagerBase.Instance">
            <summary>
            Gets the instance.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Events.EventManagerBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Core.Events.EventManagerBase"/> class.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Events.EventManagerBase.IsSuspended">
            <summary>
            Gets or sets a value indicating whether the events checking is suspended.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Events.EventManagerBase.ExecuteAsync(TotalApi.Billing.SubSystem,System.Action,System.Action)">
            <summary>
            Выполняет асинхронно переданный запрос к подсистеме.
            Если подсистема недоступна запрос выполняться не будет - будет проигнорирован.  
            Если при выполнении запроса произошла ошибка - будет сделана попытка восстановить соединение через определённое время.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Events.EventManagerBase.ReadEventsAsync(System.Tuple{TotalApi.Billing.SubSystem,TotalApi.Core.ServiceContracts.Events.IEventManagerService},System.Action{System.Collections.Generic.IEnumerable{TotalApi.Utils.EventObjectContract}})">
            <summary>
            Выполняет асинхронно переданный запрос к подсистеме. (Используется только для чтения сообщений).
            Если подсистема недоступна запрос выполняться не будет - будет проигнорирован.  
            Пока этот запрос не будет выполнен повторный запрос к этой подсистеме выполняться не будет - будет проигнорирован. 
            Однако подобные запросы к другим подсистемам будут выполняться.
            Если при выполнении запроса произошла ошибка - будет сделана попытка восстановить соединение через определённое время.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Events.EventManagerBase.OnSubscriptionsChanged(System.Boolean)">
            <summary>
            Это событие вызывается, когда сборщик мусора уничтожает объект подписчик на который нет больше ссылок.
            Необходимо пройтись по списку подписанных событий и отписаться от тех, для которых не осталось обработчиков. 
            </summary>
        </member>
        <member name="M:TotalApi.Core.Events.EventManagerBase.PublishToInternalQueue(TotalApi.Utils.EventObjectContract)">
            <summary>
            Публикует события только во внутреннюю очередь.
            </summary>
            <param name="eventObjectContract"></param>
        </member>
        <member name="M:TotalApi.Core.Events.EventManagerBase.InternalPublish(System.Object)">
            <summary>
            Расширение стандартной публикуции событий.
            Вместе с публикацией события во внутреннюю очередь - отправляем событие вовне.
            </summary>
            <param name="eventObject"></param>
        </member>
        <member name="T:TotalApi.Core.Events.IInternalEvent`1">
            <summary>
            Interface indicates that subscriber subscribes only to events of internal queue.
            If all event subsribers will implement this interface, subsystem will not catch the events of this type from distributed subsystems.
            </summary>
        </member>
        <member name="T:TotalApi.Core.Events.IInternalEvent">
            <summary>
            Interface indicates that subscriber subscribes only to  events of internal queue.
            </summary>
        </member>
        <member name="T:TotalApi.Core.Events.InternalEventObject">
            <summary>
            Events, derived from this  class would not be distributed to external subsystems.
            They will circulate only within a particular subsystem.
            </summary>
        </member>
        <member name="T:TotalApi.Core.Events.OnAsyncTaskEvent">
            <summary>
            Event fired by asynchronous task.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Events.OnAsyncTaskEvent.TaskId">
            <summary>
            Gets the task identifier.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Events.OnAsyncTaskEvent.Task">
            <summary>
            Gets the asynchronous task.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Events.OnAsyncTaskEvent.#ctor(System.String,TotalApi.Core.Api.AsyncTaskObject)">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Core.Events.OnAsyncTaskEvent"/> class.
            </summary>
            <param name="taskId">The task identifier.</param>
            <param name="task">Asynchronous task instance.</param>
        </member>
        <member name="T:TotalApi.Core.Events.OnAsyncTaskFinished">
            <summary>
            Event, that indicates the finish of asynchronous task execution.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Events.OnAsyncTaskFinished.Status">
            <summary>
            Gets the asynchronous task status.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Events.OnAsyncTaskFinished.#ctor(System.String,TotalApi.Core.Api.AsyncTaskObject,TotalApi.Core.Api.AsyncTaskStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Core.Events.OnAsyncTaskFinished"/> class.
            </summary>
            <param name="taskId">The task identifier.</param>
            <param name="task">Asynchronous task instance.</param>
            <param name="status">Asynchronous task status.</param>
        </member>
        <member name="M:TotalApi.Core.Events.OnAsyncTaskFinished.Post(System.String,TotalApi.Core.Api.AsyncTaskObject,TotalApi.Core.Api.AsyncTaskStatus)">
            <summary>
            Publishes the event.
            </summary>
            <param name="taskId">The task identifier.</param>
            <param name="task">Asynchronous task instance.</param>
            <param name="status">Asynchronous task status.</param>
        </member>
        <member name="T:TotalApi.Core.Events.OnAsyncTaskStarted">
            <summary>
            Event, that indicates the start of asynchronous task execution.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Events.OnAsyncTaskStarted.#ctor(System.String,TotalApi.Core.Api.AsyncTaskObject)">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Core.Events.OnAsyncTaskStarted"/> class.
            </summary>
            <param name="taskId">The task identifier.</param>
            <param name="task">Asynchronous task instance.</param>
        </member>
        <member name="M:TotalApi.Core.Events.OnAsyncTaskStarted.Post(System.String,TotalApi.Core.Api.AsyncTaskObject)">
            <summary>
            Publishes the event.
            </summary>
            <param name="taskId">The task identifier.</param>
            <param name="task">Asynchronous task task.</param>
        </member>
        <member name="T:TotalApi.Core.Events.OnBillingStarted">
            <summary>
            Event, fired by billing subsystem to all subscribers, indicating the start of the subsystem.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Events.OnBillingStarted.Post">
            <summary>
            Publishes the event.
            </summary>
        </member>
        <member name="T:TotalApi.Core.Events.OnDataChanged">
            <summary>
            Event, fires when entity object has been changed after CRUD operation.
            </summary>
        </member>
        <member name="T:TotalApi.Core.Events.OnDataChanged.Action">
            <summary>
            CRUD actions.
            </summary>
        </member>
        <member name="F:TotalApi.Core.Events.OnDataChanged.Action.Create">
            <summary>
            Object creation.
            </summary>
        </member>
        <member name="F:TotalApi.Core.Events.OnDataChanged.Action.Update">
            <summary>
            Object update.
            </summary>
        </member>
        <member name="F:TotalApi.Core.Events.OnDataChanged.Action.Delete">
            <summary>
            Object delete.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Events.OnDataChanged.TypeId">
            <summary>
            Gets or sets the type identifier.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Events.OnDataChanged.ObjectId">
            <summary>
            Gets or sets the object identifier.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Events.OnDataChanged.ActionType">
            <summary>
            Gets or sets the type of the action.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Events.OnDataChanged.Create(TotalApi.Core.ITotalApiEntityObjectId,TotalApi.Core.Events.OnDataChanged.Action)">
            <summary>
            Creates the data changed event.
            </summary>
            <param name="entity">The entity.</param>
            <param name="actionType">Type of the action.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.Events.OnDataChanged.Is(System.Type)">
            <summary>
            Determines whether current objects type is the specified type.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:TotalApi.Core.Events.OnDataChanged.Is``1">
            <summary>
            Determines whether current objects type is the specified type.
            </summary>
            <typeparam name="T">Object type</typeparam>
        </member>
        <member name="M:TotalApi.Core.Events.OnDataChanged.Create``1(System.String,TotalApi.Core.Events.OnDataChanged.Action)">
            <summary>
            Creates the data changed event.
            </summary>
            <typeparam name="TEntityObjectId">The type of the entity object identifier.</typeparam>
            <param name="id">Object identifier.</param>
            <param name="actionType">Type of the action.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.Events.OnDataChanged.Create(System.Type,System.String,TotalApi.Core.Events.OnDataChanged.Action)">
            <summary>
            Creates the specified entity type.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="id">The identifier.</param>
            <param name="actionType">Type of the action.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.Events.OnDataChanged.Publish(TotalApi.Core.IEntityObjectId,TotalApi.Core.Events.OnDataChanged.Action)">
            <summary>
            Publishes the event.
            </summary>
            <param name="entity">The entity.</param>
            <param name="actionType">Type of the action.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.Events.OnDataChanged.Publish``1(System.String,TotalApi.Core.Events.OnDataChanged.Action)">
            <summary>
            Publishes the event.
            </summary>
            <typeparam name="TEntityObjectId">The type of the entity object identifier.</typeparam>
            <param name="id">The identifier.</param>
            <param name="actionType">Type of the action.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.Events.OnDataChanged.Publish(System.Type,System.String,TotalApi.Core.Events.OnDataChanged.Action)">
            <summary>
            Publishes the specified entity type.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="id">The identifier.</param>
            <param name="actionType">Type of the action.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.Events.OnDataChanged.OnCreated(TotalApi.Core.IEntityObjectId)">
            <summary>
            Called when object created.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.Events.OnDataChanged.OnUpdated(TotalApi.Core.IEntityObjectId)">
            <summary>
            Called when object updated.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.Events.OnDataChanged.OnDeleted(TotalApi.Core.IEntityObjectId)">
            <summary>
            Called when object deleted.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.Events.OnDataChanged.OnCreated``1(System.String)">
            <summary>
            Called when object created.
            </summary>
            <typeparam name="TEntityObjectId">The type of the entity object identifier.</typeparam>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.Events.OnDataChanged.OnUpdated``1(System.String)">
            <summary>
            Called when object updated.
            </summary>
            <typeparam name="TEntityObjectId">The type of the entity object identifier.</typeparam>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.Events.OnDataChanged.OnDeleted``1(System.String)">
            <summary>
            Called when object deleted.
            </summary>
            <typeparam name="TEntityObjectId">The type of the entity object identifier.</typeparam>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="T:TotalApi.Core.Events.OnProgress">
            <summary>
            Event, fires when progress of operation changes.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Events.OnProgress.InstanceId">
            <summary>
            Gets the identifier of event's initiator instance.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Events.OnProgress.Progress">
            <summary>
            Gets the progress value.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Events.OnProgress.StatusText">
            <summary>
            Gets the status text.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Events.OnProgress.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Core.Events.OnProgress"/> class.
            </summary>
            <param name="instanceId">The instance identifier.</param>
            <param name="progress">The progress.</param>
            <param name="statusText">The status text.</param>
        </member>
        <member name="M:TotalApi.Core.Events.OnProgress.Post(System.String,System.Int32,System.String)">
            <summary>
            Publishes the event.
            </summary>
            <param name="instanceId">The instance identifier.</param>
            <param name="progress">The progress.</param>
            <param name="statusText">The status text.</param>
        </member>
        <member name="T:TotalApi.Core.Events.OnSubSytemRegistered">
            <summary>
            Event, fires by billing subsystem to all subscribers, indicating about new subsystem registration.
            </summary>
        </member>
        <member name="P:TotalApi.Core.Events.OnSubSytemRegistered.SSID">
            <summary>
            Gets or sets the subsystem identifier.
            </summary>
        </member>
        <member name="M:TotalApi.Core.Events.OnSubSytemRegistered.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Core.Events.OnSubSytemRegistered"/> class.
            </summary>
            <param name="ssid">The ssid.</param>
        </member>
        <member name="M:TotalApi.Core.Events.OnSubSytemRegistered.Post(System.String)">
            <summary>
            Publishes the event.
            </summary>
            <param name="ssid">The ssid.</param>
        </member>
        <member name="T:TotalApi.Core.SimpleJsonContractResolver">
            <summary>
            Json contract resolver.
            </summary>
        </member>
        <member name="F:TotalApi.Core.SimpleJsonContractResolver.DefaultSettings">
            <summary>
            Обеспечивает упрощённую сериализацию - все значения по умолчанию не сериализуются. 
            Внутренний идентификатор объекта $id не записывается.
            </summary>
        </member>
        <member name="M:TotalApi.Core.SimpleJsonContractResolver.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Core.SimpleJsonContractResolver"/> class.
            </summary>
            <param name="ignoredProperties">The ignored properties.</param>
        </member>
        <member name="M:TotalApi.Core.SimpleJsonContractResolver.CreateProperty(System.Reflection.MemberInfo,Newtonsoft.Json.MemberSerialization)">
            <summary>
            Creates the property.
            </summary>
            <param name="member">The member.</param>
            <param name="memberSerialization">The member serialization.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.SimpleJsonContractResolver.ResolveContract(System.Type)">
            <summary>
            Resolves the contract.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:TotalApi.Core.DbInfo">
            <summary>
            Database version table.
            </summary>
        </member>
        <member name="F:TotalApi.Core.DbInfo.MaxLength">
            <summary>
            Максимальная длина текстового поля в БД
            </summary>
        </member>
        <member name="F:TotalApi.Core.DbInfo.DbVersionParam">
            <summary>
            The database version parameter name.
            </summary>
        </member>
        <member name="P:TotalApi.Core.DbInfo.Name">
            <summary>
            The Name column. Value will be <see cref="F:TotalApi.Core.DbInfo.DbVersionParam"/>.
            </summary>
        </member>
        <member name="P:TotalApi.Core.DbInfo.Value">
            <summary>
            Version of the database.
            </summary>
        </member>
        <member name="T:TotalApi.Core.DbUntypedDataContext">
            <summary>
            Data context class for untyped database.
            </summary>
        </member>
        <member name="M:TotalApi.Core.DbUntypedDataContext.#ctor(TotalApi.Core.IDbDataContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Core.DbUntypedDataContext"/> class.
            </summary>
            <param name="dbContext">The database context.</param>
        </member>
        <member name="M:TotalApi.Core.DbUntypedDataContext.DbSet(System.Type)">
            <summary>
            Returns <c>IQueryable</c> by extracting "DbSet" property.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.DbUntypedDataContext.Find(System.Type,System.String)">
            <summary>
            Finds the specified entity by type and identifier.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.DbUntypedDataContext.Delete(System.Type,System.String)">
            <summary>
            Deletes the specified entity by type and identifier.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="T:TotalApi.Core.EntityMetadata">
            <summary>
            Entity metadata class.
            </summary>
        </member>
        <member name="T:TotalApi.Core.EntityMetadata.PropertyMetadata">
            <summary>
            Entity property metadata.
            </summary>
        </member>
        <member name="P:TotalApi.Core.EntityMetadata.PropertyMetadata.PropertyInfo">
            <summary>
            Gets the property information.
            </summary>
        </member>
        <member name="P:TotalApi.Core.EntityMetadata.PropertyMetadata.PropertyName">
            <summary>
            Gets the name of the property.
            </summary>
            <value>
            The name of the property.
            </value>
        </member>
        <member name="P:TotalApi.Core.EntityMetadata.PropertyMetadata.ColumnName">
            <summary>
            Gets the name of the column.
            </summary>
            <value>
            The name of the column.
            </value>
        </member>
        <member name="P:TotalApi.Core.EntityMetadata.PropertyMetadata.IndexName">
            <summary>
            Gets the name of the index.
            </summary>
            <value>
            The name of the index.
            </value>
        </member>
        <member name="P:TotalApi.Core.EntityMetadata.PropertyMetadata.PropertyType">
            <summary>
            Gets the type of the property.
            </summary>
            <value>
            The type of the property.
            </value>
        </member>
        <member name="P:TotalApi.Core.EntityMetadata.PropertyMetadata.IsKey">
            <summary>
            Gets a value indicating whether this property is the entities key.
            </summary>
        </member>
        <member name="M:TotalApi.Core.EntityMetadata.PropertyMetadata.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Core.EntityMetadata.PropertyMetadata"/> class.
            </summary>
            <param name="propertyInfo">The property information.</param>
        </member>
        <member name="M:TotalApi.Core.EntityMetadata.PropertyMetadata.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of a property.
            </summary>
            <param name="entity">The entity.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:TotalApi.Core.EntityMetadata.PropertyMetadata.GetValue(System.Object)">
            <summary>
            Gets the value of a property.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="P:TotalApi.Core.EntityMetadata.PropertyMetadata.Item(System.Object)">
            <summary>
            Gets or sets the value of a property using the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="P:TotalApi.Core.EntityMetadata.ExtraEntitySettings">
            <summary>
            Gets the extra entity settings.
            </summary>
            <value>
            The extra entity settings.
            </value>
        </member>
        <member name="M:TotalApi.Core.EntityMetadata.Create``1">
            <summary>
            Creates <see cref="T:TotalApi.Core.EntityMetadata"/>.
            </summary>
            <typeparam name="TEntityObject">The type of the entity object.</typeparam>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.EntityMetadata.Create(System.Type)">
            <summary>
            Creates <see cref="T:TotalApi.Core.EntityMetadata"/> using the specified entity type.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.EntityMetadata.Create``1(System.Func{``0},System.Type)">
            <summary>
            Creates <see cref="T:TotalApi.Core.EntityMetadata"/>.
            </summary>
            <typeparam name="TEntityMetadata">The type of the entity metadata.</typeparam>
            <param name="factory">The factory of <see cref="T:TotalApi.Core.EntityMetadata"/>.</param>
            <param name="entityType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="P:TotalApi.Core.EntityMetadata.EntityType">
            <summary>
            Gets the type of the entity.
            </summary>
            <value>
            The type of the entity.
            </value>
        </member>
        <member name="P:TotalApi.Core.EntityMetadata.TableName">
            <summary>
            Gets or sets the name of the table.
            </summary>
            <value>
            The name of the table.
            </value>
        </member>
        <member name="P:TotalApi.Core.EntityMetadata.TableNameTemplate">
            <summary>
            Gets or sets the table name template.
            </summary>
            <value>
            The table name template.
            </value>
        </member>
        <member name="P:TotalApi.Core.EntityMetadata.KeyColumn">
            <summary>
            Gets or sets the key column.
            </summary>
            <value>
            The key column.
            </value>
        </member>
        <member name="M:TotalApi.Core.EntityMetadata.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Core.EntityMetadata"/> class.
            </summary>
            <param name="entityType">Type of the entity.</param>
        </member>
        <member name="P:TotalApi.Core.EntityMetadata.Item(System.String)">
            <summary>
            Gets the <see cref="T:TotalApi.Core.EntityMetadata.PropertyMetadata"/> with the specified property name.
            </summary>
            <value>
            The <see cref="T:TotalApi.Core.EntityMetadata.PropertyMetadata"/>.
            </value>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.EntityMetadata.GetKeyValue(TotalApi.Core.IEntityObject)">
            <summary>
            Gets the key value.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.EntityMetadata.SetKeyValue(TotalApi.Core.IEntityObject,System.Object)">
            <summary>
            Sets the key value.
            </summary>
            <param name="entity">The entity.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:TotalApi.Core.EntityQueryParser">
            <summary>
            Entuty query parser.
            </summary>
        </member>
        <member name="T:TotalApi.Core.EntityQueryParser.Flag">
            <summary>
            Selection flags.
            </summary>
        </member>
        <member name="F:TotalApi.Core.EntityQueryParser.Flag.None">
            <summary>
            No flags are set.
            </summary>
        </member>
        <member name="F:TotalApi.Core.EntityQueryParser.Flag.IsEmpty">
            <summary>
            The empty result.
            </summary>
        </member>
        <member name="F:TotalApi.Core.EntityQueryParser.Flag.Default">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="F:TotalApi.Core.EntityQueryParser.Flag.CanBeEmpty">
            <summary>
            Result can be empty.
            </summary>
        </member>
        <member name="F:TotalApi.Core.EntityQueryParser.Flag.Single">
            <summary>
            Single result.
            </summary>
        </member>
        <member name="F:TotalApi.Core.EntityQueryParser.Flag.SingleOrDefault">
            <summary>
            Single or default result.
            </summary>
        </member>
        <member name="F:TotalApi.Core.EntityQueryParser.Flag.First">
            <summary>
            First result.
            </summary>
        </member>
        <member name="F:TotalApi.Core.EntityQueryParser.Flag.FirstOrDefault">
            <summary>
            First or default result.
            </summary>
        </member>
        <member name="T:TotalApi.Core.EntityQueryParser`1">
            <summary>
            Typed entity query parser.
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
        </member>
        <member name="T:TotalApi.Core.EntityQueryParser`1.WhereExpressionInfo">
            <summary>
            Where expression.
            </summary>
        </member>
        <member name="P:TotalApi.Core.EntityQueryParser`1.WhereExpressionInfo.LambdaParameter">
            <summary>
            Gets or sets the lambda parameter.
            </summary>
            <value>
            The lambda parameter.
            </value>
        </member>
        <member name="P:TotalApi.Core.EntityQueryParser`1.WhereExpressionInfo.Expression">
            <summary>
            Gets or sets the expression.
            </summary>
            <value>
            The expression.
            </value>
        </member>
        <member name="M:TotalApi.Core.EntityQueryParser`1.WhereExpressionInfo.#ctor(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Core.EntityQueryParser`1.WhereExpressionInfo"/> class.
            </summary>
            <param name="lambdaParameter">The lambda parameter.</param>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:TotalApi.Core.EntityQueryParser`1.WhereExpressionInfo.Execute(System.Object)">
            <summary>
            Executes expresion on the specified source.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.EntityQueryParser`1.WhereExpressionInfo.Create(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Collections.Generic.IList{TotalApi.Core.EntityQueryParser{`0}.WhereExpressionInfo})">
            <summary>
            Creates the <see cref="T:TotalApi.Core.EntityQueryParser`1.WhereExpressionInfo"/>.
            </summary>
            <param name="lambdaParameter">The lambda parameter.</param>
            <param name="expression">The expression.</param>
            <param name="list">The list of <see cref="T:TotalApi.Core.EntityQueryParser`1.WhereExpressionInfo"/>.</param>
            <returns></returns>
        </member>
        <member name="T:TotalApi.Core.EntityQueryParser`1.ConstantPredicateExpressionInfo">
            <summary>
            Constant predicate expression.
            </summary>
        </member>
        <member name="P:TotalApi.Core.EntityQueryParser`1.ConstantPredicateExpressionInfo.Member">
            <summary>
            Gets the <see cref="T:System.Linq.Expressions.MemberExpression"/>.
            </summary>
            <value>
            The member.
            </value>
        </member>
        <member name="P:TotalApi.Core.EntityQueryParser`1.ConstantPredicateExpressionInfo.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:TotalApi.Core.EntityQueryParser`1.ConstantPredicateExpressionInfo.PropertyInfo">
            <summary>
            Gets the property information.
            </summary>
            <value>
            The property information.
            </value>
        </member>
        <member name="P:TotalApi.Core.EntityQueryParser`1.ConstantPredicateExpressionInfo.PropertyType">
            <summary>
            Gets the type of the property.
            </summary>
            <value>
            The type of the property.
            </value>
        </member>
        <member name="P:TotalApi.Core.EntityQueryParser`1.ConstantPredicateExpressionInfo.ExprType">
            <summary>
            Gets the expression type.
            </summary>
        </member>
        <member name="T:TotalApi.Core.EntityQueryParser`1.RangeConstantPredicateExpressionInfo">
            <summary>
            Range constant predicate expression.
            </summary>
        </member>
        <member name="P:TotalApi.Core.EntityQueryParser`1.RangeConstantPredicateExpressionInfo.MinValue">
            <summary>
            Gets the minimum value.
            </summary>
            <value>
            The minimum value.
            </value>
        </member>
        <member name="P:TotalApi.Core.EntityQueryParser`1.RangeConstantPredicateExpressionInfo.MaxValue">
            <summary>
            Gets the maximum value.
            </summary>
            <value>
            The maximum value.
            </value>
        </member>
        <member name="M:TotalApi.Core.EntityQueryParser`1.RangeConstantPredicateExpressionInfo.#ctor(System.Linq.Expressions.MemberExpression,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Core.EntityQueryParser`1.RangeConstantPredicateExpressionInfo"/> class.
            </summary>
            <param name="member">The member expression.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
        </member>
        <member name="M:TotalApi.Core.EntityQueryParser`1.RangeConstantPredicateExpressionInfo.CreateExpression">
            <summary>
            Creates the expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.EntityQueryParser`1.Optimize(System.Collections.Generic.IList{TotalApi.Core.EntityQueryParser{`0}.WhereExpressionInfo})">
            <summary>
            Optimizes the specified <see cref="T:TotalApi.Core.EntityQueryParser`1.WhereExpressionInfo"/> list.
            </summary>
            <param name="list">The expressions list.</param>
        </member>
        <member name="P:TotalApi.Core.EntityQueryParser`1.Context">
            <summary>
            Gets the context.
            </summary>
            <value>
            The context.
            </value>
        </member>
        <member name="P:TotalApi.Core.EntityQueryParser`1.ColumnsMetadata">
            <summary>
            Gets the columns metadata.
            </summary>
            <value>
            The columns metadata.
            </value>
        </member>
        <member name="P:TotalApi.Core.EntityQueryParser`1.EntityType">
            <summary>
            Gets the type of the entity.
            </summary>
            <value>
            The type of the entity.
            </value>
        </member>
        <member name="F:TotalApi.Core.EntityQueryParser`1.WhereClauses">
            <summary>
            The where clauses.
            </summary>
        </member>
        <member name="F:TotalApi.Core.EntityQueryParser`1.OrderByFieldNames">
            <summary>
            The order by field names.
            </summary>
        </member>
        <member name="P:TotalApi.Core.EntityQueryParser`1.TakeCount">
            <summary>
            Gets the take count.
            </summary>
            <value>
            The take count.
            </value>
        </member>
        <member name="P:TotalApi.Core.EntityQueryParser`1.SkipCount">
            <summary>
            Gets the skip count.
            </summary>
            <value>
            The skip count.
            </value>
        </member>
        <member name="P:TotalApi.Core.EntityQueryParser`1.Flags">
            <summary>
            Gets the flags.
            </summary>
            <value>
            The flags.
            </value>
        </member>
        <member name="P:TotalApi.Core.EntityQueryParser`1.KeyValue">
            <summary>
            Gets or sets the key value.
            </summary>
            <value>
            The key value.
            </value>
        </member>
        <member name="M:TotalApi.Core.EntityQueryParser`1.#ctor(`0,System.Type,System.Linq.Expressions.Expression,TotalApi.Core.EntityMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Core.EntityQueryParser`1"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="entityType">Type of the entity.</param>
            <param name="expression">The expression.</param>
            <param name="columnsMetadata">The columns metadata.</param>
        </member>
        <member name="M:TotalApi.Core.EntityQueryParser`1.Prepare">
            <summary>
            Prepares this instance.
            </summary>
        </member>
        <member name="M:TotalApi.Core.EntityQueryParser`1.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visits the method call.
            </summary>
            <param name="node">The node.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">{0}: Not supported chain method call..Fmt(node.Method.Name)</exception>
        </member>
        <member name="M:TotalApi.Core.EntityQueryParser`1.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
            Visits the member.
            </summary>
            <param name="node">The node.</param>
            <returns></returns>
        </member>
        <member name="T:TotalApi.Core.EntityObject`1">
            <summary>
            Base class for any business-object of the overall system.
            </summary>
            <typeparam name="TEntityObject"></typeparam>
        </member>
        <member name="M:TotalApi.Core.EntityObject`1.Set``1(``0,System.String)">
            <summary>
            Sets the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="T:TotalApi.Core.TotalApiEntityObjectId`1">
            <summary>
            Base class for any business-object of the overall system, using string field Id as the object identifier.
            </summary>
        </member>
        <member name="P:TotalApi.Core.TotalApiEntityObjectId`1.ApiKey">
            <summary>
            Unique and secret api key.
            </summary>
        </member>
        <member name="P:TotalApi.Core.TotalApiEntityObjectId`1.UserId">
            <summary>
            User identifier.
            </summary>
        </member>
        <member name="P:TotalApi.Core.TotalApiEntityObjectId`1.Id">
            <summary>
            Internal database identifier.
            </summary>
        </member>
        <member name="T:TotalApi.Core.ExtraEntitySettingsAttribute">
            <summary>
            Additional parameters of business object.
            </summary>
        </member>
        <member name="P:TotalApi.Core.ExtraEntitySettingsAttribute.UpdateExistingRecord">
            <summary>
            Whether to update existing record, otherwise - exception will be thrown.
            </summary>
        </member>
        <member name="P:TotalApi.Core.ExtraEntitySettingsAttribute.SkipDataChangedNotification">
            <summary>
            Not to generate OnDataChanged event on saving/deleting the object.
            </summary>
        </member>
        <member name="P:TotalApi.Core.ExtraEntitySettingsAttribute.KeyProperty">
            <summary>
            Имя свойства, ассоциированного с ключевым полем. 
            Если не задано - будет считаться поле, помеченное атрибутом [Key], а если такого нет - поле с именем Id.
            
            The name of the property associated with the key field.
            If not set - field marked by [Key] attribute would be used, if such attributed field is not exists - Id field would be used.
            </summary>
        </member>
        <member name="P:TotalApi.Core.ExtraEntitySettingsAttribute.IndexedProperties">
            <summary>
            Properties list, delimited by semicolon, additionally declares that associated fields that should be indexed.
            </summary>
        </member>
        <member name="T:TotalApi.Core.IAsyncDbDataContext">
            <summary>
            Asynchronous database data context interface. 
            </summary>
        </member>
        <member name="M:TotalApi.Core.IAsyncDbDataContext.DeleteAsync(TotalApi.Core.IEntityObject)">
            <summary>
            Deletes the entity asynchronously.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.IAsyncDbDataContext.SaveChangesAsync">
            <summary>
            Saves the changes asynchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.IAsyncDbDataContext.FindAsync``1(System.String)">
            <summary>
            Finds the entity asynchronously.
            </summary>
            <typeparam name="TEntityObjectId">The type of the entity object.</typeparam>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.IAsyncDbDataContext.DeleteAndSaveAsync``1(System.String)">
            <summary>
            Deletes the entity asynchronously.
            </summary>
            <typeparam name="TEntityObjectId">The type of the entity object.</typeparam>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.IAsyncDbDataContext.SaveAsync(TotalApi.Core.IEntityObject,System.Boolean)">
            <summary>
            Saves the entity asynchronously.
            </summary>
            <param name="entity">The entity.</param>
            <param name="isNew">Identifies if the entity is new.</param>
            <returns></returns>
        </member>
        <member name="T:TotalApi.Core.ICoordinatePoints">
            <summary>
            Interface representing coordinate point
            </summary>
        </member>
        <member name="P:TotalApi.Core.ICoordinatePoints.UserData">
            <summary>
            Custom user data. Do not transfered over the network.
            </summary>
        </member>
        <member name="P:TotalApi.Core.ICoordinatePoints.Points">
            <summary>
            The list of coordinate points.
            </summary>
        </member>
        <member name="T:TotalApi.Core.IDbContext">
            <summary>
            Database context interface.
            </summary>
        </member>
        <member name="P:TotalApi.Core.IDbContext.Self">
            <summary>
            Returns reference to the object, that actually implements this interface.
            Used for retrieving the actual reference from the proxy class.
            </summary>
        </member>
        <member name="T:TotalApi.Core.IDbDataContext">
            <summary>
            Database data context interface.
            </summary>
        </member>
        <member name="P:TotalApi.Core.IDbDataContext.LazyLoadingEnabled">
            <summary>
            Gets or sets a value indicating whether lazy loading is enabled.
            </summary>
            <value>
              <c>true</c> if lazy loading enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:TotalApi.Core.IDbDataContext.DbSet``1">
            <summary>
            Databases set.
            </summary>
            <typeparam name="TEntityObject">The type of the entity object.</typeparam>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.IDbDataContext.Attach(TotalApi.Core.IEntityObject,System.Boolean)">
            <summary>
            Attaches the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="isNew">Identifies if the object is new.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.IDbDataContext.Save(TotalApi.Core.IEntityObject,System.Boolean)">
            <summary>
            Saves the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="isNew">Identifies if the object is new.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.IDbDataContext.Delete(TotalApi.Core.IEntityObject)">
            <summary>
            Deletes the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.IDbDataContext.SaveChanges">
            <summary>
            Saves the changes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.IDbDataContext.Find``1(System.String)">
            <summary>
            Finds the entity by specified identifier.
            </summary>
            <typeparam name="TEntityObjectId">The type of the entity object.</typeparam>
            <param name="id">Entity identifier.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.IDbDataContext.Delete``1(System.String)">
            <summary>
            Deletes the entity by specified identifier.
            </summary>
            <typeparam name="TEntityObjectId">The type of the entity object.</typeparam>
            <param name="id">Entity identifier.</param>
            <returns></returns>
        </member>
        <member name="T:TotalApi.Core.IDbDataContextAsync">
            <summary>
            Database data context interface for asynchronous operations.
            </summary>
        </member>
        <member name="M:TotalApi.Core.IDbDataContextAsync.AttachAsync(TotalApi.Core.IEntityObject,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Attaches the entity asynchronously.
            </summary>
            <param name="entity">The entity.</param>
            <param name="isNew">Identifies if the object is new.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.IDbDataContextAsync.SaveAsync(TotalApi.Core.IEntityObject,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Saves the entity asynchronously.
            </summary>
            <param name="entity">The entity.</param>
            <param name="isNew">Identifies if the object is new.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.IDbDataContextAsync.DeleteAsync(TotalApi.Core.IEntityObject,System.Threading.CancellationToken)">
            <summary>
            Deletes the entity asynchronously.
            </summary>
            <param name="entity">The entity.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.IDbDataContextAsync.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            Saves the changes asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.IDbDataContextAsync.FindAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Finds the entity asynchronously.
            </summary>
            <typeparam name="TEntityObjectId">The type of the entity object.</typeparam>
            <param name="id">The identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.IDbDataContextAsync.DeleteAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the entity asynchronously.
            </summary>
            <typeparam name="TEntityObjectId">The type of the entity object.</typeparam>
            <param name="id">The identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="T:TotalApi.Core.IDbUntypedDataContext">
            <summary>
            Data context interface for untyped data.
            </summary>
        </member>
        <member name="M:TotalApi.Core.IDbUntypedDataContext.DbSet(System.Type)">
            <summary>
            Databases set.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.IDbUntypedDataContext.Find(System.Type,System.String)">
            <summary>
            Finds the specified entity.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.IDbUntypedDataContext.Delete(System.Type,System.String)">
            <summary>
            Deletes the specified entity.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="T:TotalApi.Core.IEntityObject">
            <summary>
            Any class, that describes the database entity, must implement this interface.
            </summary>
        </member>
        <member name="T:TotalApi.Core.IEntityObjectId`1">
            <summary>
            Any class, that describes the database entity and uses Id property as the primary key, must implement this interface.
            </summary>
        </member>
        <member name="P:TotalApi.Core.IEntityObjectId`1.Id">
            <summary>
            Internal of the object.
            </summary>
        </member>
        <member name="T:TotalApi.Core.IEntityObjectId">
             <summary>
            Any class, that describes the database entity and uses Id property as the primary key, must implement this interface.
             </summary>
        </member>
        <member name="T:TotalApi.Core.ITotalApiEntityObject">
            <summary>
            Any class, that describes the database entity and have ApiKey and UserId fields, must implement this interface.
            </summary>
        </member>
        <member name="P:TotalApi.Core.ITotalApiEntityObject.ApiKey">
            <summary>
            Unique and secret api key. 
            Mandatory property and used for result filtering.
            </summary>
        </member>
        <member name="P:TotalApi.Core.ITotalApiEntityObject.UserId">
            <summary>
            Could be <c>null</c> if object was created without UserKey authorization, otherwise identifier of API user that created the object.
            Used for result filtering.
            </summary>
        </member>
        <member name="T:TotalApi.Core.ITotalApiEntityObjectId">
            <summary>
            Any class that describes database entity, has fields ApiKey, UserId and Id as primary key, should implement this interface.
            </summary>
        </member>
        <member name="T:TotalApi.Core.ProxyDbDataContext">
            <summary>
            Proxy data context.
            </summary>
        </member>
        <member name="P:TotalApi.Core.ProxyDbDataContext.Db">
            <summary>
            Gets the database context.
            </summary>
            <value>
            The database.
            </value>
        </member>
        <member name="M:TotalApi.Core.ProxyDbDataContext.#ctor(TotalApi.Core.IDbDataContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Core.ProxyDbDataContext"/> class.
            </summary>
            <param name="dbContext">The database context.</param>
            <exception cref="T:System.ArgumentNullException">dbContext</exception>
        </member>
        <member name="M:TotalApi.Core.ProxyDbDataContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:TotalApi.Core.ProxyDbDataContext.Self">
            <summary>
            Returns reference to the object, that actually implements this interface.
            Used for retrieving the actual reference from the proxy class.
            </summary>
        </member>
        <member name="P:TotalApi.Core.ProxyDbDataContext.LazyLoadingEnabled">
            <summary>
            Gets or sets a value indicating whether lazy loading is enabled.
            </summary>
            <value>
              <c>true</c> if lazy loading enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:TotalApi.Core.ProxyDbDataContext.DbSet``1">
            <summary>
            Databases set.
            </summary>
            <typeparam name="TEntityObject">The type of the entity object.</typeparam>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.ProxyDbDataContext.Attach(TotalApi.Core.IEntityObject,System.Boolean)">
            <summary>
            Attaches the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="isNew">Identifies if the object is new.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.ProxyDbDataContext.Save(TotalApi.Core.IEntityObject,System.Boolean)">
            <summary>
            Saves the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="isNew">Identifies if the object is new.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.ProxyDbDataContext.Delete(TotalApi.Core.IEntityObject)">
            <summary>
            Deletes the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.ProxyDbDataContext.SaveChanges">
            <summary>
            Saves the changes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.ProxyDbDataContext.Find``1(System.String)">
            <summary>
            Finds the entity by specified identifier.
            </summary>
            <typeparam name="TEntityObjectId">The type of the entity object.</typeparam>
            <param name="id">Entity identifier.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.ProxyDbDataContext.Delete``1(System.String)">
            <summary>
            Deletes the entity by specified identifier.
            </summary>
            <typeparam name="TEntityObjectId">The type of the entity object.</typeparam>
            <param name="id">Entity identifier.</param>
            <returns></returns>
        </member>
        <member name="T:TotalApi.Core.Debug.DebugConsoleKeyHandler">
            <summary>
            Handler for keyboard keys.
            </summary>
        </member>
        <member name="T:TotalApi.Core.Debug.OnPingHandler">
            <summary>
            Used only for debuging purposes.
            </summary>
        </member>
        <member name="T:TotalApi.Core.Debug.SuperHack">
            <summary>
            Super hack for debugging
            </summary>
        </member>
        <member name="P:TotalApi.Core.Debug.SuperHack.DontSaveCoordinatesAndSensorData">
            <summary>
            Gets or sets a value indicating whether don't save coordinates and sensor data to database.
            </summary>
            <value>
              <c>true</c> if dont save coordinates; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:TotalApi.Core.ServiceContracts.ApiServiceProxy`1">
            <summary>
            Api service proxy class.
            </summary>
            <typeparam name="TServiceContract">The type of the service contract.</typeparam>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.ApiServiceProxy`1.Create">
            <summary>
            Creates the channel to remote service
            </summary>
            <returns></returns>
        </member>
        <member name="T:TotalApi.Core.ServiceContracts.RepositoryApiServiceProxy`2">
            <summary>
            Repository api service proxy class.
            </summary>
            <typeparam name="TServiceContract">The type of the service contract.</typeparam>
            <typeparam name="TEntityObjectId">The type of the entity object identifier.</typeparam>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.RepositoryApiServiceProxy`2.All">
            <summary>
            Returns all objects.
            </summary>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.RepositoryApiServiceProxy`2.Find(System.String)">
            <summary>
            Finds the object by specified identifier.
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.RepositoryApiServiceProxy`2.Create(`1)">
            <summary>
            Creates the object.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.RepositoryApiServiceProxy`2.Update(`1)">
            <summary>
            Updates the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.RepositoryApiServiceProxy`2.Delete(System.String)">
            <summary>
            Deletes the object by specified identifier.
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="T:TotalApi.Core.ServiceContracts.RepositoryServiceProxy`2">
            <summary>
            Repository service proxy class.
            </summary>
            <typeparam name="TServiceContract">The type of the service contract.</typeparam>
            <typeparam name="TEntityObject">The type of the entity object.</typeparam>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.RepositoryServiceProxy`2.ExecuteQuery(System.Func{System.Linq.IQueryable{`1},System.Linq.IQueryable{`1}})">
            <summary>
            Executes the query using a query function.
            Keep in mind that the data would be selected without LazyLoading mode,
            because lazy loading after result retrieving is impossible, and the data could not be requested from distributed subsystem.
            Use <see cref="M:TotalApi.Utils.Expressions.QueryableEx.Include``1(System.Linq.IQueryable{``0},System.String)" /> for specifying which referenced properties should be retrieved by query.
            </summary>
            <param name="query">Query function.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.RepositoryServiceProxy`2.ExecuteScalar(System.Func{System.Linq.IQueryable{`1},`1})">
            <summary>
            Executes the query, returning only single object using a query function.
            If a function not specified - FirstOrDefault() uses.
            Keep in mind that the data would be selected without LazyLoading mode,
            because lazy loading after result retrieving is impossible, and the data could not be requested from distributed subsystem.
            Use <see cref="M:TotalApi.Utils.Expressions.QueryableEx.Include``1(System.Linq.IQueryable{``0},System.String)" /> for specifying which referenced properties should be retrieved by query.
            </summary>
            <param name="query">Query function.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.RepositoryServiceProxy`2.Save(`1,System.Boolean)">
            <summary>
            Saves the object.
            </summary>
            <param name="entity">Object to be saved.</param>
            <param name="isNew">Indicates if the object is new.</param>
            <returns></returns>
        </member>
        <member name="T:TotalApi.Core.ServiceContracts.RepositoryIdServiceProxy`2">
            <summary>
            RepositoryId service proxy.
            </summary>
            <typeparam name="TServiceContract">The type of the service contract.</typeparam>
            <typeparam name="TEntityObjectId">The type of the entity object identifier.</typeparam>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.RepositoryIdServiceProxy`2.Find(System.String)">
            <summary>
            Searches for an object by its identifier.
            </summary>
            <param name="id">Object identifier.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.RepositoryIdServiceProxy`2.Delete(System.String)">
            <summary>
            Deletes the object by its identifier.
            </summary>
            <param name="id">Deletes object by its identifier.</param>
            <returns></returns>
        </member>
        <member name="T:TotalApi.Core.ServiceContracts.OperationContextHelper">
            <summary>
            Operation context helper.
            </summary>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.OperationContextHelper.GetRemoteAddress">
            <summary>
            Gets the remote address.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TotalApi.Core.ServiceContracts.AsyncTasks.IAsyncTaskService">
            <summary>
            Represents a service for AsyncTaskManager. 
            </summary>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.AsyncTasks.IAsyncTaskService.All">
            <summary>
            Retrieves array of all currently processing of finished tasks.
            </summary>
            <returns>Array of <see cref="T:TotalApi.Core.Api.AsyncTaskResult"/></returns>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.AsyncTasks.IAsyncTaskService.GetResult(System.String)">
            <summary>
            Retrieves task result.
            </summary>
            <param name="taskId">Task identifier.</param>
            <returns><see cref="T:TotalApi.Core.Api.AsyncTaskResult"/></returns>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.AsyncTasks.IAsyncTaskService.Start(TotalApi.Utils.AnyObjectContract)">
            <summary>
            Starts task.
            Task handler of specified type should be registered in the system that handles this api, 
            otherwise exception would be thrown about missing task type.
            </summary>
            <param name="taskParams">Task parameters (also setting up the task type).</param>
            <returns>Identifier of the task processing process.</returns>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.AsyncTasks.IAsyncTaskService.Cancel(System.String)">
            <summary>
            Canceles task execution.
            </summary>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.AsyncTasks.IAsyncTaskService.GetSettings">
            <summary>
            Retrieves default parameters for tasks execution.
            </summary>
            <returns><see cref="T:TotalApi.Core.AsyncTasks.AsyncTaskSettings"/></returns>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.AsyncTasks.IAsyncTaskService.SetSettings(TotalApi.Core.AsyncTasks.AsyncTaskSettings)">
            <summary>
            Sets default parameters for the tasks execution.
            </summary>
        </member>
        <member name="T:TotalApi.Core.ServiceContracts.Billing.IApiUsersService">
            <summary>
            Manages api users.
            </summary>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.Billing.IApiUsersService.HashPassword(System.String)">
            <summary>
            Hashes password.
            </summary>
            <param name="password">Password to be hashed.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.Billing.IApiUsersService.ComparePasswords(System.String,System.String)">
            <summary>
            Comparing passwords.
            </summary>
            <param name="password1">First password.</param>
            <param name="password2">Second password.</param>
            <returns>True if passwords are equal, otherwise false.</returns>
        </member>
        <member name="T:TotalApi.Core.ServiceContracts.Billing.IApplicationsService">
            <summary>
            Manages api applications. 
            </summary>
        </member>
        <member name="T:TotalApi.Core.ServiceContracts.Billing.ISessionsService">
            <summary>
            Handles information about the sessions.
            </summary>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.Billing.ISessionsService.All">
            <summary>
            Retrieves all avaliable sessions.
            </summary>
            <returns>Sessions array of <see cref="T:TotalApi.Core.Billing.Session"/>.</returns>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.Billing.ISessionsService.GetSessionKey">
            <summary>
            Retrieves current <see cref="T:TotalApi.Core.Billing.SessionInfo"/>.
            </summary>
            <returns><see cref="T:TotalApi.Core.Billing.SessionInfo"/>.</returns>
        </member>
        <member name="T:TotalApi.Core.ServiceContracts.Billing.ISubSystemsService">
            <summary>
            Manages subsystems.
            </summary>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.Billing.ISubSystemsService.All">
            <summary>
            Retrieves all subsystems.
            </summary>
            <returns>Array of <see cref="T:TotalApi.Billing.SubSystem"/>.</returns>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.Billing.ISubSystemsService.Update(TotalApi.Billing.SubSystem)">
            <summary>
            Updates <see cref="T:TotalApi.Billing.SubSystem"/>.
            </summary>
            <param name="entity">Subsystem to update.</param>
            <returns>Updated <see cref="T:TotalApi.Billing.SubSystem"/>.</returns>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.Billing.ISubSystemsService.Delete(System.String)">
            <summary>
            Deletes <see cref="T:TotalApi.Billing.SubSystem"/> by subsystem identifier (ssid).
            </summary>
            <param name="ssid">Subsystem identifier (ssid).</param>
            <returns>True if delete succesfull otherwise false</returns>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.Billing.ISubSystemsService.Register(TotalApi.Billing.SubSystem)">
            <summary>
            Registeres <see cref="T:TotalApi.Billing.SubSystem"/>.
            </summary>
            <param name="subSystem">Subsystem to register.</param>
            <returns>Registered <see cref="T:TotalApi.Billing.SubSystem"/>.</returns>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.Billing.ISubSystemsService.GetCallerIp">
            <summary>
            Retrieves ip address from which subsystem are making requests to billing server.
            </summary>
            <returns>IP address</returns>
        </member>
        <member name="T:TotalApi.Core.ServiceContracts.ITotalApiSerializableObject">
            <summary>
            Interface indicating that class will be added to the list of known types (KnownTypes) of WCF services.
            For example, if the class is transfering as the parameter of the message - it should implement this interface. 
            </summary>
        </member>
        <member name="T:TotalApi.Core.ServiceContracts.TotalApiFaultErrorHandler">
            <summary>
            Fault error handler.
            </summary>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.TotalApiFaultErrorHandler.LogError(System.Exception)">
            <summary>
            Logs the error.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="T:TotalApi.Core.ServiceContracts.RepositoryApi.IBaseRepositoryService">
            <summary>
            Base repository service class.
            </summary>
        </member>
        <member name="T:TotalApi.Core.ServiceContracts.RepositoryApi.IBaseRepositoryService`1">
            <summary>
            Base repository service class.
            </summary>
            <typeparam name="TEntityObject">The type of the entity object.</typeparam>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.RepositoryApi.IBaseRepositoryService`1.Count">
            <summary>
            Retrieves the count of objects.
            ODATA parameters are supported.
            </summary>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.RepositoryApi.IBaseRepositoryService`1.All">
            <summary>
            Retrieves array of objects.
            ODATA parameters are supported.
            </summary>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.RepositoryApi.IBaseRepositoryService`1.Find(System.String)">
            <summary>
            Searches for object by identifier.
            </summary>
            <param name="id">Object identifier</param>
            <returns>Object if found or null otherwise.</returns>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.RepositoryApi.IBaseRepositoryService`1.Create(`0)">
            <summary>
            Creates object.
            </summary>
            <param name="entity">Object to be created.</param>
            <returns>Created Object.</returns>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.RepositoryApi.IBaseRepositoryService`1.Update(`0)">
            <summary>
            Updates object.
            </summary>
            <param name="entity">Object identifier.</param>
            <returns>Object to be updated.</returns>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.RepositoryApi.IBaseRepositoryService`1.Delete(System.String)">
            <summary>
            Deleted object
            </summary>
            <param name="id">Object identifier.</param>
            <returns>Array of Object</returns>
        </member>
        <member name="T:TotalApi.Core.ServiceContracts.RepositoryApi.IRepositoryApiService">
            <summary>
            Representing repository for objects.
            </summary>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.RepositoryApi.IRepositoryApiService.Count(System.String)">
            <summary>
            Returns count of the objects of the given type.
            </summary>
            <param name="typeId">Object type identifier.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.RepositoryApi.IRepositoryApiService.All(System.String)">
            <summary>
            Returns all objects of the given type.
            </summary>
            <param name="typeId">Object type identifier.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.RepositoryApi.IRepositoryApiService.Find(System.String,System.String)">
            <summary>
            Searches for object using type identifier and object identifier.
            </summary>
            <param name="typeId">Type identifier.</param>
            <param name="id">Object identifier.</param>
            <returns>Found object</returns>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.RepositoryApi.IRepositoryApiService.Create(System.String,System.Object)">
            <summary>
            Inserts object into repository.
            If no type found, the exception will be returned.
            </summary>
            <param name="typeId">Type identifier.</param>
            <param name="entity">Object to insert.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.RepositoryApi.IRepositoryApiService.Update(System.String,System.Object)">
            <summary>
            Updates object with given type.
            </summary>
            <param name="typeId">Object type identifier.</param>
            <param name="entity">Object to update.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.RepositoryApi.IRepositoryApiService.Delete(System.String,System.String)">
            <summary>
            Deletes object with given type from repository.
            </summary>
            <param name="typeId">Object type identifier.</param>
            <param name="id">Object identifier</param>
            <returns></returns>
        </member>
        <member name="T:TotalApi.Core.ServiceContracts.RepositoryApi.IRepositoryApiService`1">
            <summary>
            Repository service interface.
            </summary>
            <typeparam name="TEntityObjectId">The type of the entity object.</typeparam>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.RepositoryApi.IRepositoryApiService`1.All">
            <summary>
            Returns all objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.RepositoryApi.IRepositoryApiService`1.Find(System.String)">
            <summary>
            Finds the object by specified identifier.
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.RepositoryApi.IRepositoryApiService`1.Create(`0)">
            <summary>
            Creates the object.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.RepositoryApi.IRepositoryApiService`1.Update(`0)">
            <summary>
            Updates the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.RepositoryApi.IRepositoryApiService`1.Delete(System.String)">
            <summary>
            Deletes the object by specified identifier.
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="T:TotalApi.Core.ServiceContracts.Events.IEventManagerService">
            <summary>
            Represents a service for Event Manager. 
            </summary>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.Events.IEventManagerService.Get">
            <summary>
            Requests the events for the calling client accumulated from the last call the method.
            </summary>
            <returns>The list of the new events <see cref="T:TotalApi.Utils.EventObjectContract"/> or <c>null</c> if the client isn't subscribed to any events.</returns>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.Events.IEventManagerService.Subscribe(System.String)">
            <summary>
            Subscribe to the event of the specified name.
            </summary>
            <param name="eventName">The name of the subscribed event</param>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.Events.IEventManagerService.Unsubscribe(System.String)">
            <summary>
            Unsubscribe from the event of the specified name.
            </summary>
            <param name="eventName">The name of the unsubscribed event</param>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.Events.IEventManagerService.Post(TotalApi.Utils.EventObjectContract)">
            <summary>
            Posts the event to the Event Manager.
            </summary>
            <param name="eventObject">The instance of the posted event object <see cref="T:TotalApi.Utils.EventObjectContract"/>.</param>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.Events.IEventManagerService.PostEvent(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Alternative posts the event to the Event Manager.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="eventParams">The event parameters.</param>
        </member>
        <member name="T:TotalApi.Core.ServiceContracts.TotalApiChannelFactory`1">
            <summary>
            WCF channel factory.
            </summary>
            <typeparam name="TChannel">The type of the channel.</typeparam>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.TotalApiChannelFactory`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Core.ServiceContracts.TotalApiChannelFactory`1"/> class.
            </summary>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.TotalApiChannelFactory`1.#ctor(System.ServiceModel.EndpointAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Core.ServiceContracts.TotalApiChannelFactory`1"/> class.
            </summary>
            <param name="endpointAddress">The endpoint address.</param>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.TotalApiChannelFactory`1.#ctor(System.ServiceModel.Channels.Binding)">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Core.ServiceContracts.TotalApiChannelFactory`1"/> class.
            </summary>
            <param name="binding">The binding.</param>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.TotalApiChannelFactory`1.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Core.ServiceContracts.TotalApiChannelFactory`1"/> class.
            </summary>
            <param name="binding">The binding.</param>
            <param name="endpointAddress">The endpoint address.</param>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.TotalApiChannelFactory`1.CreateChannel(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
            <summary>
            Creates the channel.
            </summary>
            <param name="binding">The binding.</param>
            <param name="endpointAddress">The endpoint address.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.TotalApiChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress)">
            <summary>
            Creates the channel.
            </summary>
            <param name="endpointAddress">The endpoint address.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.TotalApiChannelFactory`1.CreateChannel(System.ServiceModel.Channels.Binding)">
            <summary>
            Creates the channel.
            </summary>
            <param name="binding">The binding.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.TotalApiChannelFactory`1.CreateChannel">
            <summary>
            Creates the channel.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TotalApi.Core.ServiceContracts.TotalApiServiceHost`1">
            <summary>
            Services hosting class.
            </summary>
            <typeparam name="TServiceContract">The type of the service contract.</typeparam>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.TotalApiServiceHost`1.Open``1(TotalApi.Utils.Wcf.ServiceHostEx.Configuration)">
            <summary>
            Opens the channel.
            </summary>
            <typeparam name="TOperationContract">The type of the operation contract.</typeparam>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.TotalApiServiceHost`1.#ctor(TotalApi.Utils.Wcf.ServiceHostEx.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Core.ServiceContracts.TotalApiServiceHost`1"/> class.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.TotalApiServiceHost`1.AddBinding``1(System.String)">
            <summary>
            Adds the binding.
            </summary>
            <typeparam name="TOperationContract">The type of the operation contract.</typeparam>
            <param name="uriScheme">The URI scheme.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.TotalApiServiceHost`1.AddBinding(System.Type,System.ServiceModel.Channels.Binding,System.String,System.Boolean)">
            <summary>
            Adds the binding.
            </summary>
            <param name="operationContract">The operation contract.</param>
            <param name="b">The b.</param>
            <param name="endpointUri">The endpoint URI.</param>
            <param name="throwException">if set to <c>true</c> [throw exception].</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.TotalApiServiceHost`1.AddWebApiBinding``1(System.String)">
            <summary>
            Adds the web API binding.
            </summary>
            <typeparam name="TOperationContract">The type of the operation contract.</typeparam>
            <param name="uriScheme">The URI scheme.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.TotalApiServiceHost`1.InitializeRuntime">
            <summary>
            Initializes the runtime.
            </summary>
        </member>
        <member name="T:TotalApi.Core.ServiceContracts.TotalApiServicesCertificate">
            <summary>
            WCF sertificate.
            </summary>
        </member>
        <member name="P:TotalApi.Core.ServiceContracts.TotalApiServicesCertificate.Instance">
            <summary>
            Gets the sertificate instance.
            </summary>
            <exception cref="T:System.Exception">Resource 'TotalApiServicesCertificate.pfx' with logon certificate is not found.</exception>
        </member>
        <member name="T:TotalApi.Core.ServiceContracts.KnownTypesProvider">
            <summary>
            Provider of known types.
            </summary>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.KnownTypesProvider.GetKnownTypes(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Gets the known types.
            </summary>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.KnownTypesProvider.Register(System.Type[])">
            <summary>
            Registers the specified types.
            </summary>
            <param name="types">The types.</param>
        </member>
        <member name="T:TotalApi.Core.ServiceContracts.TotalApiHeaderHandler">
            <summary>
            Handler for message headers.
            </summary>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.TotalApiHeaderHandler.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
            <summary>
            After receive request actions.
            </summary>
            <param name="request">The request.</param>
            <param name="channel">The channel.</param>
            <param name="instanceContext">The instance context.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.TotalApiHeaderHandler.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)">
            <summary>
            Actions before reply will be send.
            </summary>
            <param name="reply">The reply.</param>
            <param name="correlationState">State of the correlation.</param>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.TotalApiHeaderHandler.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
            <summary>
            Actions befores sending the request.
            </summary>
            <param name="request">The request.</param>
            <param name="channel">The channel.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.TotalApiHeaderHandler.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
            <summary>
            Actions afters receiving the reply.
            </summary>
            <param name="reply">The reply.</param>
            <param name="correlationState">State of the correlation.</param>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.TotalApiHeaderHandler.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            Adds the binding parameters.
            </summary>
            <param name="endpoint">The endpoint.</param>
            <param name="bindingParameters">The binding parameters.</param>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.TotalApiHeaderHandler.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
            <summary>
            Applies the client behavior.
            </summary>
            <param name="endpoint">The endpoint.</param>
            <param name="clientRuntime">The client runtime.</param>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.TotalApiHeaderHandler.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
            <summary>
            Applies the dispatch behavior.
            </summary>
            <param name="endpoint">The endpoint.</param>
            <param name="endpointDispatcher">The endpoint dispatcher.</param>
        </member>
        <member name="M:TotalApi.Core.ServiceContracts.TotalApiHeaderHandler.Validate(System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
            Validates the specified endpoint.
            </summary>
            <param name="endpoint">The endpoint.</param>
        </member>
        <member name="T:TotalApi.Core.TotalApiBootstrapper">
            <summary>
            Application bootstrapper.
            </summary>
        </member>
        <member name="F:TotalApi.Core.TotalApiBootstrapper.TotalApiModulesSearchPattern">
            <summary>
            The TotalApi modules search pattern
            </summary>
        </member>
        <member name="F:TotalApi.Core.TotalApiBootstrapper.AppModulesSearchPattern">
            <summary>
            The additionalapplication modules search pattern
            </summary>
        </member>
        <member name="P:TotalApi.Core.TotalApiBootstrapper.ModulesDirs">
            <summary>
            Gets the modules dirs.
            </summary>
            <value>
            The modules dirs.
            </value>
        </member>
        <member name="M:TotalApi.Core.TotalApiBootstrapper.Create``1(System.String)">
            <summary>
            Creates  MEF bootstrapper for system.
            </summary>
            <param name="modulesDirs">
            The list offolders, separated by semicolon, from which the modules will be loaded. By default the modules will be loaded from applications folder.
            </param>
        </member>
        <member name="M:TotalApi.Core.TotalApiBootstrapper.Create(System.String)">
            <summary>
            Creates  MEF bootstrapper for system.
            </summary>
            <param name="modulesDirs">
            The list offolders, separated by semicolon, from which the modules will be loaded. By default the modules will be loaded from applications folder.
            </param>
        </member>
        <member name="M:TotalApi.Core.TotalApiBootstrapper.Configure">
            <summary>
            Configures this bootstrapper.
            </summary>
        </member>
        <member name="P:TotalApi.Core.TotalApiBootstrapper.TotalApiAssemblies">
            <summary>
            Список всех сборок в которых описаны модули программного комплекса.
            </summary>
        </member>
        <member name="P:TotalApi.Core.TotalApiBootstrapper.ExportedTypes">
            <summary>
            Список всех классов модулей программного комплекса, помеченных атрибутом <see cref="T:System.ComponentModel.Composition.ExportAttribute"/>.
            </summary>
        </member>
        <member name="P:TotalApi.Core.TotalApiBootstrapper.ClassTypes">
            <summary>
            Список всех бизнес-объектов программного комплекса.
            </summary>
        </member>
        <member name="P:TotalApi.Core.TotalApiBootstrapper.ReportTypes">
            <summary>
            Список всех отчётов программного комплекса.
            </summary>
        </member>
        <member name="P:TotalApi.Core.TotalApiBootstrapper.EventObjectTypes">
            <summary>
            Список всех объектов-событий программного комплекса.
            Все объекты-события должны быть наследниками от EventObject и иметь единственный конструктор с параметрами,
            имена которых совпдают с именами свойств.
            </summary>
        </member>
        <member name="P:TotalApi.Core.TotalApiBootstrapper.DefaultLogger">
            <summary>
            Gets or sets the default logger.
            </summary>
            <value>
            The default logger.
            </value>
        </member>
        <member name="M:TotalApi.Core.TotalApiBootstrapper.OnInstanceNotFound(System.Type,System.String)">
            <summary>
            Called when instance not found.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="contractName">Name of the contract.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.TotalApiBootstrapper.OnGetService(System.Type,System.String)">
            <summary>
            Called when service retrieved.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.TotalApiBootstrapper.AfterConfigure">
            <summary>
            Actions after the bootstrapper configuring.
            </summary>
        </member>
        <member name="E:TotalApi.Core.TotalApiBootstrapper.AfterConfigureModules">
            <summary>
            Occurs after modules configuration finished.
            </summary>
        </member>
        <member name="M:TotalApi.Core.TotalApiBootstrapper.ConfigureModules">
            <summary>
            Additional modules configuration.
            </summary>
        </member>
        <member name="T:TotalApi.Core.TotalApiEndpoint">
            <summary>
            This class is needed for setting the addresses of module's WCF services.
            It is possible, for any module of the system to be hosted on a separate workstation and even have another endpoint,
            that is because we need the possibility to resolve the addresses of modules services based on their contracts.
            Method <see cref="M:TotalApi.Core.TotalApiEndpoint.Uri(System.String,System.Boolean,System.String)"/> searches in a configuration file setting for services endpoints and addresses of module's workstations for the given contract for the first time,
            and if such is not found, default value would be used, specified in a configuration file, and even if so is not found - takes default values,
            specified in static fields  <see cref="F:TotalApi.Core.TotalApiEndpoint.DefaultServiceHost"/> and <see cref="F:TotalApi.Core.TotalApiEndpoint.DefaultServiceEndpoint"/>.
            Parameter <see cref="F:TotalApi.Core.TotalApiEndpoint.DefaultServiceEndpoint"/> should (and must) contain string templates <c>{ServiceHost}</c> and <c>{ServiceContract}</c>, 
            which will be replaced by correspondent values.
            </summary>
        </member>
        <member name="F:TotalApi.Core.TotalApiEndpoint.DefaultServiceProtocol">
            <summary>
            Default service protocol.
            </summary>
        </member>
        <member name="P:TotalApi.Core.TotalApiEndpoint.DefaultServicePort">
            <summary>
            Default service port.
            </summary>
        </member>
        <member name="F:TotalApi.Core.TotalApiEndpoint.DefaultServiceHost">
            <summary>
            Default service host.
            </summary>
        </member>
        <member name="F:TotalApi.Core.TotalApiEndpoint.DefaultApplicationName">
            <summary>
            The default application name
            </summary>
        </member>
        <member name="F:TotalApi.Core.TotalApiEndpoint.DefaultApiVersion">
            <summary>
            The default API version
            </summary>
        </member>
        <member name="F:TotalApi.Core.TotalApiEndpoint.DefaultApiType">
            <summary>
            The default API type
            </summary>
        </member>
        <member name="F:TotalApi.Core.TotalApiEndpoint.DefaultWebApiType">
            <summary>
            The default web API type
            </summary>
        </member>
        <member name="F:TotalApi.Core.TotalApiEndpoint.DefaultServiceEndpoint">
            <summary>
            WCF service endpoint address.
            Cooresspondent string templates in a brackets would be replaced by values in the settings.
            </summary>
        </member>
        <member name="F:TotalApi.Core.TotalApiEndpoint.DefaultServerEndpoint">
            <summary>
            Default WCF service endpoint address.
            Cooresspondent string templates in a brackets would be replaced by values in the settings.
            </summary>
        </member>
        <member name="E:TotalApi.Core.TotalApiEndpoint.ConfigureServiceEndpoint">
            <summary>
            Event, that alloes manual configuring the service endpoint.
            </summary>
        </member>
        <member name="M:TotalApi.Core.TotalApiEndpoint.GetServiceContractName(System.Type)">
            <summary>
            Gets the name of the service contract.
            </summary>
            <param name="serviceContract">The service contract.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.TotalApiEndpoint.GetServiceContractName``1">
            <summary>
            Gets the name of the service contract.
            </summary>
            <typeparam name="TServiceContract">The type of the service contract.</typeparam>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.TotalApiEndpoint.ParamsUri(System.String,System.Boolean,System.String,System.String,System.Object[])">
            <summary>
            Returns connection address Url for specified service, adding additional parameters to the address.
            </summary>
            <param name="serviceContractName">Short name of the service contract.</param>
            <param name="isClientUri"><c>true</c> - if connection address would be retrieved from client side.</param>
            <param name="apiType">API type.</param>
            <param name="fmtParams">Formatted parameters string.</param>
            <param name="args">List of parameters.</param>
        </member>
        <member name="M:TotalApi.Core.TotalApiEndpoint.Uri(System.String,System.Boolean,System.String)">
            <summary>
            Returns connection address Url for specified service.
            </summary>
            <param name="isClientUri"><c>true</c> - if connection address would be retrieved from client side.</param>
            <param name="apiType">API type</param>
            <param name="serviceContractName">Short name of the service contract.</param>
        </member>
        <member name="M:TotalApi.Core.TotalApiEndpoint.ParamsUri``1(System.Boolean,System.String,System.String,System.Object[])">
            <summary>
            Returns connection address Url for specified service, adding additional parameters to the address.
            </summary>
            <param name="isClientUri"><c>true</c> - if connection address would be retrieved from client side.</param>
            <param name="apiType">API type.</param>
            <param name="fmtParams">Formatted parameters string.</param>
            <param name="args">List of parameters.</param>
        </member>
        <member name="M:TotalApi.Core.TotalApiEndpoint.Uri``1(System.Boolean,System.String)">
            <summary>
            Returns connection address Url for specified service.
            </summary>
            <param name="isClientUri"><c>true</c> - if connection address would be retrieved from client side.</param>
            <param name="apiType">API type</param>
        </member>
        <member name="M:TotalApi.Core.TotalApiEndpoint.CreateWithParams``1(System.Boolean,System.String,System.String,System.Object[])">
            <summary>
            Returns <see cref="T:System.ServiceModel.EndpointAddress"/> of a connection to specified service, adding additional parameters to the address. 
            </summary>
            <param name="isClientUri"><c>true</c> - if connection address would be retrieved from client side.</param>
            <param name="apiType">API type.</param>
            <param name="fmtParams">Formatted parameters string.</param>
            <param name="args">List of parameters.</param>
        </member>
        <member name="M:TotalApi.Core.TotalApiEndpoint.Create``1(System.Boolean,System.String)">
            <summary>
            Returns <see cref="T:System.ServiceModel.EndpointAddress"/> of a connection to specified service, adding additional parameters to the address. 
            </summary>
            <param name="isClientUri"><c>true</c> - if connection address would be retrieved from client side.</param>
            <param name="apiType">API type.</param>
        </member>
        <member name="M:TotalApi.Core.TotalApiEndpoint.GetBinding(System.String)">
            <summary>
            Returns default binding value for a given protocol.
            </summary>
            <param name="uriScheme">Protocol scheme. If not set - used <see cref="F:TotalApi.Core.TotalApiEndpoint.DefaultServiceProtocol"/>.</param>
        </member>
        <member name="M:TotalApi.Core.TotalApiEndpoint.GetBinding(System.ServiceModel.EndpointAddress)">
            <summary>
            Returns default binding value for a given endpoint.
            </summary>
            <param name="endpoint">Configured endpoint.</param>
        </member>
        <member name="M:TotalApi.Core.TotalApiEndpoint.GetBinding``1(System.Boolean)">
            <summary>
            Returns default binding value for a given service.
            </summary>
            <typeparam name="TServiceContract">Service contract.</typeparam>
            <param name="isClientUri"><c>true</c> - if connection address would be retrieved from client side.</param>
        </member>
        <member name="M:TotalApi.Core.TotalApiEndpoint.GetWebApiBinding(System.String)">
            <summary>
            Returns WebApi binding value for a given protocol.
            </summary>
            <param name="uriScheme">Protocol scheme. If not set - used <see cref="F:TotalApi.Core.TotalApiEndpoint.DefaultServiceProtocol"/>.</param>
        </member>
        <member name="T:TotalApi.Core.ConfigureServiceEndpointEvent">
            <summary>
            Delegate, that alloes manual configuring the service endpoint.
            </summary>
        </member>
        <member name="T:TotalApi.Core.ConfigureServiceEndpointEventArgs">
            <summary>
            Sets the set of parameters for manual configuring the service endpoint.
            </summary>
        </member>
        <member name="M:TotalApi.Core.ConfigureServiceEndpointEventArgs.CreateDefault(System.String,System.Boolean,System.String)">
            <summary>
            Creates the default <see cref="T:TotalApi.Core.ConfigureServiceEndpointEventArgs"/>.
            </summary>
            <param name="serviceContractName">Name of the service contract.</param>
            <param name="isClientUri"><c>true</c> - if connection address would be retrieved from client side.</param>
            <param name="apiType">Type of the API.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Core.ConfigureServiceEndpointEventArgs.CreateDefault``1(System.Boolean,System.String)">
            <summary>
            Creates the default <see cref="T:TotalApi.Core.ConfigureServiceEndpointEventArgs"/>.
            </summary>
            <param name="isClientUri"><c>true</c> - if connection address would be retrieved from client side.</param>
            <param name="apiType">Type of the API.</param>
            <returns></returns>
        </member>
        <member name="P:TotalApi.Core.ConfigureServiceEndpointEventArgs.IsClientUri">
            <summary>
            Input parameter: <c>true</c> - if connection address would be retrieved from client side.
            </summary>
        </member>
        <member name="P:TotalApi.Core.ConfigureServiceEndpointEventArgs.ContractName">
            <summary>
            Input parameter: name of the service contract, for wich URL will beresolved.
            </summary>
        </member>
        <member name="P:TotalApi.Core.ConfigureServiceEndpointEventArgs.FmtParams">
            <summary>
            Input/Output parameter: Template of parameters string, which will lbe added to the Url address during the service call.
            For example: "emg={0}"
            </summary>
        </member>
        <member name="P:TotalApi.Core.ConfigureServiceEndpointEventArgs.ParamsArgs">
            <summary>
            Input/Output parameter: Template of parameters string, which will lbe added to the Url address during the service call.
            </summary>
        </member>
        <member name="P:TotalApi.Core.ConfigureServiceEndpointEventArgs.Protocol">
            <summary>
            Input/Output parameter: Service protocol.
            For example: "http", "https", "net.tcp".
            </summary>
        </member>
        <member name="P:TotalApi.Core.ConfigureServiceEndpointEventArgs.Host">
            <summary>
            Input/Output parameter: Services hosting workstation address. Address might include port address.
            For example: "127.0.0.1:8888".
            </summary>
        </member>
        <member name="P:TotalApi.Core.ConfigureServiceEndpointEventArgs.ApplicationName">
            <summary>
            Input/Output parameter: Application Name. Used as a part of {ApplicationName} during constructing service endpoint address template. 
            For example: "totalapi"
            </summary>
        </member>
        <member name="P:TotalApi.Core.ConfigureServiceEndpointEventArgs.ApiVesrion">
            <summary>
            Input/Output parameter: Api services version. Used as a part of {ApiVersion} during constructing service endpoint address template.
            For example: "v1"
            </summary>
        </member>
        <member name="P:TotalApi.Core.ConfigureServiceEndpointEventArgs.ApiType">
            <summary>
            Input/Output parameter: Api services type. Used as a part of {ApiType} during constructing service endpoint address template.
            For example: "wcf"
            </summary>
        </member>
        <member name="P:TotalApi.Core.ConfigureServiceEndpointEventArgs.Endpoint">
            <summary>
            Input/Output parameter: Services endpoints template.
            Default value is: "{ServiceProtocol}://{ServiceHost}/{ApplicationName}/api/{ApiVersion}/{ApiType}/{ServiceContract}".
            </summary>
        </member>
        <member name="P:TotalApi.Core.ConfigureServiceEndpointEventArgs.Url">
            <summary>
            Output parameter: Constructed address.
            If not set - will be generated based on address parameters mentioned in this class.
            </summary>
        </member>
        <member name="M:TotalApi.Core.ConfigureServiceEndpointEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Core.ConfigureServiceEndpointEventArgs"/> class.
            </summary>
            <param name="contractName">Name of the contract.</param>
        </member>
        <member name="T:TotalApi.Core.PerformanceCounters.TotalApiPerformanceCounterManager">
            <summary>
            Base class for creating performance counters.
            </summary>
        </member>
        <member name="F:TotalApi.Core.PerformanceCounters.TotalApiPerformanceCounterManager.NamePrefix">
            <summary>
            Prefix of the performance counters names.
            </summary>
        </member>
        <member name="F:TotalApi.Core.PerformanceCounters.TotalApiPerformanceCounterManager.ForcedRecreate">
            <summary>
            Gets or set whether performance counters should be recreated on program start.
            </summary>
        </member>
        <member name="F:TotalApi.Core.PerformanceCounters.TotalApiPerformanceCounterManager.InstanceName">
            <summary>
            The instance name.
            </summary>
        </member>
        <member name="M:TotalApi.Core.PerformanceCounters.TotalApiPerformanceCounterManager.Create``1">
            <summary>
            Creates this instance.
            </summary>
        </member>
        <member name="M:TotalApi.Core.PerformanceCounters.TotalApiPerformanceCounterManager.Init">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:TotalApi.Core.PerformanceCounters.TotalApiPerformanceCounterManager.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="T:TotalApi.Core.PerformanceCounters.TotalApiPerformanceCounterManager`1">
            <summary>
            Base class for creating performance counters.
            </summary>
        </member>
        <member name="P:TotalApi.Core.PerformanceCounters.TotalApiPerformanceCounterManager`1.Instance">
            <summary>
            Gets the instance.
            </summary>
        </member>
        <member name="T:TotalApi.Billing.Customer">
            <summary>
            Api user.
            </summary>
        </member>
        <member name="P:TotalApi.Billing.Customer.Id">
            <summary>
            Unique customer identifier.
            </summary>
        </member>
        <member name="P:TotalApi.Billing.Customer.Email">
            <summary>
            User email - unique value.
            </summary>
        </member>
        <member name="P:TotalApi.Billing.Customer.Name">
            <summary>
            Application name.
            </summary>
        </member>
        <member name="P:TotalApi.Billing.Customer.Description">
            <summary>
            Application description.
            </summary>
        </member>
        <member name="P:TotalApi.Billing.Customer.Phone">
            <summary>
            Application description.
            </summary>
        </member>
        <member name="P:TotalApi.Billing.Customer.Applications">
            <summary>
            Array of users connected to this application.
            </summary>
            <returns>Array of <see cref="T:TotalApi.Billing.ApiUser"/></returns>
        </member>
        <member name="M:TotalApi.Billing.Customer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Billing.Application"/> class.
            </summary>
        </member>
        <member name="T:TotalApi.Billing.Application">
            <summary>
            Class, representing application.
            </summary>
        </member>
        <member name="P:TotalApi.Billing.Application.Id">
            <summary>
            Unique application identifier.
            </summary>
        </member>
        <member name="P:TotalApi.Billing.Application.ApiKey">
            <summary>
            Secret api key.
            </summary>
        </member>
        <member name="M:TotalApi.Billing.Application.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Billing.Application"/> class.
            </summary>
        </member>
        <member name="P:TotalApi.Billing.Application.AppKey">
            <summary>
            Public application key.
            </summary>
        </member>
        <member name="P:TotalApi.Billing.Application.Name">
            <summary>
            Application name.
            </summary>
        </member>
        <member name="P:TotalApi.Billing.Application.Description">
            <summary>
            Application description.
            </summary>
        </member>
        <member name="P:TotalApi.Billing.Application.Users">
            <summary>
            Array of users connected to this application.
            </summary>
            <returns>Array of <see cref="T:TotalApi.Billing.ApiUser"/></returns>
        </member>
        <member name="P:TotalApi.Billing.Application.SubSystems">
            <summary>
            Array of subsystems connected to this application.
            </summary>
            <returns>Array of <see cref="T:TotalApi.Billing.SubSystem"/></returns>
        </member>
        <member name="P:TotalApi.Billing.Application.CustomerId">
            <summary>
            Gets or sets the customer identifier who is an owner of the application.
            </summary>
            <returns>Array of <see cref="T:TotalApi.Billing.SubSystem"/></returns>
        </member>
        <member name="P:TotalApi.Billing.Application.Customer">
            <summary>
            Array of subsystems connected to this application.
            </summary>
            <returns>Array of <see cref="T:TotalApi.Billing.SubSystem"/></returns>
        </member>
        <member name="T:TotalApi.Billing.SubSystemConfig">
            <summary>
            Subsystem configuration.
            </summary>
        </member>
        <member name="P:TotalApi.Billing.SubSystemConfig.SSID">
            <summary>
            Gets or sets the subsystems identifier.
            </summary>
        </member>
        <member name="P:TotalApi.Billing.SubSystemConfig.ApiKeys">
            <summary>
            Gets or sets the API keys.
            </summary>
        </member>
        <member name="P:TotalApi.Billing.SubSystemConfig.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:TotalApi.Billing.SubSystemConfig.Restrictions">
            <summary>
            Gets or sets the restrictions.
            </summary>
        </member>
        <member name="P:TotalApi.Billing.SubSystemConfig.IncomingEvents">
            <summary>
            Gets or sets the incoming events.
            </summary>
        </member>
        <member name="P:TotalApi.Billing.SubSystemConfig.OutgoingEvents">
            <summary>
            Gets or sets the outgoing events.
            </summary>
        </member>
        <member name="P:TotalApi.Billing.SubSystemConfig.RepositoryClasses">
            <summary>
            Gets or sets the repository classes.
            </summary>
        </member>
        <member name="P:TotalApi.Billing.SubSystemConfig.ServiceContracts">
            <summary>
            Gets or sets the service contracts.
            </summary>
        </member>
        <member name="P:TotalApi.Billing.SubSystemConfig.IsHidden">
            <summary>
            Gets or sets a value indicating whether this subsystem is hidden.
            </summary>
        </member>
        <member name="M:TotalApi.Billing.SubSystemConfig.FromJsonFile(System.String)">
            <summary>
            Reads the config from json file.
            </summary>
            <param name="jsonFileName">Name of the json file.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Billing.SubSystemConfig.FromJsonString(System.String)">
            <summary>
            Reads the config from json string.
            </summary>
            <param name="json">The json string.</param>
            <returns></returns>
        </member>
        <member name="T:TotalApi.Billing.SubSystem">
            <summary>
            Subsystem identification class.
            </summary>
        </member>
        <member name="P:TotalApi.Billing.SubSystem.Id">
            <summary>
            Subsystem unique internal identifier.
            </summary>
        </member>
        <member name="P:TotalApi.Billing.SubSystem.SSID">
            <summary>
            Subsystem unique identifier.
            </summary>
        </member>
        <member name="P:TotalApi.Billing.SubSystem.Description">
            <summary>
            Subsystem description.
            </summary>
        </member>
        <member name="P:TotalApi.Billing.SubSystem.WcfEndpoint">
            <summary>
            Subsystem wcf endpoint address.
            </summary>
        </member>
        <member name="P:TotalApi.Billing.SubSystem.WebEndpoint">
            <summary>
            Subsystem web endpoint address.
            </summary>
        </member>
        <member name="P:TotalApi.Billing.SubSystem.RestrictionsJson">
            <summary>
            Do not use this field to set restrictions of the subsytem. Use <see cref="P:TotalApi.Billing.SubSystem.Restrictions"/> instead.
            </summary>
        </member>
        <member name="P:TotalApi.Billing.SubSystem.IncomingEventsStr">
            <summary>
            Do not use this field to set incoming events of the subsytem. Use <see cref="P:TotalApi.Billing.SubSystem.IncomingEvents"/> instead.
            </summary>
        </member>
        <member name="P:TotalApi.Billing.SubSystem.OutgoingEventsStr">
            <summary>
            Do not use this field to set outgoing events of the subsytem. Use <see cref="P:TotalApi.Billing.SubSystem.OutgoingEvents"/> instead.
            </summary>
        </member>
        <member name="P:TotalApi.Billing.SubSystem.RepositoryClassesStr">
            <summary>
            Do not use this field to set repository classes of the subsytem. Use <see cref="P:TotalApi.Billing.SubSystem.RepositoryClasses"/> instead.
            </summary>
        </member>
        <member name="P:TotalApi.Billing.SubSystem.ServiceContractsStr">
            <summary>
            Do not use this field to set service contracts of the subsytem. Use <see cref="P:TotalApi.Billing.SubSystem.ServiceContracts"/> instead.
            </summary>
        </member>
        <member name="P:TotalApi.Billing.SubSystem.Restrictions">
            <summary>
            Arbitary dictionary that represents subsystem restrictions.
            </summary>
        </member>
        <member name="P:TotalApi.Billing.SubSystem.IncomingEvents">
            <summary>
            List of incoming events.
            </summary>
        </member>
        <member name="P:TotalApi.Billing.SubSystem.OutgoingEvents">
            <summary>
            List of outgoing events.
            </summary>
        </member>
        <member name="P:TotalApi.Billing.SubSystem.RepositoryClasses">
            <summary>
            List of used repository classes.
            </summary>
        </member>
        <member name="P:TotalApi.Billing.SubSystem.ApiKeys">
            <summary>
            List of used api keys.
            </summary>
        </member>
        <member name="P:TotalApi.Billing.SubSystem.ServiceContracts">
            <summary>
            List of service contracts.
            </summary>
        </member>
        <member name="P:TotalApi.Billing.SubSystem.InEventsRequest">
            <summary>
            Setting up before request for retrieving/sending events to subsystem, and automatically clears after request.
            Used in the case of retrieving/sending events from freezed subsystem, to make the request not to block the request to other subsystems and not to fire many times in a row.
            </summary>
        </member>
        <member name="P:TotalApi.Billing.SubSystem.Applications">
            <summary>
            Do not use this field to set the application list of the subsytem. Use <see cref="P:TotalApi.Billing.SubSystem.ApiKeys"/> instead.
            </summary>
        </member>
        <member name="P:TotalApi.Billing.SubSystem.IsAvailable">
            <summary>
            Gets or sets a flag whether the subsystem is available in the moment.
            <remarks>
            After loading from the database this flag is <c>false</c>. After registering of the subsystem - the flag is set to <c>true</c>.
            If connection to the subsystem endpoint is failed - the flag is set to <c>false</c>.
            </remarks> 
            </summary>
        </member>
        <member name="P:TotalApi.Billing.SubSystem.IsHidden">
            <summary>
            Gets or sets a flag whether the subsystem is hidden for the clients.
            <remarks>
            This flag can be set in the SubSystemConfig.json file only. By default it equals <c>false</c>.
            Hidden subsystems won't handle client applications requests. 
            It is used for isolation critical performanced subsystem from additional load from clients. 
            </remarks> 
            </summary>
        </member>
        <member name="M:TotalApi.Billing.SubSystem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Billing.SubSystem"/> class.
            </summary>
        </member>
        <member name="M:TotalApi.Billing.SubSystem.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:TotalApi.Billing.SubSystem.HasSubscriptions">
            <summary>
            Gets or sets a value indicating whether this instance has subscriptions.
            </summary>
        </member>
        <member name="T:TotalApi.Billing.ApiUser">
            <summary>
            Api user.
            </summary>
        </member>
        <member name="P:TotalApi.Billing.ApiUser.Id">
            <summary>
            Unique user identifier.
            </summary>
        </member>
        <member name="P:TotalApi.Billing.ApiUser.Login">
            <summary>
            User login name.
            </summary>
        </member>
        <member name="P:TotalApi.Billing.ApiUser.Password">
            <summary>
            User password
            </summary>
        </member>
        <member name="P:TotalApi.Billing.ApiUser.ApplicationId">
            <summary>
            Correspondent application.
            </summary>
            <returns><see cref="P:TotalApi.Billing.Application.Id"/></returns>
        </member>
        <member name="P:TotalApi.Billing.ApiUser.Application">
            <summary>
            Correspondent application.
            </summary>
            <returns><see cref="T:TotalApi.Billing.Application"/></returns>
        </member>
        <member name="P:TotalApi.Billing.ApiUser.IsBlocked">
            <summary>
            Gets or sets the user blocked state.
            The blocked user won't be able to log into the system.
            </summary>
        </member>
        <member name="P:TotalApi.Billing.ApiUser.Email">
            <summary>
            Gets or sets the user email.
            The value can be used by the custom application.
            </summary>
        </member>
    </members>
</doc>
