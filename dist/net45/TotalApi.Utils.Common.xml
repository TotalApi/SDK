<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TotalApi.Utils.Common</name>
    </assembly>
    <members>
        <member name="T:TotalApi.Utils.AnyObjectContract">
            <summary>
            Represents description for complex object.
            </summary>
        </member>
        <member name="P:TotalApi.Utils.AnyObjectContract.ClassName">
            <summary>
            Object class name.
            </summary>
        </member>
        <member name="P:TotalApi.Utils.AnyObjectContract.Properties">
            <summary>
            Object properties.
            </summary>
        </member>
        <member name="T:TotalApi.Utils.CompiledActivator">
            <summary>
            Contains optimized methods to create types of objects locally.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.CompiledActivator.CreateInstance``1(System.Object[])">
            <summary>
            Creates an instance of the type designated by the specified generic type parameter, using the constructor with needed parameters count.
            </summary>
            
            <returns>
            A reference to the newly created object.
            </returns>
            <typeparam name="T">The type to create.</typeparam>
        </member>
        <member name="T:TotalApi.Utils.Expressions.ConstantMemberExpressionVisitor">
            <summary>
            Преобразовывает выражение и все его подвыражения, которые могут быть вычислены как константа в константу
            </summary>
        </member>
        <member name="T:TotalApi.Utils.Expressions.SimplifyExpression">
            <summary>
            Simplificates an expression:
            1. Removes unnessesary Convert() operands (inserted by Roslyn, but not supported by EF).
            2. Replaces constant subexpressions with its direct values.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Expressions.SimplifyExpression.Execute(System.Linq.Expressions.Expression)">
            <summary>
            Simplificates the <paramref name="sourceExpression"/>.
            </summary>
            <param name="sourceExpression">Source expression</param>
        </member>
        <member name="M:TotalApi.Utils.Expressions.SimplifyExpression.Predicate``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Creates and simplificates the <paramref name="predicateExpression"/>.
            Can be used when building EnituyFramework LINQ.
            <example>
                var res = Db.Set{TEntity}().First(SimplifyExpression.Predicate{TEntity}(x => x.Id == id));
            </example>
            </summary>
            <typeparam name="T">Predicate source type.</typeparam>
            <param name="predicateExpression">Predicate expression</param>
        </member>
        <member name="P:TotalApi.Utils.Expressions.CustomQueryableBase`2.ElementType">
            <summary>
            <see cref="T:System.Type"/> of T in IQueryable of T.
            
            </summary>
        </member>
        <member name="P:TotalApi.Utils.Expressions.CustomQueryableBase`2.Expression">
            <summary>
            The expression tree.
            
            </summary>
        </member>
        <member name="P:TotalApi.Utils.Expressions.CustomQueryableBase`2.Provider">
            <summary>
            IQueryProvider part of RestQueryable.
            
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Expressions.ExpressionExtensions.GetMemberExpression``1(System.Reflection.MemberInfo)">
            <summary>
            Gets expression of getting then class member:
            </summary>
        </member>
        <member name="T:TotalApi.Utils.Expressions.ParameterTypeReplacer">
            <summary>
            Expression visitor which replace parameter of one type to another one.
            </summary>
        </member>
        <member name="T:TotalApi.Utils.Io.Ntfs.AlternateDataStreamInfo">
            <summary>
            Represents the details of an alternative data stream.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Io.Ntfs.AlternateDataStreamInfo.#ctor(System.String,TotalApi.Utils.Io.Ntfs.WinApi.Win32StreamInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Utils.Io.Ntfs.AlternateDataStreamInfo"/> class.
            </summary>
            <param name="filePath">
            The full path of the file.
            This argument must not be <see langword="null"/>.
            </param>
            <param name="info">
            The <see cref="T:TotalApi.Utils.Io.Ntfs.WinApi.Win32StreamInfo"/> containing the stream information.
            </param>
        </member>
        <member name="M:TotalApi.Utils.Io.Ntfs.AlternateDataStreamInfo.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Utils.Io.Ntfs.AlternateDataStreamInfo"/> class.
            </summary>
            <param name="filePath">
            The full path of the file.
            This argument must not be <see langword="null"/>.
            </param>
            <param name="streamName">
            The name of the stream
            This argument must not be <see langword="null"/>.
            </param>
            <param name="fullPath">
            The full path of the stream.
            If this argument is <see langword="null"/>, it will be generated from the 
            <paramref name="filePath"/> and <paramref name="streamName"/> arguments.
            </param>
            <param name="exists">
            <see langword="true"/> if the stream exists;
            otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="P:TotalApi.Utils.Io.Ntfs.AlternateDataStreamInfo.FullPath">
            <summary>
            Returns the full path of this stream.
            </summary>
            <value>
            The full path of this stream.
            </value>
        </member>
        <member name="P:TotalApi.Utils.Io.Ntfs.AlternateDataStreamInfo.FilePath">
            <summary>
            Returns the full path of the file which contains the stream.
            </summary>
            <value>
            The full file-system path of the file which contains the stream.
            </value>
        </member>
        <member name="P:TotalApi.Utils.Io.Ntfs.AlternateDataStreamInfo.Name">
            <summary>
            Returns the name of the stream.
            </summary>
            <value>
            The name of the stream.
            </value>
        </member>
        <member name="P:TotalApi.Utils.Io.Ntfs.AlternateDataStreamInfo.Exists">
            <summary>
            Returns a flag indicating whether the specified stream exists.
            </summary>
            <value>
            <see langword="true"/> if the stream exists;
            otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:TotalApi.Utils.Io.Ntfs.AlternateDataStreamInfo.Size">
            <summary>
            Returns the size of the stream, in bytes.
            </summary>
            <value>
            The size of the stream, in bytes.
            </value>
        </member>
        <member name="P:TotalApi.Utils.Io.Ntfs.AlternateDataStreamInfo.StreamType">
            <summary>
            Returns the type of data.
            </summary>
            <value>
            One of the <see cref="T:TotalApi.Utils.Io.Ntfs.FileStreamType"/> values.
            </value>
        </member>
        <member name="P:TotalApi.Utils.Io.Ntfs.AlternateDataStreamInfo.Attributes">
            <summary>
            Returns attributes of the data stream.
            </summary>
            <value>
            A combination of <see cref="T:TotalApi.Utils.Io.Ntfs.FileStreamAttributes"/> values.
            </value>
        </member>
        <member name="M:TotalApi.Utils.Io.Ntfs.AlternateDataStreamInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current instance.
            </returns>
        </member>
        <member name="M:TotalApi.Utils.Io.Ntfs.AlternateDataStreamInfo.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:TotalApi.Utils.Io.Ntfs.AlternateDataStreamInfo.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">
            An object to compare with this object.
            </param>
            <returns>
            <see langword="true"/> if the current object is equal to the <paramref name="obj"/> parameter;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:TotalApi.Utils.Io.Ntfs.AlternateDataStreamInfo.Equals(TotalApi.Utils.Io.Ntfs.AlternateDataStreamInfo)">
            <summary>
            Returns a value indicating whether
            this instance is equal to another instance.
            </summary>
            <param name="other">
            The instance to compare to.
            </param>
            <returns>
            <see langword="true"/> if the current object is equal to the <paramref name="other"/> parameter;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:TotalApi.Utils.Io.Ntfs.AlternateDataStreamInfo.op_Equality(TotalApi.Utils.Io.Ntfs.AlternateDataStreamInfo,TotalApi.Utils.Io.Ntfs.AlternateDataStreamInfo)">
            <summary>
            The equality operator.
            </summary>
            <param name="first">
            The first object.
            </param>
            <param name="second">
            The second object.
            </param>
            <returns>
            <see langword="true"/> if the two objects are equal;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:TotalApi.Utils.Io.Ntfs.AlternateDataStreamInfo.op_Inequality(TotalApi.Utils.Io.Ntfs.AlternateDataStreamInfo,TotalApi.Utils.Io.Ntfs.AlternateDataStreamInfo)">
            <summary>
            The inequality operator.
            </summary>
            <param name="first">
            The first object.
            </param>
            <param name="second">
            The second object.
            </param>
            <returns>
            <see langword="true"/> if the two objects are not equal;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:TotalApi.Utils.Io.Ntfs.AlternateDataStreamInfo.Delete">
            <summary>
            Deletes this stream from the parent file.
            </summary>
            <returns>
            <see langword="true"/> if the stream was deleted;
            otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission. 
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission, or the file is read-only.
            </exception>
            <exception cref="T:System.IO.IOException">
            The specified file is in use. 
            </exception>
            <exception cref="T:System.ArgumentException">
            The path of the stream is invalid.
            </exception>
        </member>
        <member name="M:TotalApi.Utils.Io.Ntfs.AlternateDataStreamInfo.CalculateAccess(System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Calculates the access to demand.
            </summary>
            <param name="mode">
            The <see cref="T:System.IO.FileMode"/>.
            </param>
            <param name="access">
            The <see cref="T:System.IO.FileAccess"/>.
            </param>
            <returns>
            The <see cref="T:System.Security.Permissions.FileIOPermissionAccess"/>.
            </returns>
        </member>
        <member name="M:TotalApi.Utils.Io.Ntfs.AlternateDataStreamInfo.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
            <summary>
            Opens this alternate data stream.
            </summary>
            <param name="mode">
            A <see cref="T:System.IO.FileMode"/> value that specifies whether a stream is created if one does not exist, 
            and determines whether the contents of existing streams are retained or overwritten.
            </param>
            <param name="access">
            A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the stream. 
            </param>
            <param name="share">
            A <see cref="T:System.IO.FileShare"/> value specifying the type of access other threads have to the file. 
            </param>
            <param name="bufferSize">
            The size of the buffer to use.
            </param>
            <param name="useAsync">
            <see langword="true"/> to enable async-IO;
            otherwise, <see langword="false"/>.
            </param>
            <returns>
            A <see cref="T:System.IO.FileStream"/> for this alternate data stream.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="bufferSize"/> is less than or equal to zero.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission. 
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission, or the file is read-only.
            </exception>
            <exception cref="T:System.IO.IOException">
            The specified file is in use. 
            </exception>
            <exception cref="T:System.ArgumentException">
            The path of the stream is invalid.
            </exception>
            <exception cref="T:System.ComponentModel.Win32Exception">
            There was an error opening the stream.
            </exception>
        </member>
        <member name="M:TotalApi.Utils.Io.Ntfs.AlternateDataStreamInfo.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
            <summary>
            Opens this alternate data stream.
            </summary>
            <param name="mode">
            A <see cref="T:System.IO.FileMode"/> value that specifies whether a stream is created if one does not exist, 
            and determines whether the contents of existing streams are retained or overwritten.
            </param>
            <param name="access">
            A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the stream. 
            </param>
            <param name="share">
            A <see cref="T:System.IO.FileShare"/> value specifying the type of access other threads have to the file. 
            </param>
            <param name="bufferSize">
            The size of the buffer to use.
            </param>
            <returns>
            A <see cref="T:System.IO.FileStream"/> for this alternate data stream.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="bufferSize"/> is less than or equal to zero.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission. 
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission, or the file is read-only.
            </exception>
            <exception cref="T:System.IO.IOException">
            The specified file is in use. 
            </exception>
            <exception cref="T:System.ArgumentException">
            The path of the stream is invalid.
            </exception>
            <exception cref="T:System.ComponentModel.Win32Exception">
            There was an error opening the stream.
            </exception>
        </member>
        <member name="M:TotalApi.Utils.Io.Ntfs.AlternateDataStreamInfo.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens this alternate data stream.
            </summary>
            <param name="mode">
            A <see cref="T:System.IO.FileMode"/> value that specifies whether a stream is created if one does not exist, 
            and determines whether the contents of existing streams are retained or overwritten.
            </param>
            <param name="access">
            A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the stream. 
            </param>
            <param name="share">
            A <see cref="T:System.IO.FileShare"/> value specifying the type of access other threads have to the file. 
            </param>
            <returns>
            A <see cref="T:System.IO.FileStream"/> for this alternate data stream.
            </returns>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission. 
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission, or the file is read-only.
            </exception>
            <exception cref="T:System.IO.IOException">
            The specified file is in use. 
            </exception>
            <exception cref="T:System.ArgumentException">
            The path of the stream is invalid.
            </exception>
            <exception cref="T:System.ComponentModel.Win32Exception">
            There was an error opening the stream.
            </exception>
        </member>
        <member name="M:TotalApi.Utils.Io.Ntfs.AlternateDataStreamInfo.Open(System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens this alternate data stream.
            </summary>
            <param name="mode">
            A <see cref="T:System.IO.FileMode"/> value that specifies whether a stream is created if one does not exist, 
            and determines whether the contents of existing streams are retained or overwritten.
            </param>
            <param name="access">
            A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the stream. 
            </param>
            <returns>
            A <see cref="T:System.IO.FileStream"/> for this alternate data stream.
            </returns>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission. 
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission, or the file is read-only.
            </exception>
            <exception cref="T:System.IO.IOException">
            The specified file is in use. 
            </exception>
            <exception cref="T:System.ArgumentException">
            The path of the stream is invalid.
            </exception>
            <exception cref="T:System.ComponentModel.Win32Exception">
            There was an error opening the stream.
            </exception>
        </member>
        <member name="M:TotalApi.Utils.Io.Ntfs.AlternateDataStreamInfo.Open(System.IO.FileMode)">
            <summary>
            Opens this alternate data stream.
            </summary>
            <param name="mode">
            A <see cref="T:System.IO.FileMode"/> value that specifies whether a stream is created if one does not exist, 
            and determines whether the contents of existing streams are retained or overwritten.
            </param>
            <returns>
            A <see cref="T:System.IO.FileStream"/> for this alternate data stream.
            </returns>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission. 
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission, or the file is read-only.
            </exception>
            <exception cref="T:System.IO.IOException">
            The specified file is in use. 
            </exception>
            <exception cref="T:System.ArgumentException">
            The path of the stream is invalid.
            </exception>
            <exception cref="T:System.ComponentModel.Win32Exception">
            There was an error opening the stream.
            </exception>
        </member>
        <member name="M:TotalApi.Utils.Io.Ntfs.AlternateDataStreamInfo.OpenRead">
            <summary>
            Opens this stream for reading.
            </summary>
            <returns>
            A read-only <see cref="T:System.IO.FileStream"/> for this stream.
            </returns>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission. 
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission, or the file is read-only.
            </exception>
            <exception cref="T:System.IO.IOException">
            The specified file is in use. 
            </exception>
            <exception cref="T:System.ArgumentException">
            The path of the stream is invalid.
            </exception>
            <exception cref="T:System.ComponentModel.Win32Exception">
            There was an error opening the stream.
            </exception>
        </member>
        <member name="M:TotalApi.Utils.Io.Ntfs.AlternateDataStreamInfo.OpenWrite">
            <summary>
            Opens this stream for writing.
            </summary>
            <returns>
            A write-only <see cref="T:System.IO.FileStream"/> for this stream.
            </returns>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission. 
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission, or the file is read-only.
            </exception>
            <exception cref="T:System.IO.IOException">
            The specified file is in use. 
            </exception>
            <exception cref="T:System.ArgumentException">
            The path of the stream is invalid.
            </exception>
            <exception cref="T:System.ComponentModel.Win32Exception">
            There was an error opening the stream.
            </exception>
        </member>
        <member name="M:TotalApi.Utils.Io.Ntfs.AlternateDataStreamInfo.OpenText">
            <summary>
            Opens this stream as a text file.
            </summary>
            <returns>
            A <see cref="T:System.IO.StreamReader"/> which can be used to read the contents of this stream.
            </returns>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission. 
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission, or the file is read-only.
            </exception>
            <exception cref="T:System.IO.IOException">
            The specified file is in use. 
            </exception>
            <exception cref="T:System.ArgumentException">
            The path of the stream is invalid.
            </exception>
            <exception cref="T:System.ComponentModel.Win32Exception">
            There was an error opening the stream.
            </exception>
        </member>
        <member name="T:TotalApi.Utils.Io.Ntfs.FileStreamAttributes">
            <summary>
            Represents the attributes of a file stream.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.Io.Ntfs.FileStreamAttributes.None">
            <summary>
            No attributes.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.Io.Ntfs.FileStreamAttributes.ModifiedWhenRead">
            <summary>
            Set if the stream contains data that is modified when read.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.Io.Ntfs.FileStreamAttributes.ContainsSecurity">
            <summary>
            Set if the stream contains security data.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.Io.Ntfs.FileStreamAttributes.ContainsProperties">
            <summary>
            Set if the stream contains properties.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.Io.Ntfs.FileStreamAttributes.Sparse">
            <summary>
            Set if the stream is sparse.
            </summary>
        </member>
        <member name="T:TotalApi.Utils.Io.Ntfs.FileStreamType">
            <summary>
            Represents the type of data in a stream.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.Io.Ntfs.FileStreamType.Unknown">
            <summary>
            Unknown stream type.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.Io.Ntfs.FileStreamType.Data">
            <summary>
            Standard data.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.Io.Ntfs.FileStreamType.ExtendedAttributes">
            <summary>
            Extended attribute data.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.Io.Ntfs.FileStreamType.SecurityData">
            <summary>
            Security data.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.Io.Ntfs.FileStreamType.AlternateDataStream">
            <summary>
            Alternate data stream.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.Io.Ntfs.FileStreamType.Link">
            <summary>
            Hard link information.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.Io.Ntfs.FileStreamType.PropertyData">
            <summary>
            Property data.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.Io.Ntfs.FileStreamType.ObjectId">
            <summary>
            Object identifiers.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.Io.Ntfs.FileStreamType.ReparseData">
            <summary>
            Reparse points.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.Io.Ntfs.FileStreamType.SparseBlock">
            <summary>
            Sparse file.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.Io.Ntfs.FileStreamType.TransactionData">
            <summary>
            Transactional data.
            (Undocumented - BACKUP_TXFS_DATA)
            </summary>
        </member>
        <member name="T:TotalApi.Utils.Io.Ntfs.FileSystem">
            <summary>
            File-system utilities.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Io.Ntfs.FileSystem.CreateInfo(System.String)">
            <summary>
            Creates a <see cref="T:System.IO.FileSystemInfo"/> for the specified path.
            </summary>
            <param name="path">
            The path of the file or directory.
            </param>
            <returns>
            The <see cref="T:System.IO.FileSystemInfo"/> representing the file or directory.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/> or empty.
            </exception>
        </member>
        <member name="M:TotalApi.Utils.Io.Ntfs.FileSystem.ListAlternateDataStreams(System.IO.FileSystemInfo)">
            <summary>
            <span style="font-weight:bold;color:#a00;">(Extension Method)</span><br />
            Returns a read-only list of alternate data streams for the specified file.
            </summary>
            <param name="file">
            The <see cref="T:System.IO.FileSystemInfo"/> to inspect.
            </param>
            <returns>
            A read-only list of <see cref="T:TotalApi.Utils.Io.Ntfs.AlternateDataStreamInfo"/> objects
            representing the alternate data streams for the specified file, if any.
            If no streams are found, returns an empty list.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="file"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            The specified <paramref name="file"/> does not exist.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission. 
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:TotalApi.Utils.Io.Ntfs.FileSystem.ListAlternateDataStreams(System.String)">
            <summary>
            Returns a read-only list of alternate data streams for the specified file.
            </summary>
            <param name="filePath">
            The full path of the file to inspect.
            </param>
            <returns>
            A read-only list of <see cref="T:TotalApi.Utils.Io.Ntfs.AlternateDataStreamInfo"/> objects
            representing the alternate data streams for the specified file, if any.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="filePath"/> is <see langword="null"/> or an empty string.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="filePath"/> is not a valid file path.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            The specified <paramref name="filePath"/> does not exist.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission. 
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:TotalApi.Utils.Io.Ntfs.FileSystem.AlternateDataStreamExists(System.IO.FileSystemInfo,System.String)">
            <summary>
            <span style="font-weight:bold;color:#a00;">(Extension Method)</span><br />
            Returns a flag indicating whether the specified alternate data stream exists.
            </summary>
            <param name="file">
            The <see cref="T:System.IO.FileInfo"/> to inspect.
            </param>
            <param name="streamName">
            The name of the stream to find.
            </param>
            <returns>
            <see langword="true"/> if the specified stream exists;
            otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="file"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="streamName"/> contains invalid characters.
            </exception>
        </member>
        <member name="M:TotalApi.Utils.Io.Ntfs.FileSystem.AlternateDataStreamExists(System.String,System.String)">
            <summary>
            Returns a flag indicating whether the specified alternate data stream exists.
            </summary>
            <param name="filePath">
            The path of the file to inspect.
            </param>
            <param name="streamName">
            The name of the stream to find.
            </param>
            <returns>
            <see langword="true"/> if the specified stream exists;
            otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="filePath"/> is <see langword="null"/> or an empty string.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="filePath"/> is not a valid file path.</para>
            <para>-or-</para>
            <para><paramref name="streamName"/> contains invalid characters.</para>
            </exception>
        </member>
        <member name="M:TotalApi.Utils.Io.Ntfs.FileSystem.GetAlternateDataStream(System.IO.FileSystemInfo,System.String,System.IO.FileMode)">
            <summary>
            <span style="font-weight:bold;color:#a00;">(Extension Method)</span><br />
            Opens an alternate data stream.
            </summary>
            <param name="file">
            The <see cref="T:System.IO.FileInfo"/> which contains the stream.
            </param>
            <param name="streamName">
            The name of the stream to open.
            </param>
            <param name="mode">
            One of the <see cref="T:System.IO.FileMode"/> values, indicating how the stream is to be opened.
            </param>
            <returns>
            An <see cref="T:TotalApi.Utils.Io.Ntfs.AlternateDataStreamInfo"/> representing the stream.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="file"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            The specified <paramref name="file"/> was not found.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="streamName"/> contains invalid characters.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="mode"/> is either <see cref="F:System.IO.FileMode.Truncate"/> or <see cref="F:System.IO.FileMode.Append"/>.
            </exception>
            <exception cref="T:System.IO.IOException">
            <para><paramref name="mode"/> is <see cref="F:System.IO.FileMode.Open"/>, and the stream doesn't exist.</para>
            <para>-or-</para>
            <para><paramref name="mode"/> is <see cref="F:System.IO.FileMode.CreateNew"/>, and the stream already exists.</para>
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission. 
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission, or the file is read-only.
            </exception>
        </member>
        <member name="M:TotalApi.Utils.Io.Ntfs.FileSystem.GetAlternateDataStream(System.IO.FileSystemInfo,System.String)">
            <summary>
            <span style="font-weight:bold;color:#a00;">(Extension Method)</span><br />
            Opens an alternate data stream.
            </summary>
            <param name="file">
            The <see cref="T:System.IO.FileInfo"/> which contains the stream.
            </param>
            <param name="streamName">
            The name of the stream to open.
            </param>
            <returns>
            An <see cref="T:TotalApi.Utils.Io.Ntfs.AlternateDataStreamInfo"/> representing the stream.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="file"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            The specified <paramref name="file"/> was not found.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="streamName"/> contains invalid characters.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission. 
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission, or the file is read-only.
            </exception>
        </member>
        <member name="M:TotalApi.Utils.Io.Ntfs.FileSystem.GetAlternateDataStream(System.String,System.String,System.IO.FileMode)">
            <summary>
            Opens an alternate data stream.
            </summary>
            <param name="filePath">
            The path of the file which contains the stream.
            </param>
            <param name="streamName">
            The name of the stream to open.
            </param>
            <param name="mode">
            One of the <see cref="T:System.IO.FileMode"/> values, indicating how the stream is to be opened.
            </param>
            <returns>
            An <see cref="T:TotalApi.Utils.Io.Ntfs.AlternateDataStreamInfo"/> representing the stream.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="filePath"/> is <see langword="null"/> or an empty string.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            The specified <paramref name="filePath"/> was not found.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="filePath"/> is not a valid file path.</para>
            <para>-or-</para>
            <para><paramref name="streamName"/> contains invalid characters.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="mode"/> is either <see cref="F:System.IO.FileMode.Truncate"/> or <see cref="F:System.IO.FileMode.Append"/>.
            </exception>
            <exception cref="T:System.IO.IOException">
            <para><paramref name="mode"/> is <see cref="F:System.IO.FileMode.Open"/>, and the stream doesn't exist.</para>
            <para>-or-</para>
            <para><paramref name="mode"/> is <see cref="F:System.IO.FileMode.CreateNew"/>, and the stream already exists.</para>
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission. 
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission, or the file is read-only.
            </exception>
        </member>
        <member name="M:TotalApi.Utils.Io.Ntfs.FileSystem.GetAlternateDataStream(System.String,System.String)">
            <summary>
            Opens an alternate data stream.
            </summary>
            <param name="filePath">
            The path of the file which contains the stream.
            </param>
            <param name="streamName">
            The name of the stream to open.
            </param>
            <returns>
            An <see cref="T:TotalApi.Utils.Io.Ntfs.AlternateDataStreamInfo"/> representing the stream.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="filePath"/> is <see langword="null"/> or an empty string.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            The specified <paramref name="filePath"/> was not found.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="filePath"/> is not a valid file path.</para>
            <para>-or-</para>
            <para><paramref name="streamName"/> contains invalid characters.</para>
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission. 
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission, or the file is read-only.
            </exception>
        </member>
        <member name="M:TotalApi.Utils.Io.Ntfs.FileSystem.DeleteAlternateDataStream(System.IO.FileSystemInfo,System.String)">
            <summary>
            <span style="font-weight:bold;color:#a00;">(Extension Method)</span><br />
            Deletes the specified alternate data stream if it exists.
            </summary>
            <param name="file">
            The <see cref="T:System.IO.FileInfo"/> to inspect.
            </param>
            <param name="streamName">
            The name of the stream to delete.
            </param>
            <returns>
            <see langword="true"/> if the specified stream is deleted;
            otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="file"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="streamName"/> contains invalid characters.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission. 
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission, or the file is read-only.
            </exception>
            <exception cref="T:System.IO.IOException">
            The specified file is in use. 
            </exception>
        </member>
        <member name="M:TotalApi.Utils.Io.Ntfs.FileSystem.DeleteAlternateDataStream(System.String,System.String)">
            <summary>
            Deletes the specified alternate data stream if it exists.
            </summary>
            <param name="filePath">
            The path of the file to inspect.
            </param>
            <param name="streamName">
            The name of the stream to find.
            </param>
            <returns>
            <see langword="true"/> if the specified stream is deleted;
            otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="filePath"/> is <see langword="null"/> or an empty string.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="filePath"/> is not a valid file path.</para>
            <para>-or-</para>
            <para><paramref name="streamName"/> contains invalid characters.</para>
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission. 
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission, or the file is read-only.
            </exception>
            <exception cref="T:System.IO.IOException">
            The specified file is in use. 
            </exception>
        </member>
        <member name="T:TotalApi.Utils.Io.Ntfs.SafeHGlobalHandle">
            <summary>
            A <see cref="T:System.Runtime.InteropServices.SafeHandle"/> for a global memory allocation.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Io.Ntfs.SafeHGlobalHandle.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Utils.Io.Ntfs.SafeHGlobalHandle"/> class.
            </summary>
            <param name="toManage">
            The initial handle value.
            </param>
            <param name="size">
            The size of this memory block, in bytes.
            </param>
        </member>
        <member name="M:TotalApi.Utils.Io.Ntfs.SafeHGlobalHandle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Utils.Io.Ntfs.SafeHGlobalHandle"/> class.
            </summary>
        </member>
        <member name="P:TotalApi.Utils.Io.Ntfs.SafeHGlobalHandle.IsInvalid">
            <summary>
            Gets a value indicating whether the handle value is invalid.
            </summary>
            <value>
            <see langword="true"/> if the handle value is invalid;
            otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:TotalApi.Utils.Io.Ntfs.SafeHGlobalHandle.Size">
            <summary>
            Returns the size of this memory block.
            </summary>
            <value>
            The size of this memory block, in bytes.
            </value>
        </member>
        <member name="M:TotalApi.Utils.Io.Ntfs.SafeHGlobalHandle.Allocate(System.Int32)">
            <summary>
            Allocates memory from the unmanaged memory of the process using GlobalAlloc.
            </summary>
            <param name="bytes">
            The number of bytes in memory required.
            </param>
            <returns>
            A <see cref="T:TotalApi.Utils.Io.Ntfs.SafeHGlobalHandle"/> representing the memory.
            </returns>
            <exception cref="T:System.OutOfMemoryException">
            There is insufficient memory to satisfy the request.
            </exception>
        </member>
        <member name="M:TotalApi.Utils.Io.Ntfs.SafeHGlobalHandle.Invalid">
            <summary>
            Returns an invalid handle.
            </summary>
            <returns>
            An invalid <see cref="T:TotalApi.Utils.Io.Ntfs.SafeHGlobalHandle"/>.
            </returns>
        </member>
        <member name="M:TotalApi.Utils.Io.Ntfs.SafeHGlobalHandle.ReleaseHandle">
            <summary>
            Executes the code required to free the handle.
            </summary>
            <returns>
            <see langword="true"/> if the handle is released successfully;
            otherwise, in the event of a catastrophic failure, <see langword="false"/>.
            In this case, it generates a releaseHandleFailed MDA Managed Debugging Assistant.
            </returns>
        </member>
        <member name="T:TotalApi.Utils.Io.Ntfs.WinApi">
            <summary>
            Safe native methods.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Io.Ntfs.StreamName.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TotalApi.Utils.Io.Ntfs.StreamName"/> class.
            </summary>
        </member>
        <member name="P:TotalApi.Utils.Io.Ntfs.StreamName.MemoryBlock">
            <summary>
            Returns the handle to the block of memory.
            </summary>
            <value>
            The <see cref="T:TotalApi.Utils.Io.Ntfs.SafeHGlobalHandle"/> representing the block of memory.
            </value>
        </member>
        <member name="M:TotalApi.Utils.Io.Ntfs.StreamName.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, 
            releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Io.Ntfs.StreamName.EnsureCapacity(System.Int32)">
            <summary>
            Ensures that there is sufficient memory allocated.
            </summary>
            <param name="capacity">
            The required capacity of the block, in bytes.
            </param>
            <exception cref="T:System.OutOfMemoryException">
            There is insufficient memory to satisfy the request.
            </exception>
        </member>
        <member name="M:TotalApi.Utils.Io.Ntfs.StreamName.ReadString(System.Int32)">
            <summary>
            Reads the Unicode string from the memory block.
            </summary>
            <param name="length">
            The length of the string to read, in characters.
            </param>
            <returns>
            The string read from the memory block.
            </returns>
        </member>
        <member name="M:TotalApi.Utils.Io.Ntfs.StreamName.ReadStreamName(System.Int32)">
            <summary>
            Reads the string, and extracts the stream name.
            </summary>
            <param name="length">
            The length of the string to read, in characters.
            </param>
            <returns>
            The stream name.
            </returns>
        </member>
        <member name="T:TotalApi.Utils.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:TotalApi.Utils.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:TotalApi.Utils.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:TotalApi.Utils.Properties.Resources.Error_AccessDenied_Path">
            <summary>
              Looks up a localized string similar to Access to the path &apos;{0}&apos; was denied..
            </summary>
        </member>
        <member name="P:TotalApi.Utils.Properties.Resources.Error_AlreadyExists">
            <summary>
              Looks up a localized string similar to Cannot create &apos;{0}&apos; because a file or directory with the same name already exists..
            </summary>
        </member>
        <member name="P:TotalApi.Utils.Properties.Resources.Error_DirectoryNotFound">
            <summary>
              Looks up a localized string similar to Could not find a part of the path &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:TotalApi.Utils.Properties.Resources.Error_DriveNotFound">
            <summary>
              Looks up a localized string similar to Could not find the drive &apos;{0}&apos;. The drive might not be ready or might not be mapped..
            </summary>
        </member>
        <member name="P:TotalApi.Utils.Properties.Resources.Error_FileAlreadyExists">
            <summary>
              Looks up a localized string similar to The file &apos;{0}&apos; already exists..
            </summary>
        </member>
        <member name="P:TotalApi.Utils.Properties.Resources.Error_InvalidFileChars">
            <summary>
              Looks up a localized string similar to The specified stream name contains invalid characters..
            </summary>
        </member>
        <member name="P:TotalApi.Utils.Properties.Resources.Error_InvalidMode">
            <summary>
              Looks up a localized string similar to The specified mode &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:TotalApi.Utils.Properties.Resources.Error_NonFile">
            <summary>
              Looks up a localized string similar to The specified file name &apos;{0}&apos; is not a disk-based file..
            </summary>
        </member>
        <member name="P:TotalApi.Utils.Properties.Resources.Error_SharingViolation">
            <summary>
              Looks up a localized string similar to The process cannot access the file &apos;{0}&apos; because it is being used by another process..
            </summary>
        </member>
        <member name="P:TotalApi.Utils.Properties.Resources.Error_StreamExists">
            <summary>
              Looks up a localized string similar to The specified alternate data stream &apos;{0}&apos; already exists on file &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:TotalApi.Utils.Properties.Resources.Error_StreamNotFound">
            <summary>
              Looks up a localized string similar to The specified alternate data stream &apos;{0}&apos; does not exist on file &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:TotalApi.Utils.Properties.Resources.Error_UnknownError">
            <summary>
              Looks up a localized string similar to Unknown error: {0}.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.CmdLine.#ctor(System.Char,System.Boolean,System.String,System.String)">
            <summary>
            Creates object that implement command line parser
            </summary>
            <param name="optionValueSeparator">Separator of the valuable parameters (ex., for 'param1=1' separator is '='</param>
            <param name="multiParams">Indicates whether params can be able to have multiply values, like /param1=val1 /param1=val2</param>
            <param name="addCmdLine">Additional part of the command line</param>
            <param name="cmdLine">Source command line not including path to executing application or null for default command line</param>
        </member>
        <member name="M:TotalApi.Utils.CmdLine.ParseCmdLine(System.String)">
            <summary>
            Parses the command line and init the object
            </summary>
            <param name="addCmdLine">Additional part of the command line</param>
        </member>
        <member name="M:TotalApi.Utils.CmdLine.HasParamValue(System.String,System.String)">
            <summary>
            Check whether the param has the specified value
            </summary>
            <param name="paramName">Parameter name</param>
            <param name="paramValue">Checking parameter value</param>
            <returns></returns>
        </member>
        <member name="P:TotalApi.Utils.CmdLine.MultiParams">
            <summary>
            Gets whether params can be able to have multiply values, like /param1=val1 /param1=val2 <para></para>
            Checking setting values on multiparams is done using method HasParamValue()
            </summary>
        </member>
        <member name="P:TotalApi.Utils.CmdLine.ExecPath">
            <summary>
            Gets or sets executable file full path
            </summary>
        </member>
        <member name="P:TotalApi.Utils.CmdLine.OptionValueSeparator">
            <summary>
            Gets separator of the valuable parameters (ex., for 'param1=1' separator is '='
            </summary>
        </member>
        <member name="P:TotalApi.Utils.CmdLine.RawCommandLine">
            <summary>
            Gets raw command line as it was on program start or defined on creating the object
            </summary>
        </member>
        <member name="M:TotalApi.Utils.CmdLine.BuildCommandLine(System.Boolean)">
            <summary>
            Builds command line combined from current settings
            </summary>
            <param name="includeExeFile">Indicates whether include full path to the current executed file into the start of command line.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Utils.CmdLine.RemoveParam(System.String)">
            <summary>
            Removes parameter from command line
            </summary>
            <param name="paramName">Parameter name for removing</param>
        </member>
        <member name="M:TotalApi.Utils.CmdLine.RemoveFile(System.String)">
            <summary>
            Removes file from command line
            </summary>
            <param name="fileName">File name for removing</param>
        </member>
        <member name="P:TotalApi.Utils.CmdLine.Files">
            <summary>
            List of the files in command line
            </summary>
        </member>
        <member name="T:TotalApi.Utils.Concurrent.ConcurrentHashSet`1">
            <summary>
            Implementation of the thread-safe hash set.
            </summary>
        </member>
        <member name="T:TotalApi.Utils.Concurrent.ConcurrentWeakedHashSet`1">
            <summary>
            Implementation of the thread-safe has set of the weaked referenced objects.
            Added objects are stored in the set, but allow to be killed by the garbage collector.
            If the referece was killed its reference in the set would be removed.
            </summary>
        </member>
        <member name="P:TotalApi.Utils.Concurrent.QueueManager`1.Delay">
            <summary>
            Gets or sets the delay between handling of the queue items in one thread.
            <c>null</c> value - no delay.
            </summary>
        </member>
        <member name="P:TotalApi.Utils.Concurrent.QueueManager`1.Level">
            <summary>
            Gets or sets the maximum queue size.<para></para>
              <c>null</c> - No limit for queue size.<para></para>
              <c>0</c> - No queue. All extra queue items will be ignored.<para></para>
              <c>Positive value</c> - If the queue is full all extra queue items will be ignored.<para></para>
              <c>Negative value</c> - If the queue is full the first queue item in queue will be skipped and extra queue item will be added to the end of the queue.
            <remarks>
            Changing this value doesn't affect to the current quantity of the queue items.
            </remarks>
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Concurrent.QueueManager`1.#ctor(System.Int32,System.Boolean,System.String)">
            <summary>
            Creates a queue with its async handler with specified <paramref name="concurrencyLevel"/> and <see cref="P:TotalApi.Utils.Concurrent.QueueManager`1.Level"/>.
            </summary>
            <param name="concurrencyLevel">Sets the maximum quantity of the simultaneously executing handlers.</param>
            <param name="useStack">If <c>true</c> new queue item will be set to stack instead of the queue.</param>
            <param name="threadName">The name to use for each of the handler threads.</param>
        </member>
        <member name="M:TotalApi.Utils.Concurrent.QueueManager`1.#ctor(System.Action{`0},System.Int32,System.Boolean,System.String)">
            <summary>
            Creates a queue with its async handler with specified <paramref name="concurrencyLevel"/> and <see cref="P:TotalApi.Utils.Concurrent.QueueManager`1.Level"/>.
            </summary>
            <param name="queueHandler">The handler action of the queue item.</param>
            <param name="concurrencyLevel">Sets the maximum quantity of the simultaneously executing handlers.</param>
            <param name="useStack">If <c>true</c> new queue item will be set to stack instead of the queue.</param>
            <param name="threadName">The name to use for each of the handler threads.</param>
        </member>
        <member name="T:TotalApi.Utils.Console.ConsoleListener">
            <summary>
            Создаёт SynchronizationContext для консольного приложения и вызывает события-обработчики нажатых клавиш.
            </summary>
        </member>
        <member name="T:TotalApi.Utils.DataAnnotations.JsonIgnoreAttribute">
            <summary>
            Служит для пометки свойства класса которое не требует сериализации.
            Простое дублирование соответствующего атрибута из сборки Newton Json.Net, чтобы не подключать сборку. 
            Требует использование <see cref="!:TotalApi.Utils.Wcf.Extensions.JsonContractResolver"/> для корректной работы.
            Чтобы это работало в WEB-приложении необходимо прописать в WebApiConfig строчку:
            <example>
            GlobalConfiguration.Configuration.Formatters.JsonFormatter.SerializerSettings.ContractResolver = new JsonContractResolver();
            </example>
            </summary>
        </member>
        <member name="T:TotalApi.Utils.DataAnnotations.JsonPropertyAttribute">
            <summary>
            Служит для пометки свойства класса которое требует сериализации.
            Простое дублирование соответствующего атрибута из сборки Newton Json.Net,
            чтобы не подключать сборку. 
            Требует использование JsonContractResolverEx для корректной работы.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.DataStorage.CustomDataStorage.GetValue(System.String,System.Object)">
            <summary>
            Gets value of specified key from dictionary. If no key contains in dictionary - returns default value
            </summary>
            <param name="key">Key value</param>
            <param name="defValue">Default value</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Utils.DataStorage.CustomDataStorage.Get``1(System.String,``0)">
            <summary>
            Gets value of specified key from strong typed dictionary. If no key contains in dictionary - returns default value
            </summary>
            <typeparam name="TValue">Type of result</typeparam>
            <param name="key">Key value</param>
            <param name="defValue">Default value</param>
        </member>
        <member name="P:TotalApi.Utils.DataStorage.CustomDataStorage.AutoUseGlobal">
            <summary>
            Gets or sets behavour when read value is not found in the non-global storage.<para></para> 
            If <see cref="P:TotalApi.Utils.DataStorage.CustomDataStorage.AutoUseGlobal"/> is <c>true</c> - the value will be tried to be got from global storage.<para></para> 
            Default value is <c>false</c>.
            </summary>
        </member>
        <member name="T:TotalApi.Utils.DataStorage.IDataStorage">
            <summary>
            Implements methods for DataStorage
            </summary>
        </member>
        <member name="P:TotalApi.Utils.DataStorage.IDataStorage.StorageRoot">
            <summary>
            Gets or set datastorage root name
            </summary>
        </member>
        <member name="P:TotalApi.Utils.DataStorage.IDataStorage.StorageName">
            <summary>
            Gets or set datastorage name
            </summary>
        </member>
        <member name="P:TotalApi.Utils.DataStorage.IDataStorage.IsActive">
            <summary>
            Gets or sets whether datastorage is active. 
            If IsActive is true data will be automatically Load on changing StorageRoot or StorageName and save on disposing the object.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.DataStorage.IDataStorage.LoadData">
            <summary>
            Load data to memory cache
            </summary>
        </member>
        <member name="M:TotalApi.Utils.DataStorage.IDataStorage.SaveData">
            <summary>
            Save data from memory cache
            </summary>
        </member>
        <member name="P:TotalApi.Utils.DataStorage.IDataStorage.Global">
            <summary>
            Gets instance for saving global setting (for all users).
            </summary>
        </member>
        <member name="M:TotalApi.Utils.DataStorage.IDataStorage.Read(System.Object,System.String)">
            <summary>
            Reads value and set it to the specified property name of the object. Object must have a property named Name.
            Value read with the key obj.Name + '.' + propertyName.
            Typically used for setting property values of the form components.
            If value is not exist - property value will not be changed.
            <example>
            <code>
            Storage.Read(EditBox1, "Text");
            </code>
            </example>
            </summary>
        </member>
        <member name="M:TotalApi.Utils.DataStorage.IDataStorage.Write(System.Object,System.String)">
            <summary>
            Write value of the specified property name of the object. Object must have a property named Name.
            Value write with the key obj.Name + '.' + propertyName.
            Typically used for saving property values of the form components.
            <example>
            <code>
            Storage.Write(EditBox1, "Text");
            </code>
            </example>
            </summary>
        </member>
        <member name="P:TotalApi.Utils.DataStorage.IDataStorage.Item(System.String)">
            <summary>
            Gets or sets user values into the storage. Accepted date types are: integer, double, string, boolenan, byte[]
            </summary>
        </member>
        <member name="M:TotalApi.Utils.DataStorage.IDataStorage.Clear">
            <summary>
            Clear all data in memory
            </summary>
        </member>
        <member name="M:TotalApi.Utils.DataStorage.IDataStorage.GetSubDataNames">
            <summary>
            Get substorage data entry names
            </summary>
        </member>
        <member name="M:TotalApi.Utils.DataStorage.IDataStorage.GetSubData(System.String)">
            <summary>
            Get existing or create new substorage data
            </summary>
        </member>
        <member name="M:TotalApi.Utils.DataStorage.IDataStorage.DeleteSubData(System.String)">
            <summary>
            Delete substorage data
            </summary>
        </member>
        <member name="T:TotalApi.Utils.Diagnostics.PerformanceCounterCategoryBase">
            <summary>
            Implementation of performance counter category.
            Just create a child class with properties marked <seealso cref="T:TotalApi.Utils.Diagnostics.PerformanceCounterAttribute"/>.
            <sample>
                class MyCounterCategory : PerformanceCounterCategoryBase
                {
                    public MyCounterCategory() : base("MyCategory") { }
            
                    [PerformanceCounter(PerformanceCounterType.RateOfCountsPerSecond32)]
                    public PerformanceCounter Counter1 { get; set; }
            
                    [PerformanceCounter]
                    public PerformanceCounter Counter2 { get; set; }
                }
            
                var c = new MyCounterCategory();
                c.Init(false);
                c.Counter1.Increment();
            </sample>
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Diagnostics.SimplePerformanceCounter.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="M:TotalApi.Utils.Entity.IDbCollection`1.Find(System.Object[])">
            <summary>
            Finds an entity with the given primary key values.
                        If an entity with the given primary key values exists in the context, then it is
                        returned immediately without making a request to the store.  Otherwise, a request
                        is made to the store for an entity with the given primary key values and this entity,
                        if found, is attached to the context and returned.  If no entity is found in the
                        context or the store, then null is returned.
            
            </summary>
            
            <remarks>
            The ordering of composite key values is as defined in the EDM, which is in turn as defined in
                        the designer, by the Code First fluent API, or by the DataMember attribute.
            
            </remarks>
            <param name="keyValues">The values of the primary key for the entity to be found. </param>
            <returns>
            The entity found, or null.
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown if multiple entities exist in the context with the primary key values given.</exception><exception cref="T:System.InvalidOperationException">Thrown if the type of entity is not part of the data model for this context.</exception><exception cref="T:System.InvalidOperationException">Thrown if the types of the key values do not match the types of the key values for the entity type to be found.</exception><exception cref="T:System.InvalidOperationException">Thrown if the context has been disposed.</exception>
        </member>
        <member name="M:TotalApi.Utils.Entity.IDbCollection`1.FindAsync(System.Threading.CancellationToken,System.Object[])">
            <summary>
            Asynchronously finds an entity with the given primary key values.
                        If an entity with the given primary key values exists in the context, then it is
                        returned immediately without making a request to the store.  Otherwise, a request
                        is made to the store for an entity with the given primary key values and this entity,
                        if found, is attached to the context and returned.  If no entity is found in the
                        context or the store, then null is returned.
            
            </summary>
            
            <remarks>
            The ordering of composite key values is as defined in the EDM, which is in turn as defined in
                        the designer, by the Code First fluent API, or by the DataMember attribute.
                        Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                        that any asynchronous operations have completed before calling another method on this context.
            
            </remarks>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
                        </param><param name="keyValues">The values of the primary key for the entity to be found. </param>
            <returns>
            A task that represents the asynchronous find operation. The task result contains the entity found, or null.
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown if multiple entities exist in the context with the primary key values given.</exception><exception cref="T:System.InvalidOperationException">Thrown if the type of entity is not part of the data model for this context.</exception><exception cref="T:System.InvalidOperationException">Thrown if the types of the key values do not match the types of the key values for the entity type to be found.</exception><exception cref="T:System.InvalidOperationException">Thrown if the context has been disposed.</exception>
        </member>
        <member name="M:TotalApi.Utils.Entity.IDbCollection`1.FindAsync(System.Object[])">
            <summary>
            Asynchronously finds an entity with the given primary key values.
                        If an entity with the given primary key values exists in the context, then it is
                        returned immediately without making a request to the store.  Otherwise, a request
                        is made to the store for an entity with the given primary key values and this entity,
                        if found, is attached to the context and returned.  If no entity is found in the
                        context or the store, then null is returned.
            
            </summary>
            
            <remarks>
            The ordering of composite key values is as defined in the EDM, which is in turn as defined in
                        the designer, by the Code First fluent API, or by the DataMember attribute.
                        Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                        that any asynchronous operations have completed before calling another method on this context.
            
            </remarks>
            <param name="keyValues">The values of the primary key for the entity to be found. </param>
            <returns>
            A task that represents the asynchronous find operation. The task result contains the entity found, or null.
            </returns>
        </member>
        <member name="T:TotalApi.Utils.EventManager">
            <summary>
            Менеджер сообщений.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.EventManager.InternalSubscribe(System.Type,System.Object)">
            <summary>
            Возвращает количество подписчиков после операции.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.EventManager.InternalUnsubscribe(System.Type,System.Object)">
            <summary>
            Возвращает количество подписчиков после операции.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.EventManager.CreateTask">
            <summary>
            Фабрика для создания задачи. Делаем, чтобы все события вызывались последовательно в одном потоке, но асинхронно относительно внешнего вызова
            </summary>
        </member>
        <member name="M:TotalApi.Utils.EventManager.InternalPublish(System.Object)">
            <summary>
            Непосредственная доставка события подписчикам.
            Вызывается <see cref="F:TotalApi.Utils.EventManager._eventRunner"/> после "накопительной задержки".
            Все события вызываются в отдельном потоке, но по одному за раз в порядке поступления.
            Это сделано, во-первых, для экономии ресурсов и, во-вторых, для обеспечения правильной 
            последовательности вызовов событий.
            Обработчики событий ДОЛЖНЫ быть очень быстрыми.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.EventManager.Publish(System.Object)">
            <summary>
            Публикует событие с задержкой, для "схлопывания" одинаковых событий, пришедших 
            одно за другим. 
            В конце, после обработки накопления будет вызван метод <see cref="M:TotalApi.Utils.EventManager.InternalPublish(System.Object)"/>,
            который и выполнит непосредственное уведомление подписчиков.
            </summary>
        </member>
        <member name="T:TotalApi.Utils.EventObjectContract">
            <summary>
            Event representing class.
            </summary>
        </member>
        <member name="P:TotalApi.Utils.EventObjectContract.ClientId">
            <summary>
            Event's client identifier.
            </summary>
        </member>
        <member name="P:TotalApi.Utils.EventObjectContract.EventName">
            <summary>
            Event name.
            </summary>
        </member>
        <member name="P:TotalApi.Utils.EventObjectContract.EventParams">
            <summary>
            Event parameters dictionary.
            </summary>
        </member>
        <member name="P:TotalApi.Utils.EventObjectContract.Instance">
            <summary>
            Instance of the event.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.EventRunner.GetHash(System.Object)">
            <summary>
            Этот метод генерирует хэшкод-строку на основании типа объекта и значений его публичных свойств.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.Extensions.RegExpr.PhpVar">
            <summary>
            Expression of the form: xxxx $var1 xxxx $var_2 xxxx $var3.prop1.prop2 xxx
            </summary>
        </member>
        <member name="F:TotalApi.Utils.Extensions.RegExpr.FormatExpr">
            <summary>
            Expression of the form: xxxx {var1} xxxx {var_2} xxxx {var3.prop1.prop2} xxx
            </summary>
        </member>
        <member name="F:TotalApi.Utils.Extensions.RegExpr.MacroExpr">
            <summary>
            Expression of the form: xxxx %var1% xxxx %var_2% xxxx %var3.prop1.prop2% xxx
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.TempFiles.DeleteTempFiles">
            <summary>
            Removes all the temporary files created in the current session.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.TempFiles.ClearTempDirectory(System.String)">
            <summary>
            Removes all non-locked files in the tenporary directory
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.AssemblyExtension.GetResourceStream(System.Reflection.Assembly,System.String)">
            <summary>
            Returns stream of the embedded stream of the specified assembly.
            </summary>
            <param name="assembly">Specified assembly</param>
            <param name="relativeResourceName">Resource name in the format <c>Folder</c>.<c>SubFolder</c>.<c>ItemName</c></param>
        </member>
        <member name="M:TotalApi.Utils.Extensions.AssemblyExtension.GetResourceReader(System.Reflection.Assembly,System.String)">
            <summary>
            Returns stream text reader of the embedded stream of the specified assembly.
            </summary>
            <param name="assembly">Specified assembly</param>
            <param name="relativeResourceName">Resource name in the format <c>Folder</c>.<c>SubFolder</c>.<c>ItemName</c></param>
        </member>
        <member name="M:TotalApi.Utils.Extensions.AssemblyExtension.GetResourceAllText(System.Reflection.Assembly,System.String)">
            <summary>
            Returns text of the embedded stream of the specified assembly.
            </summary>
            <param name="assembly">Specified assembly</param>
            <param name="relativeResourceName">Resource name in the format <c>Folder</c>.<c>SubFolder</c>.<c>ItemName</c></param>
        </member>
        <member name="M:TotalApi.Utils.Extensions.AssemblyExtension.GetResourceBytes(System.Reflection.Assembly,System.String)">
            <summary>
            Returns byte array of the embedded stream of the specified assembly.
            </summary>
            <param name="assembly">Specified assembly</param>
            <param name="relativeResourceName">Resource name in the format <c>Folder</c>.<c>SubFolder</c>.<c>ItemName</c></param>
        </member>
        <member name="M:TotalApi.Utils.Extensions.CollectionBaseExtension.IsCollectionEquals(System.Collections.ICollection,System.Collections.CollectionBase)">
            <summary>
            Comparing two collections with item-to-item method
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.CollectionBaseExtension.Delete``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean})">
            <summary>
            Removing list items by condition from generic collection passed as this parameter
            </summary>
            <returns>The same list</returns>
        </member>
        <member name="M:TotalApi.Utils.Extensions.CollectionBaseExtension.ChangeIndex``1(System.Collections.Generic.IList{``0},``0,System.Int32)">
            <summary>
            Changes <paramref name="item"/> index to <paramref name="delta"/> value.
            </summary>
            <param name="self">Source list</param>
            <param name="item">The list item to change index</param>
            <param name="delta">The delta value of index changing</param>
            <returns>The source list</returns>
        </member>
        <member name="M:TotalApi.Utils.Extensions.CollectionBaseExtension.MoveIndex``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Move the list item index from <paramref name="fromIndex"/> to <paramref name="toIndex"/> value.
            </summary>
            <param name="self">Source list</param>
            <param name="fromIndex">The index of the item to be changed.</param>
            <param name="toIndex">The new index of the item</param>
            <returns>The source list</returns>
        </member>
        <member name="M:TotalApi.Utils.Extensions.CollectionBaseExtension.ToObservableCollection``1(System.Collections.Generic.IEnumerable{``0},TotalApi.Utils.NotifyCollectionChangedEventHandlerEx,System.Boolean)">
            <summary>
            Creates an ObservableCollectionEx from <paramref name="source"/>.
            </summary>
            <param name="source">Source enumeration</param>
            <param name="onCollectionChanged">Callback method fired on collection changed.</param>
            <param name="totalSubscription">Sets whether the subscription must be applied to child INotifyPropertyChanged-based objects of the collection</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Utils.Extensions.CollectionBaseExtension.ToObservableCollection``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,TotalApi.Utils.NotifyCollectionChangedEventHandlerEx,System.Boolean)">
            <summary>
            Creates an ObservableCollectionEx from <paramref name="source"/>.
            </summary>
            <param name="source">Source enumeration</param>
            <param name="onCollectionChanged">Callback method fired on collection changed.</param>
            <param name="totalSubscription">Sets whether the subscription must be applied to child INotifyPropertyChanged-based objects of the collection</param>
            <returns></returns>
        </member>
        <member name="E:TotalApi.Utils.Extensions.DataRowExtension.OnGetFieldValue">
            <summary>
            Event is invoked after field value was read
            </summary>
        </member>
        <member name="E:TotalApi.Utils.Extensions.DataRowExtension.OnSetFieldValue">
            <summary>
            Event is invoked before field value is written
            </summary>
        </member>
        <member name="F:TotalApi.Utils.Extensions.DataRowExtension.TrimStringValueExtendedPropertyName">
            <summary>
            If DataTable has extended property of this name - its value sets TrimStringValues for string data of this table
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.DataRowExtension.InitWithDefaultValues(System.Data.DataRow,System.Boolean,System.Type[])">
            <summary>
            Fill all DBNull-valued columns with default value of their type.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.DictionaryExtension.GetOfType``1(System.Collections.IDictionary,System.Object,``0)">
            <summary>
            Gets value of specified key from dictionary. If no key contains in dictionary - returns default value
            </summary>
            <typeparam name="TValue">Type of result</typeparam>
            <param name="self">Dictionary object</param>
            <param name="key">Key value</param>
            <param name="defValue">Default value</param>
        </member>
        <member name="M:TotalApi.Utils.Extensions.DictionaryExtension.Get``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Gets value of specified key from strong typed dictionary. If no key contains in dictionary - returns default value
            </summary>
            <typeparam name="TKey">Type of key</typeparam>
            <typeparam name="TValue">Type of result</typeparam>
            <param name="self">Dictionary object</param>
            <param name="key">Key value</param>
            <param name="defValue">Default value</param>
            <author>Lion</author>
        </member>
        <member name="M:TotalApi.Utils.Extensions.DictionaryExtension.GetCache``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1},System.Boolean)">
            <summary>
            Gets value from cache dictionary. If key not found in dictionary - its value will be created and put into one.
            </summary>
            <typeparam name="TKey">Type of key</typeparam>
            <typeparam name="TValue">Type of result</typeparam>
            <param name="self">Dictionary object</param>
            <param name="key">Key value</param>
            <param name="createValue">The new value factory</param>
            <param name="skipNulls">Do not store null values to cache</param>
            <author>Lion</author>
        </member>
        <member name="M:TotalApi.Utils.Extensions.EnumerableExtension.Delete``1(``0[],System.Func{``0,System.Boolean})">
            <summary>
            Removing array items by condition 
            </summary>
            <returns>Result is new List</returns>
        </member>
        <member name="M:TotalApi.Utils.Extensions.EnumerableExtension.Delete``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Removing list items by condition from generic list passed as this parameter
            </summary>
            <returns>The same list</returns>
        </member>
        <member name="M:TotalApi.Utils.Extensions.EnumerableExtension.DeleteUntyped``1(System.Collections.IList,System.Func{``0,System.Boolean})">
            <summary>
            Removing list items by condition from non-generic list passed as this parameter
            </summary>
            <returns>The same list</returns>
        </member>
        <member name="M:TotalApi.Utils.Extensions.EnumerableExtension.ForEach``1(``0[],System.Action{``0})">
            <summary>
            Enumeration array items
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.EnumerableExtension.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Enumeration IEnumerable items 
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.EnumerableExtension.ForEach``1(System.Collections.IEnumerable,System.Action{``0})">
            <summary>
            Enumeration IEnumerable items of specified type
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.EnumerableExtension.Find``1(System.Collections.ICollection,System.Func{``0,System.Boolean})">
            <summary>
            Find first element of specified type satisfied given condition. If such element not found returns null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Utils.Extensions.EnumerableExtension.Split``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Делит входящую коллекцию на набор коллекций исходя из разделителя
            </summary>
            <typeparam name="T">Тип данных коллекции</typeparam>
            <param name="list">Исходная коллекция</param>
            <param name="divider">Разделитель</param>
            <returns>Результирующий набор</returns>
        </member>
        <member name="M:TotalApi.Utils.Extensions.EnumerableExtension.AddRangeEx``2(``0,System.Collections.Generic.IEnumerable{``1},System.Func{``1,System.Boolean})">
            <summary>
            Adds the elements of the specified collection to the end of the <paramref name="list"/>.
            </summary>
            <param name="list">The collection whose elements should be added to the end of the <see cref="T:System.Collections.Generic.List`1"/>. The collection itself cannot be null, but it can contain elements that are null, if type <typeparamref name="TClass"/> is a reference type.</param><exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
            <param name="collection">The collection whose elements should be added to the end of the <see cref="T:System.Collections.Generic.List`1"/>. The collection itself cannot be null, but it can contain elements that are null, if type <typeparamref name="TClass"/> is a reference type.</param>
            <param name="canAdd">Implements the indicatior whether the item can be added or not.</param>
        </member>
        <member name="M:TotalApi.Utils.Extensions.EnumExtension.IsSet(System.Enum,System.Enum,System.Boolean)">
            <summary>
            Determines whether enum has testing flags.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.EnumExtension.IsNotSet(System.Enum,System.Enum,System.Boolean)">
            <summary>
            Determines whether enum hasn't testing flags.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.EnumExtension.Has(System.Enum,System.Enum)">
            <summary>
            Determines whether enum has at least one of testing flags
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.EnumExtension.Include``1(System.Enum,``0)">
            <summary>
            Add flags to enum. Equal to Add().
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.EnumExtension.Add``1(System.Enum,``0)">
            <summary>
            Add flags to enum. Equal to Include().
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.EnumExtension.Exclude``1(System.Enum,``0)">
            <summary>
            Remove flags from enum. Equal to Remove(). 
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.EnumExtension.Remove``1(System.Enum,``0)">
            <summary>
            Remove flags from enum. Equal to Exclude().
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.EnumExtension.SetFlags``1(System.Enum,``0,System.Boolean)">
            <summary>
            Set (add or remove) flags to/from enum. Parameter setFlag determines whether the flags would be added or removed.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.EnumExtension.GetDescription(System.Enum)">
            <summary>
            Returns value of the enum item returned by enum type converter or LocalizableDescriptionAttribute or DescriptionAttribute of this item.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.EnumExtension.GetCustomAttributeEx``1(System.Enum)">
            <summary>
            Convert enum item to the value of specified type. <para></para>
            To convert enum value EnumValueAttribute, EnumValue&lt;TYPE&gt;Attribute, LocalizableDescriptionAttribute and DescriptionAttribute are used.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.EnumExtension.GetCustomAttributes``1(System.Enum)">
            <summary>
            Convert enum item to the value of specified type. <para></para>
            To convert enum value EnumValueAttribute, EnumValue&lt;TYPE&gt;Attribute, LocalizableDescriptionAttribute and DescriptionAttribute are used.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.EnumExtension.EnumTo``1(System.Enum,``0)">
            <summary>
            Convert enum item to the value of specified type. <para></para>
            To convert enum value EnumValueAttribute, EnumValue&lt;TYPE&gt;Attribute, LocalizableDescriptionAttribute and DescriptionAttribute are used.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.EnumExtension.ToEnum``1(System.String,System.Boolean,``0)">
            <summary>
            Convert string value to enum item. <para></para>
            To convert enum value EnumValueAttribute, LocalizableDescriptionAttribute and DescriptionAttribute are used.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.EnumExtension.ToEnum``1(System.Int32,``0)">
            <summary>
            Convert int value to enum item. <para></para>
            To convert enum value EnumValueAttribute, EnumValueIntAttribute, LocalizableDescriptionAttribute and DescriptionAttribute are used.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.EnumExtension.ToEnum``1(System.Char,``0)">
            <summary>
            Convert char value to enum item. <para></para>
            To convert enum value EnumValueAttribute, EnumValueCharAttribute, LocalizableDescriptionAttribute and DescriptionAttribute are used.
            </summary>
        </member>
        <member name="P:TotalApi.Utils.Extensions.FileSystemExtension.DefaultBaseDirIsAppDir">
            <summary>
            Gets or sets whether application directory is default directory for expanding relative pathes.
            If value is false default directory is current directory.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.FileSystemExtension.GetCurrentDirectory(System.Boolean)">
            <summary>
            Returns current directory taking into account the value of property DefaultBaseDirIsAppDir.
            If current directory is empty application directory will be current one anyway.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.FileSystemExtension.ExtractDirectory(System.String,System.Boolean,System.Char)">
            <summary>
            Extracts directory from path
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.FileSystemExtension.ExtractFileName(System.String)">
            <summary>
            Extracts file name from path (supports long file pathes > 260 characters)
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.FileSystemExtension.ExtractOnlyFileName(System.String)">
            <summary>
            Extracts file name without extension from path (supports long file pathes > 260 characters)
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.FileSystemExtension.GetRelativePath(System.String,System.String)">
            <summary>
            Returns relative path from specified base directory.
            </summary>
            <param name="path">Source path</param>
            <param name="basePath">Base path</param>
            <returns>Relative path</returns>
        </member>
        <member name="M:TotalApi.Utils.Extensions.FileSystemExtension.ExpandPath(System.String,System.String)">
            <summary>
            Expand relative path to full path from specified base path.<para></para>
            <c>%AppDir%</c> will be expanded from Apllication Exe Directory <para>
            <c>%MyDocuments%</c> will be expanded from User Documents Folder (Environment.SpecialFolder.MyDocuments) </para>
            <c>%AppData%</c> will be expanded from User application roaming data (Environment.SpecialFolder.ApplicationData - %UserProfile%\AppData\Roaming for Vista/Win7) <para>
            <c>%CommonAppData%</c> will be expanded from all users application roaming data (Environment.SpecialFolder.CommonApplicationData) </para>
            <c>%Temp%</c> will be expanded from User temporary folder <para> </para>
            <c>%AppTemp%</c> will be expanded from Application temporary folder <see cref="P:TotalApi.Utils.Extensions.TempFiles.DefaultTempDir"/>.<para> </para>
            </summary>
        </member>
        <member name="F:TotalApi.Utils.Extensions.FileSystemExtension.GetCustomVariableValue">
            <summary>
            Use for method ExpandPath - you can overload substituting %variable% values in input path 
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.FileSystemExtension.DeleteDirectory(System.String,System.Boolean)">
            <summary>
            Delete directory and all files and subdirectories in it.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.FileSystemExtension.IsNetworkPath(System.String)">
            <summary>
            Checks whether the path is network path.
            </summary>
            <param name="path">Checking path.</param>
            <returns>Returns true if path is network one.</returns>
        </member>
        <member name="M:TotalApi.Utils.Extensions.FileSystemExtension.GetShortFileName(System.String)">
            <summary>
            Gets short name of existing file. If file doesn't exist returns empty string
            </summary>
            <param name="fileName">Long file name</param>
        </member>
        <member name="M:TotalApi.Utils.Extensions.FileSystemExtension.CreateDirectory(System.String,System.Boolean)">
            <summary>
            Creates directory if it doesn't exist. Returns short name of the directory and set access right if <paramref name="setAllUsersAccess"/> set to true.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.FileSystemExtension.ReadAllBytes(System.String)">
            <summary>
            Read all file content into array of bytes. Supports long file pathes > 260 characters
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.FileSystemExtension.CheckFileName(System.String,System.Boolean,System.Int32)">
            <summary>
            Check file name unique and/or file name length
            </summary>
            <param name="fileName">Source file name</param>
            <param name="autoCreateUnique">Create unique file name if file exists</param>
            <param name="maxFileNameLength">Limit file name length</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Utils.Extensions.FileSystemExtension.CheckFileName(System.String,System.Int32)">
            <summary>
            Check file name length
            </summary>
            <param name="fileName">Source file name</param>
            <param name="maxFileNameLength">Limit file name length</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Utils.Extensions.GraphicsExtension.DrawRoundedRectangle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Int32,System.Drawing.Pen,System.Drawing.Brush)">
            <summary>
            Draws rectangle with rounded corners
            </summary>
            <param name="gfx">Drawing graphic object</param>
            <param name="bounds">Bounds of rectangle</param>
            <param name="cornerRadius">Radius of the corners</param>
            <param name="drawPen">Drawing pen. Must be not null.</param>
            <param name="fillBrush">Filling brush. Must be not null.</param>
        </member>
        <member name="M:TotalApi.Utils.Extensions.GraphicsExtension.DrawRoundedRectangle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Int32,System.Drawing.Pen,System.Drawing.Color)">
            <summary>
            Draws rectangle with rounded corners
            </summary>
            <param name="gfx">Drawing graphic object</param>
            <param name="bounds">Bounds of rectangle</param>
            <param name="cornerRadius">Radius of the corners</param>
            <param name="drawPen">Drawing pen. Must be not null.</param>
            <param name="fillColor">Color of filling solid brush</param>
        </member>
        <member name="M:TotalApi.Utils.Extensions.GraphicsExtension.ToImage(System.Byte[])">
            <summary>
            Converts byte array to image.
            </summary>
            <param name="bytes">Source byte array</param>
        </member>
        <member name="M:TotalApi.Utils.Extensions.GraphicsExtension.ToBytes(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Converts image to byte array.
            </summary>
            <param name="image">Source image</param>
            <param name="imageFormat">Saving image format</param>
        </member>
        <member name="M:TotalApi.Utils.Extensions.GraphicsExtension.Resize(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Resizes source image to bitmap with defined size with saving aspect ration.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.GraphicsExtension.TrimBitmap(System.IO.Stream)">
            <summary>
            Removes whole transparent area around the image
            </summary>
            <param name="source">Source bitmap stream</param>
        </member>
        <member name="M:TotalApi.Utils.Extensions.GraphicsExtension.TrimBitmap(System.Drawing.Bitmap)">
            <summary>
            Removes whole transparent area around the image
            </summary>
            <param name="source">Source bitmap</param>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ObjectExtension.IsNull``1(``0)">
            <summary>
            Checks whether parameter is null or DBNull. For not-nullable types returns false.
            </summary>
            <typeparam name="T">Type of parameter</typeparam>
            <param name="obj">Checking parameter</param>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ObjectExtension.IsNotNull``1(``0)">
            <summary>
            Checks whether parameter is not null or DBNull. For not-nullable types returns true.
            </summary>
            <typeparam name="T">Type of parameter</typeparam>
            <param name="obj">Checking parameter</param>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ObjectExtension.AsString(System.Object,System.String)">
            <summary>
            Converts object to string. Returns default value for null objects.
            </summary>
            <param name="obj">Converting object</param>
            <param name="defValue">Value that will be return if object is null</param>
            <returns>String representation of object</returns>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ObjectExtension.AsInt(System.Object,System.Int32)">
            <summary>
            Converts object to integer. Returns default value for null objects.
            </summary>
            <param name="obj">Converting object</param>
            <param name="defValue">Value that will be return if object is null</param>
            <returns>Integer representation of object</returns>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ObjectExtension.AsInt64(System.Object,System.Int64)">
            <summary>
            Converts object to long integer. Returns default value for null objects.
            </summary>
            <param name="obj">Converting object</param>
            <param name="defValue">Value that will be return if object is null</param>
            <returns>Integer representation of object</returns>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ObjectExtension.AsFloat(System.Object,System.Single)">
            <summary>
            Converts object to float. Returns default value for null objects.
            </summary>
            <param name="obj">Converting object</param>
            <param name="defValue">Value that will be return if object is null</param>
            <returns>Float representation of object</returns>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ObjectExtension.AsDouble(System.Object,System.Double)">
            <summary>
            Converts object to double. Returns default value for null objects.
            </summary>
            <param name="obj">Converting object</param>
            <param name="defValue">Value that will be return if object is null</param>
            <returns>Double representation of object</returns>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ObjectExtension.AsDecimal(System.Object,System.Decimal)">
            <summary>
            Converts object to decimal. Returns default value for null objects.
            </summary>
            <param name="obj">Converting object</param>
            <param name="defValue">Value that will be return if object is null</param>
            <returns>Decimal representation of object</returns>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ObjectExtension.AsBool(System.Object,System.Boolean)">
            <summary>
            Converts object to boolean. Returns default value for null objects.
            </summary>
            <param name="obj">Converting object</param>
            <param name="defValue">Value that will be return if object is null</param>
            <returns>Boolean representation of object</returns>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ObjectExtension.AsDateTime(System.Object,System.DateTime)">
            <summary>
            Converts object to date and time. Returns default value for null objects. 
            Date time kind is set to DateTimeKind.Unspecified to be time zone undepended.
            </summary>
            <param name="obj">Converting object</param>
            <param name="defValue">Value that will be return if object is null</param>
            <returns>Time zone undepended DateTime representation of object.</returns>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ObjectExtension.RoundDate(System.DateTime)">
            <summary>
            Converts date with time to date without time.
            If time less than 12:00 - returns only date without time, otherwise returns date + 1 day without time.
            Date time kind is set to DateTimeKind.Unspecified to be time zone undepended.
            </summary>
            <returns>Time zone undepended date representation of DateTime.</returns>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ObjectExtension.AsDate(System.Object,System.DateTime)">
            <summary>
            Converts object to date without time. Returns default value for null objects.
            If time less than 12:00 - returns only date without time, otherwise returns date + 1 day without time.
            Date time kind is set to DateTimeKind.Unspecified to be time zone undepended.
            </summary>
            <param name="obj">Converting object</param>
            <param name="defValue">Value that will be return if object is null</param>
            <returns>Time zone undepended date representation of object.</returns>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ObjectExtension.As``1(System.Object,``0)">
            <summary>
            Converts object to specified type. Returns default value for null objects.
            </summary>
            <typeparam name="T">Type of result</typeparam>
            <param name="obj">Converting object</param>
            <param name="defValue">Value that will be return if object is null</param>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ObjectExtension.AsType(System.Object,System.Type,System.Object)">
            <summary>
            Converts object to specified type. Returns default value for null objects.
            </summary>
            <param name="obj">Converting object</param>
            <param name="type">Type of result</param>
            <param name="defValue">Value that will be return if object is null</param>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ObjectExtension.In``1(``0,``0[])">
            <summary>
            Checks whether the value in spesified set
            </summary>
            <typeparam name="T">Type of value and set</typeparam>
            <param name="self">Checking value</param>
            <param name="list">Checking set</param>
            <returns>Returns true if value in set and false otherwise</returns>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ObjectExtension.NotIn``1(``0,``0[])">
            <summary>
            Checks whether the value not in spesified set
            </summary>
            <typeparam name="T">Type of value and set</typeparam>
            <param name="self">Checking value</param>
            <param name="list">Checking set</param>
            <returns>Returns true if value not in set and false otherwise</returns>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ObjectExtension.In``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Checks whether the value in spesified set
            </summary>
            <typeparam name="T">Type of value and set</typeparam>
            <param name="self">Checking value</param>
            <param name="list">Checking set</param>
            <returns>Returns true if value in set and false otherwise</returns>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ObjectExtension.NotIn``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Checks whether the value not in spesified set
            </summary>
            <typeparam name="T">Type of value and set</typeparam>
            <param name="self">Checking value</param>
            <param name="list">Checking set</param>
            <returns>Returns true if value not in set and false otherwise</returns>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ObjectExtension.Limit(System.Int32,System.Int32,System.Int32)">
            <summary>
            Limits specified value with minimum and maximum values. 
            Returns <paramref name="minValue"/> if source value less than <paramref name="minValue"/>.
            Returns <paramref name="maxValue"/> if source value greater than <paramref name="maxValue"/>.
            </summary>
            <param name="self">Operationg value</param>
            <param name="minValue">Minimum value</param>
            <param name="maxValue">Maximum value</param>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ObjectExtension.Limit(System.Int64,System.Int64,System.Int64)">
            <summary>
            Limits specified value with minimum and maximum values. 
            Returns <paramref name="minValue"/> if source value less than <paramref name="minValue"/>.
            Returns <paramref name="maxValue"/> if source value greater than <paramref name="maxValue"/>.
            </summary>
            <param name="self">Operationg value</param>
            <param name="minValue">Minimum value</param>
            <param name="maxValue">Maximum value</param>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ObjectExtension.LimitMin(System.Int32,System.Int32)">
            <summary>
            Limits specified value with minimum value. 
            Returns <paramref name="minValue"/> if source value less than <paramref name="minValue"/>.
            </summary>
            <param name="self">Operationg value</param>
            <param name="minValue">Minimum value</param>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ObjectExtension.LimitMin(System.Int64,System.Int64)">
            <summary>
            Limits specified value with minimum value. 
            Returns <paramref name="minValue"/> if source value less than <paramref name="minValue"/>.
            </summary>
            <param name="self">Operationg value</param>
            <param name="minValue">Minimum value</param>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ObjectExtension.LimitMax(System.Int32,System.Int32)">
            <summary>
            Limits specified value with maximum values. 
            Returns <paramref name="maxValue"/> if source value greater than <paramref name="maxValue"/>.
            </summary>
            <param name="self">Operationg value</param>
            <param name="maxValue">Maximum value</param>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ObjectExtension.LimitMax(System.Int64,System.Int64)">
            <summary>
            Limits specified value with maximum values. 
            Returns <paramref name="maxValue"/> if source value greater than <paramref name="maxValue"/>.
            </summary>
            <param name="self">Operationg value</param>
            <param name="maxValue">Maximum value</param>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ObjectExtension.IsPropsEquals(System.Object,System.Object,System.Boolean,System.String[])">
            <summary>
            <para>Сравнение двух объектов, путем сравнения значений каждого свойства объета.</para>
            <para>Проверяются только к public свойства.</para>
            </summary>
            <author>Lion</author>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ObjectExtension.IsFieldsEquals(System.Object,System.Object)">
            <summary>
            <para>Сравнение двух объектов, путем сравнения значений каждого поля объета.</para>
            <para>Проверяются только к public поля.</para>
            </summary>
            <author>Lion</author>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ObjectExtension.IsEquals(System.Object,System.Object)">
            <summary>
            Compare object with defined object 
            </summary>
            <param name="self">First object</param>
            <param name="obj">Second object</param>
            <returns>True if objects is equals</returns>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ObjectExtension.IsEqualsData(System.Object,System.Object)">
            <summary>
            <para>Сравнение двух объектов, путем сравнения значений каждого поля и свойства объета.</para>
            <para>Проверяются только к public поля и свойства.</para>
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ObjectExtension.FieldByName(System.Object,System.String,System.Boolean,System.Boolean)">
            <summary>
            <para>(c) LionSoft</para>
            <para>Получить ссылку на поле объекта по имени.</para>
            <para>Если такого поля нет - возвращает null.</para>
            </summary>
            <author>LionSoft</author>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ObjectExtension.GetFieldValue(System.Object,System.String,System.Boolean,System.Boolean)">
            <summary>
            <para>(c) LionSoft</para>
            <para>Get value of object field by its name.</para>
            <para>If field doesn't exists - return null.</para>
            </summary>
            <author>LionSoft</author>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ObjectExtension.SetFieldValue(System.Object,System.String,System.Object,System.Boolean,System.Boolean)">
            <summary>
            <para>(c) LionSoft</para>
            <para>Set value of object public field by its name.</para>
            <para>If field doesn't exists or readonly - do nothing.</para>
            <para>Return previous field value.</para>
            </summary>
            <param name="self">Working object</param>
            <param name="fieldName">Field name</param>
            <param name="fieldValue">Field value</param>
            <param name="includeNonPublic">If true method can change non public fields.</param>
            <param name="includeInherited">If true method can change inherited fields. </param>
            <returns>Return previous field value.</returns>
            <author>LionSoft</author>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ObjectExtension.CopyFieldsTo``1(System.Object,``0)">
            <summary>
            <para>(c) LionSoft</para>
            <para>Копирование значений простых полей с одинаковыми именами в другой объект.</para>
            <para>Копируются только public поля.</para>
            </summary>
            <author>LionSoft</author>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ObjectExtension.CopyFieldsFrom``1(``0,System.Object)">
            <summary>
            <para>(c) LionSoft</para>
            <para>Копирование значений простых полей с одинаковыми именами из другого объекта.</para>
            <para>Копируются только public поля.</para>
            </summary>
            <author>LionSoft</author>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ObjectExtension.PropByName(System.Object,System.String,System.Boolean,System.Boolean)">
            <summary>
            <para>(c) LionSoft</para>
            <para>Получить ссылку на public свойство объекта по имени.</para>
            <para>Если такого свойства нет - возвращает null.</para>
            </summary>
            <author>LionSoft</author>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ObjectExtension.GetPropValue(System.Object,System.String,System.Boolean,System.Boolean)">
            <summary>
            <para>(c) LionSoft</para>
            <para>Get value of object property by its name.</para>
            <para>If property doesn't exists or writeonly - return null.</para>
            </summary>
            <author>LionSoft</author>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ObjectExtension.SetPropValue(System.Object,System.String,System.Object,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <para>(c) LionSoft</para>
            <para>Set value of object public property by its name.</para>
            <para>If property doesn't exists or readonly - do nothing.</para>
            <para>Return previous property value if can.</para>
            </summary>
            <param name="self">Working object</param>
            <param name="propName">Property name</param>
            <param name="propValue">Property value</param>
            <param name="forcedWrite">If false - value sets only if properties has different values</param>
            <param name="includeNonPublic">If true method can change non public properties.</param>
            <param name="includeInherited">If true method can change inherited properties.</param>
            <returns>Return previous value of property if can.</returns>
            <author>LionSoft</author>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ObjectExtension.CopyPropsTo``1(System.Object,``0,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            <para>(c) LionSoft</para>
            <para>Копирование значений простых свойств с одинаковыми именами в другой объект.</para>
            <para>Копируются только public свойства.</para>
            </summary>
            <param name="source">Source object</param>
            <param name="target">Target object</param>
            <param name="forcedCopy">If false - value copies only if properties has different values</param>
            <param name="useXmlIgnoreAttribute">If true - properties with XmlIgnore attribute will be skipped</param>
            <param name="skipAttributeNames">List of the attributes name which copying will be skipped</param>
            <author>Lion</author>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ObjectExtension.CopyPropsFrom``1(``0,System.Object,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            <para>(c) LionSoft</para>
            <para>Копирование значений простых свойств с одинаковыми именами из другого объекта.</para>
            <para>Копируются только public свойства.</para>
            </summary>
            <param name="target">Target object</param>
            <param name="source">Source object</param>
            <param name="forcedCopy">If false - value copies only if properties has different values</param>
            <param name="useXmlIgnoreAttribute">If true - properties with XmlIgnore attribute will be skipped</param>
            <param name="skipAttributeNames">List of the attributes name which copying will be skipped</param>
            <author>Lion</author>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ObjectExtension.CopyTo``1(System.Object,``0)">
            <summary>
            <para>(c) LionSoft</para>
            <para>Копирование значений простых полей и свойств с одинаковыми именами в другой объект.</para>
            <para>Копируются только public поля и свойства.</para>
            </summary>
            <author>Lion</author>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ObjectExtension.CopyTo``1(System.Object)">
            <summary>
            <para>(c) LionSoft</para>
            <para>Копирование значений простых полей и свойств с одинаковыми именами в другой объект.</para>
            <para>Копируются только public поля и свойства.</para>
            </summary>
            <author>Lion</author>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ObjectExtension.CopyFrom``1(``0,System.Object)">
            <summary>
            <para>(c) LionSoft</para>
            <para>Копирование значений простых свойств с одинаковыми именами из другого объекта.</para>
            <para>Копируются только к public поля.</para>
            </summary>
            <author>Lion</author>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ObjectExtension.SameText(System.Object,System.Object)">
            <summary>
            Сравнивает два объекта как строки без учета регистра
            </summary>
            <param name="self"></param>
            <param name="obj"></param>
            <returns></returns>
            <author>Lion</author>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ProcessExtensions.Parent(System.Diagnostics.Process)">
            <summary>
            Gets parent process of current process
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ProcessExtensions.Owner(System.Diagnostics.Process)">
            <summary>
            Gets parent process of current process in format DOMAIN\USERNAME
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ProcessExtensions.GetApplicationType(System.Diagnostics.Process)">
            <summary>
            Determines type of specified application
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ProcessExtensions.IsConsole(System.Diagnostics.Process)">
            <summary>
            Gets whether current process is console application
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ProcessExtensions.IsService(System.Diagnostics.Process)">
            <summary>
            Gets whether current process is windows service application
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ProcessExtensions.IsWow64(System.Diagnostics.Process)">
            <summary>
            Gets whether process is x64
            </summary>
            <param name="process"></param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ReflectionExtension.GetEventField(System.Type,System.String)">
            <summary>
            Returns <see cref="T:System.Reflection.FieldInfo"/> assigned with specified <paramref name="eventName"/>.
            </summary>
            <param name="type">Source type.</param>
            <param name="eventName">Event name.</param>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ReflectionExtension.GetEventInvocations(System.Object,System.String)">
            <summary>
            Returns array of all delegates assigned with the event with specified <paramref name="eventName"/>.
            </summary>
            <param name="obj">Source object instance.</param>
            <param name="eventName">Event name.</param>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ReflectionExtension.ClearEventInvocations(System.Object,System.String)">
            <summary>
            Clears all assigned event invocations. 
            </summary>
            <param name="obj">Source object instance.</param>
            <param name="eventName">Event name.</param>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ReflectionExtension.CopyNotificationEvents``1(``0,``0,System.Boolean)">
            <summary>
            Copies all assigned events <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> of <paramref name="source"/> to <paramref name="target"/> object if the types is equals.
            </summary>
            <param name="source">Source object</param>
            <param name="target">Target object</param>
            <param name="totalSubscription">If <c>true</c> the method will be called recursively for inner object instances.</param>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ReflectionExtension.GetMemberInfo(System.Linq.Expressions.Expression)">
            <summary>
            Converts an expression into a <see cref="T:System.Reflection.MemberInfo"/>.
            
            </summary>
            <param name="expression">The expression to convert.</param>
            <returns>
            The member info.
            </returns>
        </member>
        <member name="M:TotalApi.Utils.Extensions.ReflectionExtension.FindInnerException(System.Exception,System.Type)">
            <summary>
            Searches for inner exception of a given type
            </summary>
            <param name="ex">Exception to be checked</param>
            <param name="exceptionType">Type of the exception</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Utils.Extensions.StringExtension.IsEmpty(System.String,System.Boolean)">
            <summary>
            Checks whether string is null or empty.
            </summary>
            <param name="s">Testing string</param>
            <param name="trimString">Makes trim() before testing</param>
        </member>
        <member name="M:TotalApi.Utils.Extensions.StringExtension.IsNotEmpty(System.String,System.Boolean)">
            <summary>
            Checks whether string is not null or empty.
            </summary>
            <param name="s">Testing string</param>
            <param name="trimString">Makes trim() before testing</param>
        </member>
        <member name="M:TotalApi.Utils.Extensions.StringExtension.LeftPart(System.String,System.Int32)">
            <summary>
            Returns left part of string defined length. If string length is less than parameter length - returns whole string.
            </summary>
            <param name="s">Source string</param>
            <param name="length">Length of the left part.</param>
        </member>
        <member name="M:TotalApi.Utils.Extensions.StringExtension.RightPart(System.String,System.Int32)">
            <summary>
            Returns right part of string defined length. If string length is less than parameter length - returns whole string.
            </summary>
            <param name="s">Source string</param>
            <param name="length">Length of the right part.</param>
        </member>
        <member name="M:TotalApi.Utils.Extensions.StringExtension.SameText(System.String,System.String)">
            <summary>
            Compares two strings ignoring case according current culture.
            </summary>
            <param name="str1">First string - can be null</param>
            <param name="str2">Second string - can be null</param>
        </member>
        <member name="M:TotalApi.Utils.Extensions.StringExtension.Fmt(System.String,System.Object[])">
            <summary>
            Replaces the format item in a specified string with the string representation of a corresponding object in a specified array.
            </summary>
            <param name="format">A composite format string</param>
            <param name="args">An object array that contains zero or more objects to format</param>
        </member>
        <member name="M:TotalApi.Utils.Extensions.StringExtension.FmtSql(System.String,System.Object[])">
            <summary>
            Replaces the format item in a specified query string with the string representation of a corresponding object in a specified array in sql format.
            </summary>
            <param name="sql">A composite format query string</param>
            <param name="args">An object array that contains zero or more parameters to format</param>
        </member>
        <member name="M:TotalApi.Utils.Extensions.StringExtension.Duplicate(System.String,System.Int32)">
            <summary>
            Duplicates specified string <paramref name="count"/> times.
            </summary>
            <param name="str">String to duplicate</param>
            <param name="count">Duplicate counter</param>
        </member>
        <member name="M:TotalApi.Utils.Extensions.StringExtension.QuotedStr(System.String,System.Char)">
            <summary>
            Quotes string with specified quote char
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.StringExtension.DequotedStr(System.String,System.String)">
            <summary>
            Dequotes string if it whole is quoted with quotes that is any char in <paramref name="quotes"/> string.<para></para>
            If not whole string is quoted or quotation is wrong - returns source string without any changing.<para></para>
            </summary>
            <param name="s">Source string</param>
            <param name="quotes">Quotes set</param>
        </member>
        <member name="M:TotalApi.Utils.Extensions.StringExtension.Encrypt(System.String,System.String,System.Boolean)">
            <summary>
            Encrypts string with DES
            </summary>
            <param name="str">Source string</param>
            <param name="salt">Secure salt value</param>
            <param name="ignoreError">If true - returns input string as result when error is raised</param>
        </member>
        <member name="M:TotalApi.Utils.Extensions.StringExtension.Decrypt(System.String,System.String,System.Boolean)">
            <summary>
            Decripts string with DES
            </summary>
            <param name="str">Source string</param>
            <param name="salt">Secure salt value, deffered when encription has made</param>
            <param name="ignoreError">If true - returns input string as result when error is raised</param>
        </member>
        <member name="M:TotalApi.Utils.Extensions.StringExtension.Hash(System.String,System.String,System.Boolean)">
            <summary>
            Hash string with MD5
            </summary>
            <param name="str">Source string</param>
            <param name="salt">Secure salt value, deffered when hashing has made</param>
            <param name="ignoreError">If true - returns input string as result when error is raised</param>
        </member>
        <member name="M:TotalApi.Utils.Extensions.StringExtension.ReplaceText(System.String,System.String,System.String)">
            <summary>
            Заменяет подстроку в строке без учета регистра (используются регекспы)
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.StringExtension.ReplaceRegex(System.String,System.String,System.String,System.Boolean,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Заменяет regexp-паттерны в строке на указанное значение c подстановкой вместо {0}/{1}/../{n} соответствующих значений групп.
            <para>Sample:</para>
            <code>
                "\[(span|div)(.*)\]".ReplaceRegex("[a]") - заменит  [span 123] и [div xxx] на [a]
                "\[(span|div)(.*)\]".ReplaceRegex("--{0}{1}--") - заменит  [span 123] и [div xxx] на --span 123-- и --div xxx-- соответственно
            </code>
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.StringExtension.ReplaceRegex(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Boolean,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Заменяет regexp-паттерны в строке на значение, отдаваемое функцией.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.StringExtension.WildcardToRegex(System.String)">
            <summary>
            Converts wildcard pattern to regex pattern
            </summary>
            <param name="pattern">Wild card pattern</param>
            <returns>Regex pattern</returns>
        </member>
        <member name="M:TotalApi.Utils.Extensions.StringExtension.IsMatch(System.String,System.String,System.Boolean)">
            <summary>
            Checks whether string is matched determines wildcard pattern. 
            </summary>
            <param name="input">Testing string</param>
            <param name="pattern">Wildcard pattern - can use * or ?</param>
            <param name="ignoreCase">Ignore case flag</param>
        </member>
        <member name="M:TotalApi.Utils.Extensions.StringExtension.ReplaceChars(System.String,System.String,System.String)">
            <summary>
            Replace chars in the string str. oldChars - set of chars to be replaced with appropriate char in newChars.
            <para>
            <example>
            str = "3a2q31", oldChars = '123', newChars = 'abc', result = "cabqca"
            </example>
            </para>
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.TaskEx.ContinueWithUI(System.Threading.Tasks.Task,System.Action{System.Threading.Tasks.Task})">
            <summary>
            Continues the task in the UI thread.<para></para>
            You should initialize <see cref="T:TotalApi.Utils.ThreadInvoker"/> before using this method.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.TaskEx.ContinueWithUI``1(System.Threading.Tasks.Task{``0},System.Action{System.Threading.Tasks.Task{``0}})">
            <summary>
            Continues the task in the UI thread.<para></para>
            You should initialize <see cref="T:TotalApi.Utils.ThreadInvoker"/> before using this method.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.TaskEx.Run(System.Threading.Tasks.TaskScheduler,System.Action)">
            <summary>
            Starts the task in the specified task scheduler w/o cancellation ability.
            </summary>
            <param name="scheduler">Task scheduler for the starting task.</param>
            <param name="action">The action of the starting task.</param>
        </member>
        <member name="M:TotalApi.Utils.Extensions.TaskEx.Run(System.Threading.Tasks.TaskScheduler,System.Action,System.Threading.CancellationToken)">
            <summary>
            Starts the task in the specified task scheduler with cancellation ability.
            </summary>
            <param name="scheduler">Task scheduler for the starting task.</param>
            <param name="action">The action of the starting task.</param>
            <param name="cancellationToken">Cancellation token to cancel the task.</param>
        </member>
        <member name="M:TotalApi.Utils.Extensions.TaskEx.Run``1(System.Threading.Tasks.TaskScheduler,System.Func{``0})">
            <summary>
            Starts the task in the specified task scheduler w/o cancellation ability.
            </summary>
            <param name="scheduler">Task scheduler for the starting task.</param>
            <param name="action">The action of the starting task.</param>
        </member>
        <member name="M:TotalApi.Utils.Extensions.TaskEx.Run``1(System.Threading.Tasks.TaskScheduler,System.Func{``0},System.Threading.CancellationToken)">
            <summary>
            Starts the task in the specified task scheduler with cancellation ability.
            </summary>
            <param name="scheduler">Task scheduler for the starting task.</param>
            <param name="action">The action of the starting task.</param>
            <param name="cancellationToken">Cancellation token to cancel the task.</param>
        </member>
        <member name="M:TotalApi.Utils.Extensions.TaskEx.RunSta(System.Action)">
            <summary>
            Starts the task in a STA thread using <see cref="T:TotalApi.Utils.Tasks.StaTaskScheduler"/>.<see cref="P:TotalApi.Utils.Tasks.StaTaskScheduler.Default"/> scheduler.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.TaskEx.RunSta``1(System.Func{``0})">
            <summary>
            Starts the task in a STA thread using <see cref="T:TotalApi.Utils.Tasks.StaTaskScheduler"/>.<see cref="P:TotalApi.Utils.Tasks.StaTaskScheduler.Default"/> scheduler.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.TaskEx.RunSta(System.Action,System.Threading.CancellationToken)">
            <summary>
            Starts the task in a STA thread using <see cref="T:TotalApi.Utils.Tasks.StaTaskScheduler"/>.<see cref="P:TotalApi.Utils.Tasks.StaTaskScheduler.Default"/> scheduler.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.TaskEx.RunSta``1(System.Func{``0},System.Threading.CancellationToken)">
            <summary>
            Starts the task in a STA thread using <see cref="T:TotalApi.Utils.Tasks.StaTaskScheduler"/>.<see cref="P:TotalApi.Utils.Tasks.StaTaskScheduler.Default"/> scheduler.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.TaskEx.RunSingleSta(System.Action)">
            <summary>
            Starts the task in a STA thread using <see cref="T:TotalApi.Utils.Tasks.StaTaskScheduler"/>.<see cref="P:TotalApi.Utils.Tasks.StaTaskScheduler.Default"/> scheduler.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.TaskEx.RunSingleSta``1(System.Func{``0})">
            <summary>
            Starts the task in a STA thread using <see cref="T:TotalApi.Utils.Tasks.StaTaskScheduler"/>.<see cref="P:TotalApi.Utils.Tasks.StaTaskScheduler.Default"/> scheduler.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.TaskEx.RunSingleSta(System.Action,System.Threading.CancellationToken)">
            <summary>
            Starts the task in a STA thread using <see cref="T:TotalApi.Utils.Tasks.StaTaskScheduler"/>.<see cref="P:TotalApi.Utils.Tasks.StaTaskScheduler.Default"/> scheduler.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.TaskEx.RunSingleSta``1(System.Func{``0},System.Threading.CancellationToken)">
            <summary>
            Starts the task in a STA thread using <see cref="T:TotalApi.Utils.Tasks.StaTaskScheduler"/>.<see cref="P:TotalApi.Utils.Tasks.StaTaskScheduler.Default"/> scheduler.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.TaskEx.Run(System.Action,System.Boolean)">
            <summary>
            Создаёт и запускает задачу. Отличие от <c>Task.Factory.StartNew()</c> в том, что используется <see cref="P:System.Threading.Tasks.TaskScheduler.Default"/>.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.TaskEx.Run(System.Action,System.Threading.CancellationToken,System.Boolean,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Создаёт и запускает задачу. Отличие от <c>Task.Factory.StartNew()</c> в том, что используется <see cref="P:System.Threading.Tasks.TaskScheduler.Default"/>.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.TaskEx.RunLong(System.Action,System.Boolean)">
            <summary>
            Создаёт и запускает задачу, которая будет выполняться долго. (с параметром TaskCreationOptions.LongRunning).
            Отличие от <c>Task.Factory.StartNew()</c> в том, что используется <see cref="P:System.Threading.Tasks.TaskScheduler.Default"/>.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.TaskEx.RunLong(System.Action,System.Threading.CancellationToken,System.Boolean,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Создаёт и запускает задачу, которая будет выполняться долго. (с параметром TaskCreationOptions.LongRunning).
            Отличие от <c>Task.Factory.StartNew()</c> в том, что используется <see cref="P:System.Threading.Tasks.TaskScheduler.Default"/>.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.TaskEx.Run``1(System.Func{``0})">
            <summary>
            Создаёт и запускает задачу. Отличие от <c>Task.Factory.StartNew()</c> в том, что используется <see cref="P:System.Threading.Tasks.TaskScheduler.Default"/>.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.TaskEx.Run``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Создаёт и запускает задачу. Отличие от <c>Task.Factory.StartNew()</c> в том, что используется <see cref="P:System.Threading.Tasks.TaskScheduler.Default"/>.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.TaskEx.RunWithContext``1(System.Action{``0},System.Func{``0},System.Boolean)">
            <summary>
            Создаёт и запускает задачу c предварительно созданным контекстом. 
            Отличие от <c>Task.Factory.StartNew()</c> в том, что используется <see cref="P:System.Threading.Tasks.TaskScheduler.Default"/>.
            Метод создания контекста вызывается до запуска задачи. Таким образом в него можно передать потокозависимымые данные.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.TaskEx.RunWithContext``1(System.Action{``0},``0,System.Boolean)">
            <summary>
            Создаёт и запускает задачу c предварительно созданным контекстом. 
            Отличие от <c>Task.Factory.StartNew()</c> в том, что используется <see cref="P:System.Threading.Tasks.TaskScheduler.Default"/>.
            Метод создания контекста вызывается до запуска задачи. Таким образом в него можно передать потокозависимымые данные.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.TaskEx.RunWithContext``1(System.Action{``0},``0,System.Threading.CancellationToken,System.Boolean,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Создаёт и запускает задачу c предварительно созданным контекстом. 
            Отличие от <c>Task.Factory.StartNew()</c> в том, что используется <see cref="P:System.Threading.Tasks.TaskScheduler.Default"/>.
            Метод создания контекста вызывается до запуска задачи. Таким образом в него можно передать потокозависимымые данные.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.TaskEx.RunWithContext``1(System.Action{``0},System.Func{``0},System.Threading.CancellationToken,System.Boolean,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Создаёт и запускает задачу c предварительно созданным контекстом. 
            Отличие от <c>Task.Factory.StartNew()</c> в том, что используется <see cref="P:System.Threading.Tasks.TaskScheduler.Default"/>.
            Метод создания контекста вызывается до запуска задачи. Таким образом в него можно передать потокозависимымые данные.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.TaskEx.RunWithContext``2(System.Func{``0,``1},``0)">
            <summary>
            Создаёт и запускает задачу c предварительно созданным контекстом. 
            Отличие от <c>Task.Factory.StartNew()</c> в том, что используется <see cref="P:System.Threading.Tasks.TaskScheduler.Default"/>.
            Метод создания контекста вызывается до запуска задачи. Таким образом в него можно передать потокозависимымые данные.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.TaskEx.RunWithContext``2(System.Func{``0,``1},System.Func{``0})">
            <summary>
            Создаёт и запускает задачу c предварительно созданным контекстом. 
            Отличие от <c>Task.Factory.StartNew()</c> в том, что используется <see cref="P:System.Threading.Tasks.TaskScheduler.Default"/>.
            Метод создания контекста вызывается до запуска задачи. Таким образом в него можно передать потокозависимымые данные.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.TaskEx.RunWithContext``2(System.Func{``0,``1},System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Создаёт и запускает задачу c предварительно созданным контекстом. 
            Отличие от <c>Task.Factory.StartNew()</c> в том, что используется <see cref="P:System.Threading.Tasks.TaskScheduler.Default"/>.
            Метод создания контекста вызывается до запуска задачи. Таким образом в него можно передать потокозависимымые данные.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.TaskEx.RunWithContext``2(System.Func{``0,``1},``0,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Создаёт и запускает задачу c предварительно созданным контекстом. 
            Отличие от <c>Task.Factory.StartNew()</c> в том, что используется <see cref="P:System.Threading.Tasks.TaskScheduler.Default"/>.
            Метод создания контекста вызывается до запуска задачи. Таким образом в него можно передать потокозависимымые данные.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.TypeExtension.DefaultValue(System.Type,System.Boolean)">
            <summary>
            Creates instance of type default value.
            </summary>
            <param name="self"></param>
            <param name="getForStringAndArraysEmptyValue">For strings returns empty string - NOT null. For arrays returns empty array - NOT null</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Utils.Extensions.TypeExtension.IsInteger(System.Type,System.Boolean)">
            <summary>
            Checks the type is one of integer types (byte, int, long, etc.)
            </summary>
            <param name="self"></param>
            <param name="checkNullable">Set this param to true if you want to include nullable types to checking.</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Utils.Extensions.TypeExtension.IsNumeric(System.Type,System.Boolean)">
            <summary>
            Checks the type is one of numeric types (float, double, decimal)
            <param name="self"></param>
            <param name="checkNullable">Set this param to true if you want to include nullable types to checking.</param>
            <returns></returns>
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.TypeExtension.IsNumber(System.Type,System.Boolean)">
            <summary>
            Checks the type is one of integer or numeric types (int, byte, float, double, decimal, etc.)
            <param name="self"></param>
            <param name="checkNullable">Set this param to true if you want to include nullable types to checking.</param>
            <returns></returns>
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.TypeExtension.IsNullableType(System.Type)">
            <summary>
            Checks if specified type Nullable, ex. int?, DateTime?
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.TypeExtension.GetNonNullableType(System.Type)">
            <summary>
            Returns generic base type from Nullable: int? -> int, DateTime? -> DateTime
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.TypeExtension.CanBeNull(System.Type)">
            <summary>
            Checks if specified type could assign null values (all reference types and Nullable types)
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.TypeExtension.GetDescription(System.Type,System.Globalization.CultureInfo)">
            <summary>
            Returns value of the enum item returned by enum type converter or LocalizableDescriptionAttribute or DescriptionAttribute of this item.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.TypeExtension.GetDescription(System.Reflection.MemberInfo,System.Globalization.CultureInfo)">
            <summary>
            Returns value of the enum item returned by enum type converter or LocalizableDescriptionAttribute or DescriptionAttribute of this item.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.TypeExtension.IsChildOf(System.Type,System.Type)">
            <summary>
            Implementation of the method <see cref="M:System.Type.IsSubclassOf(System.Type)"/> that we can use to get the derived types of any class (including generic ones). <para></para>
            Also return <c>true</c> if <paramref name="baseType"/> is an interface and <paramref name="type"/> implements this one.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.TypeExtension.IsChildOf``1(System.Type)">
            <summary>
            Implementation of the method <see cref="M:System.Type.IsSubclassOf(System.Type)"/> that we can use to get the derived types of any class (including generic ones). <para></para>
            Also return <c>true</c> if <typeparamref name="TBaseType"/> is an interface and <paramref name="type"/> implements this one.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Extensions.TypeExtension.GetPropertyInfo(System.Type,System.String)">
            <summary>
            Searches for the public property with the specified path.
            </summary>
            
            <returns>
            An object representing the public property with the specified path, if found; otherwise, null.
            </returns>
            <param name="t">Searching type</param>
            <param name="path">The string containing the path to the the public property to get in format <c>Prop1.SubProp2.Prop</c>. </param><exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name. See Remarks.</exception><exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="T:TotalApi.Utils.FileEx">
            <summary>
            Create FileStream with supporting long file pathes (> 260 characters in path)
            </summary>
        </member>
        <member name="T:TotalApi.Utils.FramedBindingListView.FramedBindingListView">
             <summary>
             Abstract class for implementation 'framed' binding lists.
             Sample of using:
             <code>
                 public class VirtualList : FramedBindingListView
                 {
                      private readonly int _count;
            
                      public VirtualList(int count) : base(10)
                      {
                          _count = count;
                      }
            
                      public override int Count
                      {
                          get { return _count; }
                      }
            
                      protected override IList LoadFrame(FramedEnumerator enumerator, int currentFrame)
                      {
                          return Enumerable.Range(1, FrameSize)
                                .Select(x => new {Id = currentFrame*10 + x, Name = @"Value {0}".Fmt(currentFrame*10 + x)})
                                .ToList();
                      }
                 }
             </code>
             </summary>
        </member>
        <member name="M:TotalApi.Utils.Spatials.GpxParser.LoadFromFile(System.String)">
            <summary>
            Load the Xml document for parsing
            </summary>
            <param name="sFile">Fully qualified file name (local)</param>
            <returns>XDocument</returns>
        </member>
        <member name="M:TotalApi.Utils.Spatials.GpxParser.LoadFromResource(System.String,System.Reflection.Assembly)">
            <summary>
            Load the Xml document for parsing
            </summary>
            <param name="relativeResourceName">Resource name in the format <c>Folder</c>.<c>SubFolder</c>.<c>ItemName</c></param>
            <param name="assembly"></param>
            <returns>XDocument</returns>
        </member>
        <member name="M:TotalApi.Utils.Spatials.GpxParser.GetGpxNameSpace(System.String)">
            <summary>
            Load the namespace for a standard GPX document
            </summary>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Utils.Spatials.GpxParser.ParseGpxWaypoints(System.Xml.Linq.XDocument,System.String)">
            <summary>
            When passed a file, open it and parse all waypoints from it.
            </summary>
            <param name="gpxDoc">Gpx document</param>
            <param name="version">Version of the GPX-file</param>
            <returns>string containing line delimited waypoints from
            the file (for test)</returns>
            <remarks>Normally, this would be used to populate the
            appropriate object model</remarks>
        </member>
        <member name="M:TotalApi.Utils.Spatials.GpxParser.LoadGpxWaypointsFromFile(System.String)">
            <summary>
            When passed a file, open it and parse all waypoints from it.
            </summary>
            <param name="sFile">Fully qualified file name (local)</param>
            <returns>string containing line delimited waypoints from
            the file (for test)</returns>
            <remarks>Normally, this would be used to populate the
            appropriate object model</remarks>
        </member>
        <member name="M:TotalApi.Utils.Spatials.GpxParser.ParseGpxTracks(System.Xml.Linq.XDocument,System.String)">
            <summary>
            When passed a file, open it and parse all tracks
            and track segments from it.
            </summary>
            <param name="gpxDoc">GPX Document</param>
            <param name="version">Version of the GPX-file</param>
        </member>
        <member name="M:TotalApi.Utils.Spatials.GpxParser.LoadGpxTracksFromFile(System.String)">
            <summary>
            When passed a file, open it and parse all tracks
            and track segments from it.
            </summary>
            <param name="sFile">Fully qualified file name (local)</param>
            <returns>string containing line delimited waypoints from the
            file (for test)</returns>
        </member>
        <member name="M:TotalApi.Utils.Spatials.GpxParser.LoadGpxTracksFromResource(System.String,System.Reflection.Assembly)">
            <summary>
            When passed an embedded resource name, open it and parse all tracks and track segments from it.
            </summary>
            <param name="relativeResourceName">Resource name in the format <c>Folder</c>.<c>SubFolder</c>.<c>ItemName</c></param>
            <returns>string containing line delimited waypoints from the
            file (for test)</returns>
        </member>
        <member name="M:TotalApi.Utils.Spatials.GeoUtils.CalculateAngle(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Возвращает центральный угол между двумя точками, рад
            </summary>
            <returns>Центральный угол, рад</returns>
        </member>
        <member name="M:TotalApi.Utils.Spatials.GeoUtils.CalculateDistance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Возвращает расстояние между двумя точками на сфере в метрах
            </summary>
            <returns>Расстояние, м</returns>
        </member>
        <member name="M:TotalApi.Utils.Spatials.GeoUtils.CalculateDistance(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Возвращает расстояние между двумя точками на сфере в метрах (!!) с учетом высоты над сферой (в метрах)
            т.е. вычисляется гипотенуза - 1й катет - расстойние между точками на сфере, 2й катет - возвышение первой точки над второй
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Spatials.GeoUtils.CalculateDistanceDegrees(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Возвращает расстояние между двумя точками в метрах
            </summary>
            <returns>Расстояние, м</returns>
        </member>
        <member name="M:TotalApi.Utils.Spatials.GeoUtils.DistanceFromLine(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Рассчитывает расстояние от точки до прямой
            </summary>
            <param name="x1Line">Первая точка прямой</param>
            <param name="y1Line">Первая точка прямой</param>
            <param name="x2Line">Вторая точка прямой</param>
            <param name="y2Line">Вторая точка прямой</param>
            <param name="x">Точка от которой считается расстояние</param>
            <param name="y">Точка от которой считается расстояние</param>
            <returns>расстояние или NaN в случае ошибки</returns>
        </member>
        <member name="M:TotalApi.Utils.Spatials.GeoUtils.PointInBoundingBox(System.Double,System.Double,System.Double[])">
            <summary>
            Проверяет, находится ли координата внутру переданного bounding box'а.
            </summary>
            <param name="latitude">Широта</param>
            <param name="longitude">Долгота</param>
            <param name="bbox">4 значения, задающие квадрат bounding box'а</param>
            <returns></returns>
        </member>
        <member name="T:TotalApi.Utils.IniFile">
            <summary>
            Create a New INI file to store or load data
            </summary>
        </member>
        <member name="M:TotalApi.Utils.IniFile.#ctor(System.String)">
            <summary>
            INIFile Constructor.
            </summary>
            <PARAM name="INIPath"></PARAM>
        </member>
        <member name="M:TotalApi.Utils.IniFile.IniWriteValue(System.String,System.String,System.String)">
            <summary>
            Write Data to the INI File
            </summary>
        </member>
        <member name="M:TotalApi.Utils.IniFile.IniReadValue(System.String,System.String,System.String)">
            <summary>
            Read Data Value From the Ini File
            </summary>
        </member>
        <member name="T:TotalApi.Utils.RemoteObject">
            <summary>
            Creates Client or Server parts of the remote object. <para></para>
            Usage:<para></para>
            <para></para>
            Server Side:<para></para>
            <code>
                channel = RemoteObject.CreateServer&lt;SomeRemoteObject&gt;("portName");
                ...
                ChannelServices.UnregisterChannel(channel);
            </code>
            <para></para>
            Client Side:<para></para>
            <code>
                var remObject = RemoteObject.Create&lt;ISomeRemoteObject&gt;("portName");
            </code>
            </summary>
        </member>
        <member name="T:TotalApi.Utils.ROT">
            <summary>
            Allows .NET applications direct access to the Running Object Table (table of all currently running COM objects)
            </summary>
        </member>
        <member name="M:TotalApi.Utils.ROT.#ctor">
            <summary>
            Private default constructor.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.ROT.GetRunningCOMObjectByName(System.String)">
            <summary>
            Returns a reference to a running COM object using its display name.
            </summary>
            <param name="objectDisplayName">Display name of a COM instance</param>
            <returns>Reference to a COM object, or null if no COM object with the name runs</returns>
        </member>
        <member name="M:TotalApi.Utils.ROT.GetRunningCOMObjectNames">
            <summary>
            Returns a list with display names of all currently running COM objects.
            </summary>
            <returns>List of Display name</returns>
        </member>
        <member name="M:TotalApi.Utils.ROT.GetEntries">
            <summary>
            Returns a list of enties of all currently running COM objects in ROT.
            </summary>
            <returns>List of ROT entry</returns>
        </member>
        <member name="T:TotalApi.Utils.Tasks.DelayedTaskScheduler">
            <summary>
            Implements the task scheduler for delayed tasks. <para></para>
            When the task is run in <see cref="T:TotalApi.Utils.Tasks.DelayedTaskScheduler"/> its start will be delayed on <see cref="P:TotalApi.Utils.Tasks.DelayedTaskScheduler.DefaultDelay"/> milliseconds. <para></para>
            If other task is run in this period the old one will be skipped and the new task will be delayed on <see cref="P:TotalApi.Utils.Tasks.DelayedTaskScheduler.DefaultDelay"/> milliseconds. <para></para>
            <remarks>
            The tasks are started in STA threads.
            </remarks>
            
            </summary>
        </member>
        <member name="P:TotalApi.Utils.Tasks.DelayedTaskScheduler.DefaultDelay">
            <summary>
            Gets or sets default delay in milliseconds.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Tasks.DelayedTaskScheduler.#ctor(System.Int32)">
            <summary>
            Creates the instance of the DelayedTask scheduler.
            </summary>
            <param name="defaultDelay">Default delay in milliseconds.</param>
        </member>
        <member name="M:TotalApi.Utils.Tasks.DelayedTaskScheduler.Run(System.Action,System.Threading.CancellationToken)">
            <summary>
            Creates and enqueues the new task. This task can be cancelled with the method <see cref="M:TotalApi.Utils.Tasks.TaskSchedulerEx.Cancel"/>. <para></para>
            The start of the task will be delayed on <see cref="P:TotalApi.Utils.Tasks.DelayedTaskScheduler.DefaultDelay"/>.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Tasks.DelayedTaskScheduler.Run``1(System.Func{``0},System.Threading.CancellationToken)">
            <summary>
            Creates and enqueues the new task. This task can be cancelled with the method <see cref="M:TotalApi.Utils.Tasks.TaskSchedulerEx.Cancel"/>. <para></para>
            The start of the task will be delayed on <see cref="P:TotalApi.Utils.Tasks.DelayedTaskScheduler.DefaultDelay"/>.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Tasks.DelayedTaskScheduler.Run(System.Int32,System.Action)">
            <summary>
            Creates and enqueues the new task.<para></para>
            The start of the task will be delayed on <paramref name="millisecondsDelay"/> milliseconds.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Tasks.DelayedTaskScheduler.Run``1(System.Int32,System.Func{``0})">
            <summary>
            Creates and enqueues the new task. <para></para>
            The start of the task will be delayed on <paramref name="millisecondsDelay"/> milliseconds.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Tasks.DelayedTaskScheduler.Run(System.Int32,System.Action,System.Threading.CancellationToken)">
            <summary>
            Creates and enqueues the new task. This task can be cancelled with the method <see cref="M:TotalApi.Utils.Tasks.TaskSchedulerEx.Cancel"/>. <para></para>
            The start of the task will be delayed on <paramref name="millisecondsDelay"/> milliseconds.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Tasks.DelayedTaskScheduler.Run``1(System.Int32,System.Func{``0},System.Threading.CancellationToken)">
            <summary>
            Creates and enqueues the new task. This task can be cancelled with the method <see cref="M:TotalApi.Utils.Tasks.TaskSchedulerEx.Cancel"/>. <para></para>
            The start of the task will be delayed on <paramref name="millisecondsDelay"/> milliseconds.
            </summary>
        </member>
        <member name="T:TotalApi.Utils.Tasks.PromisesTask">
             <summary>
             Defines some methods to implement "Promise"-like behavior of the tasks calling.
             Allows to call async methods in a chain one-by-one.
             You can pass own context (state and cancellation token source) to the task chain.
             You can use the only handler of the exceptions, the only finally code and the only OnCancel section.
             <example>
             <code>
                 var cts = new CancellationTokenSource();
                    Console.Write("100/50");
                    var result = 
                        PromisesTask.Start(ctx => 
                        {
                            ctx.State = 1234;
                           // ctx.CancellationTokenSource = cts; // if you didn't pass the custom CancellationTokenSource it will be created for this task promices chain.
                            return Div(100, 25);
                        })
                        .Then(r =>
                        {
                            Console.WriteLine(" = {0}", r);
                            Console.Write("{0}/2", r);
                            return Div(r, 2);
                        })
                        .ConfigurePromise(ctx =>      // Configuring context inside the promises chain
                        {
                            ctx.State = "Some text";  
                        })
                        .Then(r =>
                        {
                            Console.WriteLine(" = {0}", r);
                            Console.Write("{0}/2", r);
                            return Div(r, 2);
                        })
                        .Then(() =>
                        {
                            Console.Write(" (change res to 100)");
                            return 100;
                        })
                        .Then((r, ctx) =>                      // ctx - The promises task context
                        {
                            Console.WriteLine(" = {0}", r);
                            if (ctx.State is string)
                            {
                                throw new Exception("Test exception in .Then(): " + (string)ctx.State);
                            }
                            if (r == 1)
                            {
                                Console.WriteLine("Cancellation promise...");
                                ctx.Cancel();
                            }
                            return r;
                        })
                        .Then(r =>
                        {
                            Console.Write("{0}/2", r);
                            return Div(r, 2);
                        })
                        .Then(r =>
                        {
                            Console.WriteLine(" = {0}", r);
                            return r;
                        })
                        .Catch(e =>
                        {
                            Console.WriteLine();
                            Console.WriteLine("Error(s): {0}", e is AggregateException
                                ? (e as AggregateException).InnerExceptions.Aggregate("",
                                    (s, exception) => s + "\r\n" + exception.Message)
                                : e.Message);
                        })
                        .OnCancel(() =>
                        {
                            Console.WriteLine();
                            Console.WriteLine("Operation CANCELLED.");
                        })
                        .Finally(() =>
                         {
                            Console.WriteLine();
                            Console.WriteLine("End");
                        })
                        .Result;
            
                    Console.WriteLine();
                    Console.WriteLine("========================================");
                    Console.WriteLine("Result: {0}", result);
                    Console.Read();
             </code>
             </example>
             </summary>
        </member>
        <member name="T:TotalApi.Utils.Tasks.PromisesTask.TaskContext">
            <summary>
            The context to pass to the promises task call chain.
            </summary>
        </member>
        <member name="E:TotalApi.Utils.Tasks.PromisesTask.TaskContext.OnConfigureContext">
            <summary>
            Calls on creating TaskContext.
            Here you can store any context-depend information, e.g. <see cref="!:HttpContext.Current"/> or <see cref="P:System.ServiceModel.OperationContext.Current"/>
            in the UserData and restore it in the <see cref="E:TotalApi.Utils.Tasks.PromisesTask.TaskContext.OnRestoreContext"/>.
            </summary>
        </member>
        <member name="E:TotalApi.Utils.Tasks.PromisesTask.TaskContext.OnRestoreContext">
            <summary>
            Calls on switching to the new .Then/.Catch/.Finally/.OnCancel method.
            Here you can restore the context-depend information, e.g. <see cref="!:HttpContext.Current"/> or <see cref="P:System.ServiceModel.OperationContext.Current"/>
            saved in the UserData in the <see cref="!:OnConfigreContext"/>.
            </summary>
        </member>
        <member name="P:TotalApi.Utils.Tasks.PromisesTask.TaskContext.UserData">
            <summary>
            Any custom user data.
            </summary>
        </member>
        <member name="P:TotalApi.Utils.Tasks.PromisesTask.TaskContext.State">
            <summary>
            Any custom user object.
            </summary>
        </member>
        <member name="P:TotalApi.Utils.Tasks.PromisesTask.TaskContext.CancellationToken">
            <summary>
            Cancellation token.
            </summary>
        </member>
        <member name="P:TotalApi.Utils.Tasks.PromisesTask.TaskContext.TaskException">
            <summary>
            Exception thrown in the one of the chain call.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Tasks.PromisesTask.TaskContext.Cancel">
            <summary>
            Cancels the current task promices chain.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Tasks.PromisesTask.TaskContext.CheckCancel">
            <summary>
            Throws an <see cref="T:System.OperationCanceledException"/> if cancellation requested.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Tasks.PromisesTask.Start``1(System.Func{TotalApi.Utils.Tasks.PromisesTask.TaskContext,System.Threading.Tasks.Task{``0}})">
            <summary>
            Configures and starts the promises task chain.
            </summary>
            <typeparam name="TResult">Type of the first task result.</typeparam>
            <param name="startTask">Function where you should configure the promises task and call the first task in the chain.</param>
            <returns>Configured the first task</returns>
        </member>
        <member name="M:TotalApi.Utils.Tasks.PromisesTask.Start``1(System.Func{TotalApi.Utils.Tasks.PromisesTask.TaskContext,``0})">
            <summary>
            Configures and starts the promises task chain.
            </summary>
            <typeparam name="TResult">Type of the first task result.</typeparam>
            <param name="startTask">Function where you should configure the promises task and call the first task in the chain.</param>
            <returns>Configured the first task</returns>
        </member>
        <member name="M:TotalApi.Utils.Tasks.PromisesTask.ConfigurePromises``1(System.Threading.Tasks.Task{``0},System.Action{TotalApi.Utils.Tasks.PromisesTask.TaskContext})">
            <summary>
            Performs the configuration of the promises task inside of the task chain (usually after the first task).
            </summary>
            <typeparam name="TResult">Type of the previous task result.</typeparam>
            <param name="task">The previous task</param>
            <param name="configureAction">Action where you should configure the promises task</param>
            <returns>Configured the first task</returns>
        </member>
        <member name="M:TotalApi.Utils.Tasks.PromisesTask.ConfigurePromises(System.Threading.Tasks.Task,System.Action{TotalApi.Utils.Tasks.PromisesTask.TaskContext})">
            <summary>
            Performs the configuration of the promises task inside of the task chain (usually after the first task).
            </summary>
            <param name="task">The previous task</param>
            <param name="configureAction">Action where you should configure the promises task</param>
            <returns>Configured the first task</returns>
        </member>
        <member name="M:TotalApi.Utils.Tasks.PromisesTask.Then(System.Threading.Tasks.Task,System.Action)">
            <summary>
            Calls after completition of the previous task.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Tasks.PromisesTask.Then``1(System.Threading.Tasks.Task{``0},System.Action{``0})">
            <summary>
            Calls after completition of the previous task.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Tasks.PromisesTask.Then``1(System.Threading.Tasks.Task,System.Func{``0})">
            <summary>
            Calls after completition of the previous task.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Tasks.PromisesTask.Then``2(System.Threading.Tasks.Task{``0},System.Func{``0,``1})">
            <summary>
            Calls after completition of the previous task.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Tasks.PromisesTask.Then(System.Threading.Tasks.Task,System.Action{TotalApi.Utils.Tasks.PromisesTask.TaskContext})">
            <summary>
            Calls after completition of the previous task.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Tasks.PromisesTask.Then``1(System.Threading.Tasks.Task{``0},System.Action{``0,TotalApi.Utils.Tasks.PromisesTask.TaskContext})">
            <summary>
            Calls after completition of the previous task.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Tasks.PromisesTask.Then``1(System.Threading.Tasks.Task,System.Func{TotalApi.Utils.Tasks.PromisesTask.TaskContext,``0})">
            <summary>
            Calls after completition of the previous task.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Tasks.PromisesTask.Then``2(System.Threading.Tasks.Task{``0},System.Func{``0,TotalApi.Utils.Tasks.PromisesTask.TaskContext,``1})">
            <summary>
            Calls after completition of the previous task.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Tasks.PromisesTask.Then(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Calls after completition of the previous task.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Tasks.PromisesTask.Then``1(System.Threading.Tasks.Task{``0},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Calls after completition of the previous task.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Tasks.PromisesTask.Then``1(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Calls after completition of the previous task.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Tasks.PromisesTask.Then``2(System.Threading.Tasks.Task{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Calls after completition of the previous task.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Tasks.PromisesTask.Then(System.Threading.Tasks.Task,System.Func{TotalApi.Utils.Tasks.PromisesTask.TaskContext,System.Threading.Tasks.Task})">
            <summary>
            Calls after completition of the previous task.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Tasks.PromisesTask.Then``1(System.Threading.Tasks.Task{``0},System.Func{``0,TotalApi.Utils.Tasks.PromisesTask.TaskContext,System.Threading.Tasks.Task})">
            <summary>
            Calls after completition of the previous task.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Tasks.PromisesTask.Then``1(System.Threading.Tasks.Task,System.Func{TotalApi.Utils.Tasks.PromisesTask.TaskContext,System.Threading.Tasks.Task{``0}})">
            <summary>
            Calls after completition of the previous task.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Tasks.PromisesTask.Then``2(System.Threading.Tasks.Task{``0},System.Func{``0,TotalApi.Utils.Tasks.PromisesTask.TaskContext,System.Threading.Tasks.Task{``1}})">
            <summary>
            Calls after completition of the previous task.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Tasks.PromisesTask.Catch(System.Threading.Tasks.Task,System.Action{System.Exception})">
            <summary>
            Catch exceptions raised inside of the promises call.
            If there is the only exception was catched - <paramref name="catchBody"/> parameter was this exception and <see cref="T:System.AggregateException"/> otherwise.
            </summary>
            <param name="task">The previous (last) task in the chain.</param>
            <param name="catchBody">Action to handle the exception.</param>
        </member>
        <member name="M:TotalApi.Utils.Tasks.PromisesTask.Catch``1(System.Threading.Tasks.Task{``0},System.Action{System.Exception})">
            <summary>
            Catch exceptions raised inside of the promises call.
            If there is the only exception was catched - <paramref name="catchBody"/> parameter was this exception and <see cref="T:System.AggregateException"/> otherwise.
            </summary>
            <param name="task">The previous (last) task in the chain.</param>
            <param name="catchBody">Action to handle the exception.</param>
        </member>
        <member name="M:TotalApi.Utils.Tasks.PromisesTask.Catch``1(System.Threading.Tasks.Task{``0},System.Func{System.Exception,``0})">
            <summary>
            Catch exceptions raised inside of the promises call.
            Handles the exception and make the promises chain to return the result instead of thowning an exception.
            If there is the only exception was catched - <paramref name="catchBody"/> parameter was this exception and <see cref="T:System.AggregateException"/> otherwise.
            </summary>
            <param name="task">The previous (last) task in the chain.</param>
            <param name="catchBody">Action to handle the exception.</param>
        </member>
        <member name="M:TotalApi.Utils.Tasks.PromisesTask.Catch(System.Threading.Tasks.Task,System.Func{System.Exception,System.Threading.Tasks.Task})">
            <summary>
            Catch exceptions raised inside of the promises call.
            If there is the only exception was catched - <paramref name="catchTask"/> parameter was this exception and <see cref="T:System.AggregateException"/> otherwise.
            </summary>
            <param name="task">The previous (last) task in the chain.</param>
            <param name="catchTask">Task to handle the exception.</param>
        </member>
        <member name="M:TotalApi.Utils.Tasks.PromisesTask.Catch``1(System.Threading.Tasks.Task{``0},System.Func{System.Exception,System.Threading.Tasks.Task})">
            <summary>
            Catch exceptions raised inside of the promises call.
            If there is the only exception was catched - <paramref name="catchTask"/> parameter was this exception and <see cref="T:System.AggregateException"/> otherwise.
            </summary>
            <param name="task">The previous (last) task in the chain.</param>
            <param name="catchTask">Task to handle the exception.</param>
        </member>
        <member name="M:TotalApi.Utils.Tasks.PromisesTask.Catch``1(System.Threading.Tasks.Task{``0},System.Func{System.Exception,System.Threading.Tasks.Task{``0}})">
            <summary>
            Catch exceptions raised inside of the promises call.
            Handles the exception and make the promises chain to return the result instead of thowning an exception.
            If there is the only exception was catched - <paramref name="catchTask"/> parameter was this exception and <see cref="T:System.AggregateException"/> otherwise.
            </summary>
            <param name="task">The previous (last) task in the chain.</param>
            <param name="catchTask">Task to handle the exception.</param>
        </member>
        <member name="M:TotalApi.Utils.Tasks.PromisesTask.Finally(System.Threading.Tasks.Task,System.Action)">
            <summary>
            The code of the <paramref name="finallyAction"/> will be excecuted anyway.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Tasks.PromisesTask.Finally``1(System.Threading.Tasks.Task{``0},System.Action)">
            <summary>
            The code of the <paramref name="finallyAction"/> will be excecuted anyway.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Tasks.PromisesTask.Finally(System.Threading.Tasks.Task,System.Threading.Tasks.Task)">
            <summary>
            The code of the <paramref name="finallyTask"/> will be excecuted anyway.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Tasks.PromisesTask.Finally``1(System.Threading.Tasks.Task{``0},System.Threading.Tasks.Task)">
            <summary>
            The code of the <paramref name="finallyTask"/> will be excecuted anyway.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Tasks.PromisesTask.OnCancel(System.Threading.Tasks.Task,System.Action)">
            <summary>
            Catch the cancellation inside of the promises call.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Tasks.PromisesTask.OnCancel``1(System.Threading.Tasks.Task{``0},System.Action)">
            <summary>
            Catch the cancellation inside of the promises call.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Tasks.PromisesTask.OnCancel``1(System.Threading.Tasks.Task{``0},System.Func{``0})">
            <summary>
            Catch the cancellation inside of the promises call.
            Handles the cancellation and make the promises chain to return the result instead of thowning the cancellation exception.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Tasks.PromisesTask.OnCancel(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Catch the cancellation inside of the promises call.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Tasks.PromisesTask.OnCancel``1(System.Threading.Tasks.Task{``0},System.Func{System.Threading.Tasks.Task})">
            <summary>
            Catch the cancellation inside of the promises call.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Tasks.PromisesTask.OnCancel``1(System.Threading.Tasks.Task{``0},System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Catch the cancellation inside of the promises call.
            Handles the cancellation and make the promises chain to return the result instead of thowning the cancellation exception.
            </summary>
        </member>
        <member name="T:TotalApi.Utils.Tasks.StaTaskScheduler">
            <summary>
            Implementation of the task scheduler with specified <c>ConcurrencyLevel</c> and <c>QueueLevel</c>. <para></para>
            All the threads of the <see cref="T:TotalApi.Utils.Tasks.StaTaskScheduler"/> are executed in STA apartment.
            </summary>
        </member>
        <member name="P:TotalApi.Utils.Tasks.StaTaskScheduler.DefaultSingle">
            <summary>
            Gets the default STA task scheduler with the concurrency level equals 1.
            </summary>
        </member>
        <member name="P:TotalApi.Utils.Tasks.StaTaskScheduler.Default">
            <summary>
            Gets the default STA task scheduler with the concurrency level equals 10.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Tasks.StaTaskScheduler.#ctor(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Creates of the task scheduler with specified <paramref name="concurrencyLevel"/> and <paramref name="queueLevel"/>. <para></para>
            All the threads of the <see cref="T:TotalApi.Utils.Tasks.StaTaskScheduler"/> are executed in STA apartment.
            </summary>
            <param name="concurrencyLevel">Sets the maximum quantity of the simultaneously executing threads. The other threads are queued.</param>
            <param name="queueLevel">Sets the maximum queue size.
            <para><c>null</c> - No limit for queue size.</para>
            <para><c>0</c> - No queue. All extra threads will be ignored.</para>
            <para><c>Positive value</c> - If the queue is full all extra threads will be ignored.</para>
            <para><c>Negative value</c> - If the queue is full the first thread in queue will be skipped and extra thread will be added to the end of the queue.</para>
            </param>
        </member>
        <member name="T:TotalApi.Utils.Tasks.CultureAwaiterTaskExtensions">
            <summary>
            The extension allows execute tasks continuation with the source thread cultures.
            </summary>
        </member>
        <member name="T:TotalApi.Utils.Tasks.TaskSchedulerEx">
            <summary>
            Implementation of the task scheduler with specified <c>ConcurrencyLevel</c> and <c>QueueLevel</c> and an ability to cancel active and queued tasks.
            </summary>
        </member>
        <member name="P:TotalApi.Utils.Tasks.TaskSchedulerEx.IsCompleted">
            <summary>
            Gets whether the sheduler hasn't got active tasks and is empty.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Tasks.TaskSchedulerEx.#ctor(System.Int32,System.Nullable{System.Int32},System.Boolean,System.String)">
            <summary>
            Creates of the task scheduler with specified <paramref name="concurrencyLevel"/> and <paramref name="queueLevel"/>. <para></para>
            </summary>
            <param name="concurrencyLevel">Sets the maximum quantity of the simultaneously executing threads. The other threads are queued.</param>
            <param name="queueLevel">Sets the maximum queue size.
            <para><c>null</c> - No limit for queue size.</para>
            <para><c>0</c> - No queue. All extra threads will be ignored.</para>
            <para><c>Positive value</c> - If the queue is full all extra threads will be ignored.</para>
            <para><c>Negative value</c> - If the queue is full the first thread in queue will be skipped and extra thread will be added to the end of the queue.</para>
            </param>
            <param name="useStackTasks">If <c>true</c> new tasks will be set to stack instead of the queue.</param>
            <param name="threadName">The name to use for each of the created threads.</param>
        </member>
        <member name="P:TotalApi.Utils.Tasks.TaskSchedulerEx.CancellationTokenSource">
            <summary>
            Gets the current CancellationTokenSource. Do not use CancellationTokenSource.Cancel() to cancel tasks. Use <see cref="M:TotalApi.Utils.Tasks.TaskSchedulerEx.Cancel"/> instead.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Tasks.TaskSchedulerEx.InitThread(System.Threading.Thread)">
            <summary>
            This method is called after the task thread has been created.
            </summary>
            <param name="thread"></param>
        </member>
        <member name="M:TotalApi.Utils.Tasks.TaskSchedulerEx.Cancel">
            <summary>
            Cancels all active (if they support it) and queued tasks.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Tasks.TaskSchedulerEx.Dispose">
            <summary>
            Waits for ending all the tasks (active and queued) and disposes schecduler.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Tasks.TaskSchedulerEx.ThrowIfCancellationRequested">
            <summary>
            Call this method inside of the tasks if you want your task can be cancelled with the method <see cref="M:TotalApi.Utils.Tasks.TaskSchedulerEx.Cancel"/>.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Tasks.TaskSchedulerEx.Run(System.Action)">
            <summary>
            Creates and enqueues the new task. This task can be cancelled with the method <see cref="M:TotalApi.Utils.Tasks.TaskSchedulerEx.Cancel"/>.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Tasks.TaskSchedulerEx.Run``1(System.Func{``0})">
            <summary>
            Creates and enqueues the new task. This task can be cancelled with the method <see cref="M:TotalApi.Utils.Tasks.TaskSchedulerEx.Cancel"/>.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Tasks.TaskSchedulerEx.Run(System.Action,System.Threading.CancellationToken)">
            <summary>
            Creates and enqueues the new task. This task can be cancelled with the method <see cref="M:TotalApi.Utils.Tasks.TaskSchedulerEx.Cancel"/>.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Tasks.TaskSchedulerEx.Run``1(System.Func{``0},System.Threading.CancellationToken)">
            <summary>
            Creates and enqueues the new task. This task can be cancelled with the method <see cref="M:TotalApi.Utils.Tasks.TaskSchedulerEx.Cancel"/>.
            </summary>
        </member>
        <member name="T:TotalApi.Utils.IDictionaryEx`2">
            <summary>
            IDictionary with supporting IEditableObject interface
            </summary>
        </member>
        <member name="M:TotalApi.Utils.IDictionaryEx`2.ApplyChanges">
            <summary>
            Applies all changed. Equal: { EndEdit(); BeginEdit(); }
            </summary>
        </member>
        <member name="M:TotalApi.Utils.IDictionaryEx`2.UndoChanges">
            <summary>
            Undo all changed. Equal: { CancelEdit(); BeginEdit(); }
            </summary>
        </member>
        <member name="T:TotalApi.Utils.DictionaryEx`2">
            <summary>
            Implements editable dictionary with supporting IEditableObject interface
            </summary>
        </member>
        <member name="T:TotalApi.Utils.DynamicDictionary`1">
            <summary>
            Обычный словарь который приводится к типу dynamic к элементам которого можно обращаться как к обычным свойствам.
            Дополнительно реализованы методы преобразования типов: AsInt("key"), AsFloat("key"), и т.д.
            </summary>
            <typeparam name="TValue">Тип элементов словаря</typeparam>
        </member>
        <member name="T:TotalApi.Utils.DynamicInvoker">
            <summary>
            Создаёт динамический прокси-класс совместимый с типом dynamic для объекта позволяющий получать доступ к закрытым методам и свойствам, а также 
            автоматически реализующий интерфейс INotifyPropertyChanged.
            </summary>
        </member>
        <member name="T:TotalApi.Utils.EnumTypeConverter">
            <summary>
            <para>Using:                                        </para>
            <para>    [TypeConverter(typeof(EnumTypeConverter))]</para>
            <para>    public enum MyEnum                        </para>
            <para>    {                                         </para>
            <para>        [Description("Enum Value 1")]         </para>
            <para>        Value1,                               </para>
            <para>        [Description("Enum Value 2")]         </para>
            <para>        Value2,                               </para>
            <para>        [Description("Enum Value 3")]         </para>
            <para>        Value3                                </para>
            <para>    }                                         </para>
            <para>    comboBox.DataSource = Enum.GetValues(typeof (MyEnum));</para>
            <para>    comboBox.SelectedItem = MyEnum.Value2;                </para>
            <para>                                              </para>
            <para>    For localizable projects you can use      </para>
            <para>    [LocalizableDescription] attribute or     </para>
            <para>    its descendants                           </para>
            <para>                                              </para>
            </summary>
        </member>
        <member name="T:TotalApi.Utils.LocalizableEnumValueAttribute">
            <summary>
            Assign string representation of the member.
            </summary>
            Attribute Order(-1) indicates that value of this attribute don't be used in assigning member description.
        </member>
        <member name="F:TotalApi.Utils.ErrorManager.ErrorAnalizerParams.Text">
            <summary>
            Handled and may be transformed exception text
            </summary>
        </member>
        <member name="F:TotalApi.Utils.ErrorManager.ErrorAnalizerParams.E">
            <summary>
            Last exception with a meaningful message
            </summary>
        </member>
        <member name="F:TotalApi.Utils.ErrorManager.ErrorAnalizerParams.OriginalException">
            <summary>
            Source original exception. Do not clear that field in Clear() method - it helps avoid reraising an exception.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.ErrorManager.ErrorAnalizerParams.AppId">
            <summary>
            Current application Id (sets on calling Init() method)
            </summary>
        </member>
        <member name="F:TotalApi.Utils.ErrorManager.ErrorAnalizerParams.AppName">
            <summary>
            Current application name
            </summary>
        </member>
        <member name="F:TotalApi.Utils.ErrorManager.ErrorAnalizerParams.UserName">
            <summary>
            Current logon user name
            </summary>
        </member>
        <member name="F:TotalApi.Utils.ErrorManager.ErrorAnalizerParams.ErrorAnalizer">
            <summary>
            Additional error analizer 
            </summary>
        </member>
        <member name="F:TotalApi.Utils.ErrorManager.ErrorAnalizerParams.Solution">
            <summary>
            The solution will replace exception information
            </summary>
        </member>
        <member name="F:TotalApi.Utils.ErrorManager.ErrorAnalizerParams.SupportInfo">
            <summary>
            Additional exception information, whitch will be added to error text
            </summary>
        </member>
        <member name="M:TotalApi.Utils.ErrorManager.ExceptionExtension.FullMessage(System.Exception)">
            <summary>
            Returns all messages of the exception include all nested detail exceptions
            </summary>
        </member>
        <member name="M:TotalApi.Utils.ErrorManager.Messages.AskDelete(System.String)">
            <summary>
            Returns <c>true</c> if the answer is YES and <c>false</c> otherwise.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.ErrorManager.Messages.AskDelete(System.String,System.Boolean)">
            <summary>
            Returns <c>true</c> if the answer is YES, <c>false</c> if the answer is NO and null if the answer is CANCEL.
            </summary>
        </member>
        <member name="T:TotalApi.Utils.FileStreamCreator">
            <summary>
            Create FileStream with supporting long file pathes (> 260 characters in path)
            </summary>
        </member>
        <member name="T:TotalApi.Utils.Indexer`2">
            <summary>
            Implements the indexer class. This class can be used as a named indexer of a object.
            <para>
            Sample:
            <code>
            public class Foo 
            {
                public IIndexer&lt;int, string&gt; Indexer1 = new Indexer&lt;int, string&gt;(...);
                public IIndexer&lt;string, string&gt; Indexer2 = new Indexer&lt;string, string&gt;(...);
            }
            
            void Main()
            {
                var foo = new Foo();
                foo.Indexer1[1] = "100";
                foo.Indexer2["Test"] = foo.Indexer1[1];
            }
            </code>
            </para>
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Indexer`2.#ctor(System.Func{`0,`1},System.Action{`0,`1})">
            <summary>
            Creates an indexer instance with the pair methods to get and set values of the indexer.
            </summary>
            <param name="getValue">Getter method</param>
            <param name="setValue">Setter method</param>
        </member>
        <member name="M:TotalApi.Utils.Indexer`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Creates an indexer instance based on the <paramref name="sourceDictionary"/> passed as a parameter.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Indexer`2.#ctor(System.Collections.IDictionary)">
            <summary>
            Creates an indexer instance based on the <paramref name="sourceDictionary"/> passed as a parameter.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Indexer`2.#ctor(System.Boolean)">
            <summary>
            Creates an indexer instance with a storage. Storage is a dictionary.
            </summary>
            <param name="threadSafe">If <c>true</c> creates <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> as a storage and <see cref="T:System.Collections.Generic.Dictionary`2"/> otherwise.</param>
        </member>
        <member name="T:TotalApi.Utils.IndexerReadOnly`2">
            <summary>
            Implements the read-only indexer class. This class can be used as a named indexer of a object.
            <para>
            Sample:
            <code>
            public class Foo 
            {
                public IIndexer&lt;int, string&gt; Indexer1 = new Indexer&lt;int, string&gt;(...);
            }
            
            void Main()
            {
                var foo = new Foo();
                var s = foo.Indexer1[1];
            }
            </code>
            </para>
            </summary>
        </member>
        <member name="M:TotalApi.Utils.IndexerReadOnly`2.#ctor(System.Func{`0,`1})">
            <summary>
            Creates an read-only indexer instance with the geeter method of the indexer.
            </summary>
            <param name="getValue">Getter method</param>
        </member>
        <member name="M:TotalApi.Utils.IndexerReadOnly`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Creates an read-only indexer instance based on the <paramref name="sourceDictionary"/> passed as a parameter.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.IndexerReadOnly`2.#ctor(System.Collections.IDictionary)">
            <summary>
            Creates an indexer instance based on the <paramref name="sourceDictionary"/> passed as a parameter.
            </summary>
        </member>
        <member name="P:TotalApi.Utils.Linq.Dynamic.DynamicExpression.UseCharType">
            <summary>
            If true - expression will be different char literals (in '' quotes and string literals in "" quotes.
            If false - all literals in '' and "" quotes will be string literals.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Linq.Dynamic.ExpressionParser.IsValidIdent(System.Nullable{System.Boolean})">
            <summary>
            firstOrLastChar: True - is first; False - is last; null - is middle
            </summary>
            <param name="firstOrLastChar">True - is first; False - is last; null - is middle</param>
        </member>
        <member name="P:TotalApi.Utils.Linq.Dynamic.ExpressionParser.UseCharType">
            <summary>
            If true - expression will be different char literals (in '' quotes and string literals in "" quotes.
            If false - all literals in '' and "" quotes will be string literals.
            </summary>
        </member>
        <member name="T:TotalApi.Utils.ObservableCollectionEx`1">
            <summary>
            Extension of ObservableCollection with notifying of a collection item property changing 
            </summary>
        </member>
        <member name="M:TotalApi.Utils.ObservableCollectionEx`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the range.
            
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:TotalApi.Utils.ObservableCollectionEx`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes the range.
            
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:TotalApi.Utils.IObservableCollectionEx.AddRange(System.Collections.IEnumerable)">
            <summary>
            Adds the range.
            
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:TotalApi.Utils.IObservableCollectionEx.RemoveRange(System.Collections.IEnumerable)">
            <summary>
            Removes the range.
            
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:TotalApi.Utils.IObservableCollectionEx`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the range.
            
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:TotalApi.Utils.IObservableCollectionEx`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes the range.
            
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="F:TotalApi.Utils.ProgressManager.BreakMode.None">
            <summary>
            Progress operation cannot be break
            </summary>
        </member>
        <member name="F:TotalApi.Utils.ProgressManager.BreakMode.Cancel">
            <summary>
            Progress operation can be cancelled (caption of break button is Cancel)
            </summary>
        </member>
        <member name="F:TotalApi.Utils.ProgressManager.BreakMode.Interrupt">
            <summary>
            Progress operation can be interrupted (caption of break button is Interrupt)
            </summary>
        </member>
        <member name="M:TotalApi.Utils.ProgressManager.Progress.#ctor">
            <summary>
            Use Progress.Start() instead this constructor
            </summary>
        </member>
        <member name="M:TotalApi.Utils.ProgressManager.Progress.Start(System.String,System.Int32,TotalApi.Utils.ProgressManager.BreakMode,System.String,System.Int32)">
            <summary>
            Start a new progress operation
            </summary>
            <param name="title">Title of progress operation</param>
            <param name="maxValue">Maximal value of progress operation</param>
            <param name="breakMode">Type of breaking progress operation</param>
            <param name="text">Start text of progress operation</param>
            <param name="minValue">Minimal value of progress operation</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Utils.ProgressManager.Progress.Step(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Step current progress operation
            </summary>
            <param name="text">Current text of progress operation</param>
            <param name="step">Amount of step</param>
            <param name="title">Title of progress operation</param>
            <param name="throwBreakException">If true - BreakException will be threw if user breaks progress operation</param>
            <returns>true if operation has been break, false - otherwise</returns>
        </member>
        <member name="M:TotalApi.Utils.ProgressManager.Progress.Pos(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Position current progress operation
            </summary>
            <param name="text">Current text of progress operation</param>
            <param name="pos">Current position of progress operation (between minValue and maxValue)</param>
            <param name="title">Title of progress operation</param>
            <param name="throwBreakException">If true - BreakException will be threw if user breaks progress operation</param>
            <returns>true if operation has been break, false - otherwise</returns>
        </member>
        <member name="T:TotalApi.Utils.Proxy.InterfaceProxy">
            <summary>
            Returns objects that implement an interface, without the need to manually create a type 
            that implements the interface
            </summary>
        </member>
        <member name="F:TotalApi.Utils.Proxy.InterfaceProxy._interfaceImplementations">
            <summary>
            All of the types generated for each interface.  This dictionary is indexed by the 
            interface's type object
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Proxy.InterfaceProxy.Create``1">
            <summary>
            Returns an object that implement an interface, without the need to manually create a 
            type that implements the interface
            </summary>
            <typeparam name="T">T must be an interface that is public.</typeparam>
            <returns>An object that implements the T interface</returns>
            <exception cref="T:TotalApi.Utils.Proxy.InterfaceProxy.TypeIsNotAnInterface">Thrown if T is not an interface</exception>
        </member>
        <member name="M:TotalApi.Utils.Proxy.InterfaceProxy.CreateTypeFor(System.Type)">
            <summary>
            Creates a method that will generate an object that implements the interface for the 
            given type.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Proxy.InterfaceProxy.AddMethodsToList(System.Collections.Generic.List{System.Reflection.MethodInfo},System.Type)">
            <summary>
            Helper method to get all MethodInfo objects from an interface.  This recurses to all 
            sub-interfaces
            </summary>
            <param name="methods"></param>
            <param name="type"></param>
        </member>
        <member name="M:TotalApi.Utils.Proxy.InterfaceProxy.AddPropertiesToList(System.Collections.Generic.List{System.Reflection.PropertyInfo},System.Type)">
            <summary>
            Helper method to get all PropertyInfo objects from an interface.  This recurses to all 
            sub-interfaces
            </summary>
        </member>
        <member name="T:TotalApi.Utils.Proxy.InterfaceProxy.TypeIsNotAnInterface">
            <summary>
            Thrown when an attempt is made to create an object of a type that is not an interface
            </summary>
        </member>
        <member name="T:TotalApi.Utils.Proxy.ProxyBuilder">
            <summary>
            Implementation of the dynamic proxy builder.
            </summary>
        </member>
        <member name="P:TotalApi.Utils.Proxy.ProxyBuilder.ModuleBuilder">
            <summary>
            The module builder used for all types constructed
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Proxy.ProxyBuilder.Create``1">
            <summary>
            Create the proxy type by the source type with supporting <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface.
            <remarks>
            The source type can be either an interface with properties to be proxied or an class with 
            <c>virtual</c> public properties to be proxied.
            </remarks>
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Proxy.ProxyBuilder.Create(System.Type)">
            <summary>
            Create the proxy type by the source type with supporting <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface.
            <remarks>
            The source type can be either an interface with properties to be proxied or an class with 
            <c>virtual</c> public properties to be proxied.
            </remarks>
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Proxy.ProxyBuilder.CreateProxy``1(``0,System.ComponentModel.PropertyChangedEventHandler)">
            <summary>
            Creates proxy object by given <param name="source" /> and copies public property values
            from source to proxy object with supporting <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface.
            <remarks>
            The source can be either an interface with properties to be proxied or an class with 
            <c>virtual</c> public properties to be proxied.
            </remarks>
            </summary>
            <param name="source">Source object or interface</param>
            <param name="onPropertyChangedEvent"> </param>
            <returns>Proxy object</returns>
        </member>
        <member name="M:TotalApi.Utils.Proxy.ProxyBuilder.GetProxySource``1(``0)">
            <summary>
            Gets the <param name="proxy" /> source.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Proxy.ProxyBuilder.ResetProxy``1(``0)">
            <summary>
            Resets values all proxied properties to its current values in source.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Proxy.ProxyBuilder.SaveProxyToSource``1(``0)">
            <summary>
            Save current values of the proxied properties of the <param name="proxy"/> to its source and 
            return proxy source as a result.
            </summary>
        </member>
        <member name="P:TotalApi.Utils.ListDescriptor.Description">
            <summary>
            Description == Name
            </summary>
        </member>
        <member name="P:TotalApi.Utils.ListDescriptor.Name">
            <summary>
            Name == Description
            </summary>
        </member>
        <member name="T:TotalApi.Utils.ListDescriptor`1">
            <summary>
            This class can be used to represent any non-text representation classes to ListBox and ComboBox controls.
            </summary>
        </member>
        <member name="P:TotalApi.Utils.ListDescriptor`1.Key">
            <summary>
            Key == Id
            </summary>
        </member>
        <member name="P:TotalApi.Utils.ListDescriptor`1.Id">
            <summary>
            Id == Key
            </summary>
        </member>
        <member name="P:TotalApi.Utils.ListDescriptor`1.Description">
            <summary>
            Description == Name
            </summary>
        </member>
        <member name="T:TotalApi.Utils.LocalizableDescriptionAttribute">
            <summary>
            Use for setting localizable description of the member.
            </summary>
            Attribute Order(1) indicates that value of this attribute will be used in assigning member desctiption rather then Description attribute.
        </member>
        <member name="P:TotalApi.Utils.LocalizableDescriptionAttribute.CommonResourceManager">
            <summary>
            Using if using one common ResourceManager on all assemblies in solution
            </summary>
        </member>
        <member name="F:TotalApi.Utils.LocalizableDescriptionAttribute.DefaultResourceIdendifierPrefix">
            <summary>
            Gets or sets default prefix for resourse identifier for description without explicit defined resource names. Default value is "@@"
            </summary>
        </member>
        <member name="M:TotalApi.Utils.LocalizableDescriptionAttribute.#ctor(System.String)">
            <summary>
            Assign description resource name and/or default value.<para>
            If description started from DefaultResourceIdendifierPrefix (default @@) - the rest part of desription string is the resource name.</para>
            If description not started from DefaultResourceIdendifierPrefix - the resource name combines 
            from DefaultResourceIdendifierPrefix and description parameters
            </summary>
            <param name="description">Description resource name and/or default value.</param>
        </member>
        <member name="M:TotalApi.Utils.LocalizableDescriptionAttribute.#ctor(System.String,System.String)">
            <summary>
            Assign resource name and default description (if this resource doesn't exist)
            </summary>
            <param name="defaultDescription">Substitute value if resource doesn't exist.</param>
            <param name="resourceName">Name of string resource from which takes description value.</param>
        </member>
        <member name="T:TotalApi.Utils.Params">
            <summary>
            Implementation of the application parameters manager.
            </summary>
        </member>
        <member name="P:TotalApi.Utils.Params.UseRegistry">
            <summary>
            Gets or sets whether the params manager uses registry to store/load params.
            If value is <c>true</c> <see cref="M:TotalApi.Utils.Params.Set``1(System.String,``0)"/> will save the value to the registry and 
            <see cref="M:TotalApi.Utils.Params.Get``1(System.String,``0)"/> will read parameter value from the registry rather than app.config.
            If value is <c>false</c> <see cref="M:TotalApi.Utils.Params.Set``1(System.String,``0)"/> will store value to the memory and <see cref="M:TotalApi.Utils.Params.Get``1(System.String,``0)"/> will read parameter value from the memory.
            </summary>
        </member>
        <member name="E:TotalApi.Utils.Params.GetParamValue">
            <summary>
            Event for custom getting parameter values
            </summary>
        </member>
        <member name="E:TotalApi.Utils.Params.SetParamValue">
            <summary>
            Event for custom setting parameter values
            </summary>
        </member>
        <member name="P:TotalApi.Utils.Params.CompanyName">
            <summary>
            Gets the application company name, extracted from entry or executing assembly
            </summary>
        </member>
        <member name="P:TotalApi.Utils.Params.ProductName">
            <summary>
            Gets the application product name, extracted from entry or executing assembly
            </summary>
        </member>
        <member name="P:TotalApi.Utils.Params.Version">
            <summary>
            Gets the application version, extracted from entry or executing assembly
            </summary>
        </member>
        <member name="P:TotalApi.Utils.Params.RegistryStorageRoot">
            <summary>
            Gets or sets registry key for default saving user parameters
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Params.Get``1(System.String,``0)">
            <summary>
            Gets parameter value casted to specified type
            </summary>
            <typeparam name="T">Type of parameter value</typeparam>
            <param name="name">Parameter name</param>
            <param name="defValue">Default value</param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Utils.Params.GetConnectionString(System.String,System.String)">
            <summary>
            Gets the value of the connection string
            </summary>
        </member>
        <member name="M:TotalApi.Utils.Params.Set``1(System.String,``0)">
            <summary>
            Sets user parameter value casted to specified type
            </summary>
            <typeparam name="T">Type of parameter value</typeparam>
            <param name="name">Parameter name</param>
            <param name="value">Parameter value</param>
            <returns></returns>
        </member>
        <member name="T:TotalApi.Utils.Processes.ApplicationTypes">
            <summary>
            Enum of application types
            </summary>
        </member>
        <member name="P:TotalApi.Utils.Processes.ApplicationType">
            <summary>
            Gets and implicit sets type of current process
            </summary>
        </member>
        <member name="P:TotalApi.Utils.Processes.IsConsole">
            <summary>
            Gets whether current process is console application
            </summary>
        </member>
        <member name="P:TotalApi.Utils.Processes.IsService">
            <summary>
            Gets whether current process is windows service application
            </summary>
        </member>
        <member name="P:TotalApi.Utils.Processes.IsWow64">
            <summary>
            Gets whether current process is x64
            </summary>
            <returns></returns>
        </member>
        <member name="T:TotalApi.Utils.StringUtils">
            <summary>
            работа со строками
            </summary>
        </member>
        <member name="M:TotalApi.Utils.StringUtils.QuotedStr(System.String)">
            <summary>
            Возвращает строку в одинарных кавычках с правильным удвоением символа кавычки внутри строки
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Utils.StringUtils.QuotedStr(System.String,System.Char)">
            <summary>
            Возвращает строку в указанных кавычках с правильным удвоением символа кавычки внутри строки
            </summary>
            <param name="s"></param>
            <param name="quote"></param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Utils.StringUtils.DequotedStr(System.String)">
            <summary>
            Dequotes string if it whole is quoted with quotes that are ' or " chars.<para></para>
            If not whole string is quoted or quotation is wrong - returns source string without any changing.<para></para>
            <example>
            <c>Example: </c>Input: s = 'string1''string2'''end -> Returns: string1'string2' and s = end
            </example>
            </summary>
            <param name="s">Source string</param>
        </member>
        <member name="M:TotalApi.Utils.StringUtils.DequotedStr(System.String,System.String)">
            <summary>
            Dequotes string if it whole is quoted with quotes that is any char in <paramref name="quotes"/> string.<para></para>
            If not whole string is quoted or quotation is wrong - returns source string without any changing.<para></para>
            <example>
            <c>Example: </c>Input: s = 'string1''string2'''end -> Returns: string1'string2' and s = end
            </example>
            </summary>
            <param name="s">Source string</param>
            <param name="quotes">Quotes set</param>
        </member>
        <member name="M:TotalApi.Utils.StringUtils.DequotedStr(System.String@)">
            <summary>
            Dequotes string if it whole is quoted with quotes that are ' or " chars.<para></para>
            If not whole string is quoted or quotation is wrong - returns source string without any changing.<para></para>
            <example>
            <c>Example: </c>Input: s = 'string1''string2'''end -> Returns: string1'string2' and s = end
            </example>
            </summary>
            <param name="s">Source string</param>
        </member>
        <member name="M:TotalApi.Utils.StringUtils.DequotedStr(System.String@,System.String)">
            <summary>
            Dequotes string if it whole is quoted with quotes that is any char in <paramref name="quotes"/> string.<para></para>
            If not whole string is quoted or quotation is wrong - returns source string without any changing.<para></para>
            <example>
            <c>Example: </c>Input: s = 'string1''string2'''end -> Returns: string1'string2' and s = end
            </example>
            </summary>
            <param name="s">Source string</param>
            <param name="quotes">Quotes set</param>
        </member>
        <member name="M:TotalApi.Utils.StringUtils.GetPartStr(System.String,System.Char,System.Int32@,System.String)">
            <summary>
            Returns part of the string till separator with checking amd ignoring (optional) separators in specified brackets.
            </summary>
            <param name="str">Source string</param>
            <param name="separator">Separator char</param>
            <param name="pos">Position after separator in source string</param>
            <param name="strBrackets">String of bracket chars</param>
        </member>
        <member name="M:TotalApi.Utils.StringUtils.SeparateText(System.String@,System.Char)">
            <summary>
            Separate text in string with specified separator char with skipping separator in brackets (' and ").
            Returns trimmed dequoted left part of string before separator and left in <paramref name="s"/> rest trimmed and dequoted part of string after separator.
            If string doesn't contains any separator - returns whole string and set <paramref name="s"/> to empty string.
            </summary>
            <param name="s"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="P:TotalApi.Utils.TextExpressions.ExpressionToTextEventArgs.Data">
            <summary>
            Gets or sets user defined data gived to ExpressionToText() method.
            </summary>
        </member>
        <member name="P:TotalApi.Utils.TextExpressions.ExpressionToTextEventArgs.Expression">
            <summary>
            Gets current handling expression.
            </summary>
        </member>
        <member name="P:TotalApi.Utils.TextExpressions.ExpressionToTextEventArgs.Text">
            <summary>
            Gets or sets text representation of current expression. 
            For method expression this is method name only.
            For operator expression this is operator description, eg. + or -
            </summary>
        </member>
        <member name="P:TotalApi.Utils.TextExpressions.ExpressionToTextEventArgs.FullText">
            <summary>
            Gets or sets full text representation of current expression.
            Fo example for plus operator expression this can be 'x + y'.
            </summary>
        </member>
        <member name="P:TotalApi.Utils.TextExpressions.ExpressionToTextEventArgs.Arguments">
            <summary>
            Gets calculated text representation all arguments of current expression.
            <para>
            Unary operator has one argument.
            Binary operator has two arguments 0 - left and 1 - right.
            Method has same arguments.
            </para>
            </summary>
        </member>
        <member name="P:TotalApi.Utils.TextExpressions.ExpressionToTextEventArgs.NeedRebuild">
            <summary>
            Sets sign that expression must be rebuild after handle ExpressionToText event, using values in Text and Arguments.
            Otherwise using current value of FullText property.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.TextExpressions.TextExpression`1.Calculate">
            <summary>
            Calculates value of the expression
            </summary>
        </member>
        <member name="P:TotalApi.Utils.TextExpressions.TextExpression`1.Value">
            <summary>
            Gets value of the expression. Equal calling method Calculate()
            </summary>
        </member>
        <member name="P:TotalApi.Utils.TextExpressions.TextExpressionUntyped.UserData">
            <summary>
            Gets or sets any user data that can be used when expression is prepared.
            </summary>
        </member>
        <member name="E:TotalApi.Utils.TextExpressions.TextExpressionUntyped.DoGetParameterType">
            <summary>
            Occurs when the parameter type calculated
            </summary>
        </member>
        <member name="E:TotalApi.Utils.TextExpressions.TextExpressionUntyped.DoGetParameterValue">
            <summary>
            Occurs when the parameter value calculated
            </summary>
        </member>
        <member name="E:TotalApi.Utils.TextExpressions.TextExpressionUntyped.DoParseException">
            <summary>
            Occurs on parsing exception 
            </summary>
        </member>
        <member name="E:TotalApi.Utils.TextExpressions.TextExpressionUntyped.DoBeforePrepare">
            <summary>
            Occurs before preparing expression
            </summary>
        </member>
        <member name="E:TotalApi.Utils.TextExpressions.TextExpressionUntyped.DoAfterPrepare">
            <summary>
            Occurs after preparing expression if preparation has been successfully
            </summary>
        </member>
        <member name="P:TotalApi.Utils.TextExpressions.TextExpressionUntyped.Parameters">
            <summary>
            List of undefined parameters and their values
            </summary>
        </member>
        <member name="P:TotalApi.Utils.TextExpressions.TextExpressionUntyped.AddIdentChars">
            <summary>
            Specifies additional identification legal chars, eg. dot, square brackets, etc.
            </summary>
        </member>
        <member name="P:TotalApi.Utils.TextExpressions.TextExpressionUntyped.AddIdentCharsFirstExclude">
            <summary>
            Exclude additional identification legal chars for first symbol of identifier
            </summary>
        </member>
        <member name="P:TotalApi.Utils.TextExpressions.TextExpressionUntyped.AddIdentCharsLastExclude">
            <summary>
            Exclude additional identification legal chars for last symbol of identifier
            </summary>
        </member>
        <member name="P:TotalApi.Utils.TextExpressions.TextExpressionUntyped.UseCharType">
            <summary>
            If true - expression will be different char literals (in '' quotes and string literals in "" quotes.
            If false - all literals in '' and "" quotes will be string literals.
            </summary>
        </member>
        <member name="P:TotalApi.Utils.TextExpressions.TextExpressionUntyped.DefaultInstance">
            <summary>
            Instance of object represented executing all default functions. Use for context-dependent functions. 
            </summary>
        </member>
        <member name="M:TotalApi.Utils.TextExpressions.TextExpressionUntyped.RegisterStaticFunctionClass(System.Type)">
            <summary>
            Registering static class represented executing all default functions
            </summary>
        </member>
        <member name="M:TotalApi.Utils.TextExpressions.TextExpressionUntyped.UnregisterStaticFunctionClass(System.Type)">
            <summary>
            Unregistering static class represented executing all default functions
            </summary>
        </member>
        <member name="M:TotalApi.Utils.TextExpressions.TextExpressionUntyped.RegisterAdditionalClass(System.String,System.Object)">
            <summary>
            Registering additional class or static class type
            </summary>
        </member>
        <member name="M:TotalApi.Utils.TextExpressions.TextExpressionUntyped.RegisterAdditionalClass``1(System.String)">
            <summary>
            Registering additional class type
            </summary>
        </member>
        <member name="M:TotalApi.Utils.TextExpressions.TextExpressionUntyped.UnregisterAdditionalClass(System.String)">
            <summary>
            Unregistering additional classes
            </summary>
        </member>
        <member name="P:TotalApi.Utils.TextExpressions.TextExpressionUntyped.CaseSensitive">
            <summary>
            Determines whether naming of identifiers is case sensitive
            </summary>
        </member>
        <member name="P:TotalApi.Utils.TextExpressions.TextExpressionUntyped.ExpressionText">
            <summary>
            Gets or sets text of expression
            </summary>
        </member>
        <member name="M:TotalApi.Utils.TextExpressions.TextExpressionUntyped.Prepare">
            <summary>
            Prepares current text expression. Returns true if no error or expression had beed already prepared.
            You don't have to call this method directly without strong nesessary.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.TextExpressions.TextExpressionUntyped.Unprepare">
            <summary>
            Unprepare current text expression.
            </summary>
        </member>
        <member name="P:TotalApi.Utils.TextExpressions.TextExpressionUntyped.ExpressionTree">
            <summary>
            Gets expression tree of the current text expression if no errors on preparing.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.TextExpressions.TextExpressionUntyped.GetParameterType(System.String)">
            <summary>
            Gets type of the specified paramter
            </summary>
        </member>
        <member name="M:TotalApi.Utils.TextExpressions.TextExpressionUntyped.GetParameters(TotalApi.Utils.TextExpressions.TextExpressionUntyped.ParameterKind)">
            <summary>
            Gets parameter list of the specified kind
            </summary>
        </member>
        <member name="M:TotalApi.Utils.TextExpressions.TextExpressionUntyped.Calculate">
            <summary>
            Calculates value of the expression
            </summary>
        </member>
        <member name="P:TotalApi.Utils.TextExpressions.TextExpressionUntyped.Value">
            <summary>
            Gets value of the expression. Equal calling method Calculate()
            </summary>
        </member>
        <member name="M:TotalApi.Utils.TextExpressions.TextExpressionUntyped.ExpressionToText(TotalApi.Utils.TextExpressions.TextExpressionUntyped.ExpressionToTextEventHandler,System.Object)">
            <summary>
            Assemblies prepared expression tree to text expression. User can customize this process via events.
            </summary>           
        </member>
        <member name="T:TotalApi.Utils.ThreadInvoker">
            <summary>
            Helper class for invoke operation in context of specified thread.
            ThreadInvoker.InvokeUi() can be used for invoke operation in context of main UI thread 
            if ThreadInvoker.InitUi() is called before in main thread.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.ThreadInvoker._invoker">
            <summary>
            External invoker to call actions
            </summary>
        </member>
        <member name="P:TotalApi.Utils.ThreadInvoker.UiThread">
            <summary>
            Gets or sets reference on the main UiThread.
            Sets automatically when InitUi() is called.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.ThreadInvoker.InitUi">
            <summary>
            Initialization in main UI thread. Must be called before calling ThreadInvoker.InvokeUi()
            </summary>
        </member>
        <member name="M:TotalApi.Utils.ThreadInvoker.InitUi(System.Action{System.Action,System.Boolean})">
            <summary>
            Initialization in main UI thread invoker. Must be called before calling ThreadInvoker.InvokeUi()
            </summary>
        </member>
        <member name="M:TotalApi.Utils.ThreadInvoker.InitUi(System.Action{System.Action})">
            <summary>
            Initialization in main UI thread invoker. Must be called before calling ThreadInvoker.InvokeUi()
            </summary>
        </member>
        <member name="M:TotalApi.Utils.ThreadInvoker.SynchronizationContext(System.Threading.Thread)">
            <summary>
            Gets SynchronizationContext of the specified thread.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.ThreadInvoker.Invoke(System.Threading.Thread,System.Action,System.Boolean)">
            <summary>
            Invokes action in context of specified thread.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.ThreadInvoker.InvokeUi(System.Action,System.Boolean)">
            <summary>
            Invokes action in context of main UI thread.
            ThreadInvoker.InitUi() must be called before in main thread.
            </summary>
        </member>
        <member name="T:TotalApi.Utils.ThreadSynchronizationContext">
            <summary>
            Синхронизационный контекст для произвольного потока.
            Чтобы заработало - необходимо вызвать метод <see cref="M:TotalApi.Utils.ThreadSynchronizationContext.ProcessMessages"/> 
            (при этом выполнение потока будет приостановлено до вызова из другого потока метода <see cref="M:TotalApi.Utils.ThreadSynchronizationContext.Cancel"/>).
            Обработчик контекста поддерживает обработку ошибок в своём потоке.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.ThreadVar`1.#ctor">
            <summary>
            Creates an instance of the ThreadVar class.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.ThreadVar`1.#ctor(System.Func{`0})">
            <summary>
            Creates an instance of the ThreadVar class.
            </summary>
            <param name="valueFactory"></param>
        </member>
        <member name="P:TotalApi.Utils.ThreadVar`1.Value">
            <summary>
            Gets or sets thread depend value. Each thread has own value. 
            If value is not set type default value will be returned.
            </summary>
        </member>
        <member name="M:TotalApi.Utils.ThreadVar`1.Clear">
            <summary>
            Clear current value.
            </summary>
        </member>
        <member name="P:TotalApi.Utils.ThreadVar`1.HasValue">
            <summary>
            Checks whether value has been set.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:TotalApi.Utils.UiTreeItem" -->
        <member name="M:TotalApi.Utils.UserHelper.GetSid(System.String,System.String)">
            <summary>
            Return user SID by user name and user domain
            </summary>
        </member>
        <member name="M:TotalApi.Utils.UserHelper.GetSid(System.String)">
            <summary>
            Return user SID by full user name in format domain\user
            </summary>
        </member>
        <member name="M:TotalApi.Utils.UserHelper.GetUserNameBySid(System.String)">
            <summary>
            Returns user name by SID
            </summary>
            <param name="sid"></param>
            <returns></returns>
        </member>
        <member name="M:TotalApi.Utils.UserHelper.LoggedUsers">
            <summary>
            Gets current interactive users analizing owners of explorer.exe process
            </summary>
        </member>
        <member name="M:TotalApi.Utils.UserHelper.GetUserDocumentsFolder(System.String)">
            <summary>
            Returns user profile documents directory by user SID
            </summary>
            <param name="sid">User SID</param>
        </member>
        <member name="M:TotalApi.Utils.UserHelper.GetUserAppDataFolder(System.String)">
            <summary>
            Returns user profile application data directory by user SID
            </summary>
            <param name="sid">User SID</param>
        </member>
        <member name="M:TotalApi.Utils.Win32Processes.GetOpenFilesEnumerator(System.Int32)">
            <summary>
            Gets the open files enumerator.
            </summary>
            <param name="processId">The process id.</param>
            <returns></returns>
        </member>
        <member name="T:TotalApi.Utils.WinApi">
            <summary>
            WinApi P/Invoke methods
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.WM_MOUSEMOVE">
            <summary>
            The WM_MOUSEMOVE message is posted to a window when the cursor moves. 
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.WM_LBUTTONDOWN">
            <summary>
            The WM_LBUTTONDOWN message is posted when the user presses the left mouse button 
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.WM_RBUTTONDOWN">
            <summary>
            The WM_RBUTTONDOWN message is posted when the user presses the right mouse button
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.WM_MBUTTONDOWN">
            <summary>
            The WM_MBUTTONDOWN message is posted when the user presses the middle mouse button 
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.WM_LBUTTONUP">
            <summary>
            The WM_LBUTTONUP message is posted when the user releases the left mouse button 
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.WM_RBUTTONUP">
            <summary>
            The WM_RBUTTONUP message is posted when the user releases the right mouse button 
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.WM_MBUTTONUP">
            <summary>
            The WM_MBUTTONUP message is posted when the user releases the middle mouse button 
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.WM_LBUTTONDBLCLK">
            <summary>
            The WM_LBUTTONDBLCLK message is posted when the user double-clicks the left mouse button 
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.WM_RBUTTONDBLCLK">
            <summary>
            The WM_RBUTTONDBLCLK message is posted when the user double-clicks the right mouse button 
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.WM_MBUTTONDBLCLK">
            <summary>
            The WM_RBUTTONDOWN message is posted when the user presses the right mouse button 
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.WM_MOUSEWHEEL">
            <summary>
            The WM_MOUSEWHEEL message is posted when the user presses the mouse wheel. 
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.WM_KEYDOWN">
            <summary>
            The WM_KEYDOWN message is posted to the window with the keyboard focus when a nonsystem 
            key is pressed. A nonsystem key is a key that is pressed when the ALT key is not pressed.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.WM_KEYUP">
            <summary>
            The WM_KEYUP message is posted to the window with the keyboard focus when a nonsystem 
            key is released. A nonsystem key is a key that is pressed when the ALT key is not pressed, 
            or a keyboard key that is pressed when a window has the keyboard focus.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.WM_SYSKEYDOWN">
            <summary>
            The WM_SYSKEYDOWN message is posted to the window with the keyboard focus when the user 
            presses the F10 key (which activates the menu bar) or holds down the ALT key and then 
            presses another key. It also occurs when no window currently has the keyboard focus; 
            in this case, the WM_SYSKEYDOWN message is sent to the active window. The window that 
            receives the message can distinguish between these two contexts by checking the context 
            code in the lParam parameter. 
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.WM_SYSKEYUP">
            <summary>
            The WM_SYSKEYUP message is posted to the window with the keyboard focus when the user 
            releases a key that was pressed while the ALT key was held down. It also occurs when no 
            window currently has the keyboard focus; in this case, the WM_SYSKEYUP message is sent 
            to the active window. The window that receives the message can distinguish between 
            these two contexts by checking the context code in the lParam parameter. 
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.WH_MOUSE_LL">
            <summary>
            Windows NT/2000/XP: Installs a hook procedure that monitors low-level mouse input events.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.WH_KEYBOARD_LL">
            <summary>
            Windows NT/2000/XP: Installs a hook procedure that monitors low-level keyboard  input events.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.WH_MOUSE">
            <summary>
            Installs a hook procedure that monitors mouse messages. For more information, see the MouseProc hook procedure. 
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.WH_KEYBOARD">
            <summary>
            Installs a hook procedure that monitors keystroke messages. For more information, see the KeyboardProc hook procedure. 
            </summary>
        </member>
        <member name="T:TotalApi.Utils.WinApi.HookProc">
            <summary>
            The CallWndProc hook procedure is an application-defined or library-defined callback 
            function used with the SetWindowsHookEx function. The HOOKPROC type defines a pointer 
            to this callback function. CallWndProc is a placeholder for the application-defined 
            or library-defined function name.
            </summary>
            <param name="nCode">
            [in] Specifies whether the hook procedure must process the message. 
            If nCode is HC_ACTION, the hook procedure must process the message. 
            If nCode is less than zero, the hook procedure must pass the message to the 
            CallNextHookEx function without further processing and must return the 
            value returned by CallNextHookEx.
            </param>
            <param name="wParam">
            [in] Specifies whether the message was sent by the current thread. 
            If the message was sent by the current thread, it is nonzero; otherwise, it is zero. 
            </param>
            <param name="lParam">
            [in] Pointer to a CWPSTRUCT structure that contains details about the message. 
            </param>
            <returns>
            If nCode is less than zero, the hook procedure must return the value returned by CallNextHookEx. 
            If nCode is greater than or equal to zero, it is highly recommended that you call CallNextHookEx 
            and return the value it returns; otherwise, other applications that have installed WH_CALLWNDPROC 
            hooks will not receive hook notifications and may behave incorrectly as a result. If the hook 
            procedure does not call CallNextHookEx, the return value should be zero. 
            </returns>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/windowing/hooks/hookreference/hookfunctions/callwndproc.asp
            </remarks>
        </member>
        <member name="M:TotalApi.Utils.WinApi.CallNextHookEx(System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            The CallNextHookEx function passes the hook information to the next hook procedure in the current hook chain. 
            A hook procedure can call this function either before or after processing the hook information. 
            </summary>
            <param name="idHook">Ignored.</param>
            <param name="nCode">
            [in] Specifies the hook code passed to the current hook procedure. 
            The next hook procedure uses this code to determine how to process the hook information.
            </param>
            <param name="wParam">
            [in] Specifies the wParam value passed to the current hook procedure. 
            The meaning of this parameter depends on the type of hook associated with the current hook chain. 
            </param>
            <param name="lParam">
            [in] Specifies the lParam value passed to the current hook procedure. 
            The meaning of this parameter depends on the type of hook associated with the current hook chain. 
            </param>
            <returns>
            This value is returned by the next hook procedure in the chain. 
            The current hook procedure must also return this value. The meaning of the return value depends on the hook type. 
            For more information, see the descriptions of the individual hook procedures.
            </returns>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/windowing/hooks/hookreference/hookfunctions/setwindowshookex.asp
            </remarks>
        </member>
        <member name="M:TotalApi.Utils.WinApi.SetWindowsHookEx(System.Int32,TotalApi.Utils.WinApi.HookProc,System.IntPtr,System.Int32)">
            <summary>
            The SetWindowsHookEx function installs an application-defined hook procedure into a hook chain. 
            You would install a hook procedure to monitor the system for certain types of events. These events 
            are associated either with a specific thread or with all threads in the same desktop as the calling thread. 
            </summary>
            <param name="idHook">
            [in] Specifies the type of hook procedure to be installed. This parameter can be one of the following values.
            </param>
            <param name="lpfn">
            [in] Pointer to the hook procedure. If the dwThreadId parameter is zero or specifies the identifier of a 
            thread created by a different process, the lpfn parameter must point to a hook procedure in a dynamic-link 
            library (DLL). Otherwise, lpfn can point to a hook procedure in the code associated with the current process.
            </param>
            <param name="hMod">
            [in] Handle to the DLL containing the hook procedure pointed to by the lpfn parameter. 
            The hMod parameter must be set to NULL if the dwThreadId parameter specifies a thread created by 
            the current process and if the hook procedure is within the code associated with the current process. 
            </param>
            <param name="dwThreadId">
            [in] Specifies the identifier of the thread with which the hook procedure is to be associated. 
            If this parameter is zero, the hook procedure is associated with all existing threads running in the 
            same desktop as the calling thread. 
            </param>
            <returns>
            If the function succeeds, the return value is the handle to the hook procedure.
            If the function fails, the return value is NULL. To get extended error information, call GetLastError.
            </returns>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/windowing/hooks/hookreference/hookfunctions/setwindowshookex.asp
            </remarks>
        </member>
        <member name="M:TotalApi.Utils.WinApi.UnhookWindowsHookEx(System.Int32)">
            <summary>
            The UnhookWindowsHookEx function removes a hook procedure installed in a hook chain by the SetWindowsHookEx function. 
            </summary>
            <param name="idHook">
            [in] Handle to the hook to be removed. This parameter is a hook handle obtained by a previous call to SetWindowsHookEx. 
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/windowing/hooks/hookreference/hookfunctions/setwindowshookex.asp
            </remarks>
        </member>
        <member name="M:TotalApi.Utils.WinApi.GetDoubleClickTime">
            <summary>
            The GetDoubleClickTime function retrieves the current double-click time for the mouse. A double-click is a series of two clicks of the 
            mouse button, the second occurring within a specified time after the first. The double-click time is the maximum number of 
            milliseconds that may occur between the first and second click of a double-click. 
            </summary>
            <returns>
            The return value specifies the current double-click time, in milliseconds. 
            </returns>
            <remarks>
            http://msdn.microsoft.com/en-us/library/ms646258(VS.85).aspx
            </remarks>
        </member>
        <member name="M:TotalApi.Utils.WinApi.ToAscii(System.Int32,System.Int32,System.Byte[],System.Byte[],System.Int32)">
            <summary>
            The ToAscii function translates the specified virtual-key code and keyboard 
            state to the corresponding character or characters. The function translates the code 
            using the input language and physical keyboard layout identified by the keyboard layout handle.
            </summary>
            <param name="uVirtKey">
            [in] Specifies the virtual-key code to be translated. 
            </param>
            <param name="uScanCode">
            [in] Specifies the hardware scan code of the key to be translated. 
            The high-order bit of this value is set if the key is up (not pressed). 
            </param>
            <param name="lpbKeyState">
            [in] Pointer to a 256-byte array that contains the current keyboard state. 
            Each element (byte) in the array contains the state of one key. 
            If the high-order bit of a byte is set, the key is down (pressed). 
            The low bit, if set, indicates that the key is toggled on. In this function, 
            only the toggle bit of the CAPS LOCK key is relevant. The toggle state 
            of the NUM LOCK and SCROLL LOCK keys is ignored.
            </param>
            <param name="lpwTransKey">
            [out] Pointer to the buffer that receives the translated character or characters. 
            </param>
            <param name="fuState">
            [in] Specifies whether a menu is active. This parameter must be 1 if a menu is active, or 0 otherwise. 
            </param>
            <returns>
            If the specified key is a dead key, the return value is negative. Otherwise, it is one of the following values. 
            Value Meaning 
            0 The specified virtual key has no translation for the current state of the keyboard. 
            1 One character was copied to the buffer. 
            2 Two characters were copied to the buffer. This usually happens when a dead-key character 
            (accent or diacritic) stored in the keyboard layout cannot be composed with the specified 
            virtual key to form a single character. 
            </returns>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/userinput/keyboardinput/keyboardinputreference/keyboardinputfunctions/toascii.asp
            </remarks>
        </member>
        <member name="M:TotalApi.Utils.WinApi.GetKeyboardState(System.Byte[])">
            <summary>
            The GetKeyboardState function copies the status of the 256 virtual keys to the 
            specified buffer. 
            </summary>
            <param name="pbKeyState">
            [in] Pointer to a 256-byte array that contains keyboard key states. 
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError. 
            </returns>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/userinput/keyboardinput/keyboardinputreference/keyboardinputfunctions/toascii.asp
            </remarks>
        </member>
        <member name="M:TotalApi.Utils.WinApi.GetKeyState(System.Int32)">
             <summary>
             The GetKeyState function retrieves the status of the specified virtual key. The status specifies whether the key is up, down, or toggled 
             (on, off—alternating each time the key is pressed). 
             </summary>
             <param name="vKey">
             [in] Specifies a virtual key. If the desired virtual key is a letter or digit (A through Z, a through z, or 0 through 9), nVirtKey must be set to the ASCII value of that character. For other keys, it must be a virtual-key code. 
             </param>
             <returns>
             The return value specifies the status of the specified virtual key, as follows: 
            If the high-order bit is 1, the key is down; otherwise, it is up.
            If the low-order bit is 1, the key is toggled. A key, such as the CAPS LOCK key, is toggled if it is turned on. The key is off and untoggled if the low-order bit is 0. A toggle key's indicator light (if any) on the keyboard will be on when the key is toggled, and off when the key is untoggled.
             </returns>
             <remarks>http://msdn.microsoft.com/en-us/library/ms646301.aspx</remarks>
        </member>
        <member name="T:TotalApi.Utils.WinApi.POINT">
            <summary>
            The Point structure defines the X- and Y- coordinates of a point. 
            </summary>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/gdi/rectangl_0tiq.asp
            </remarks>
        </member>
        <member name="F:TotalApi.Utils.WinApi.POINT.X">
            <summary>
            Specifies the X-coordinate of the point. 
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.POINT.Y">
            <summary>
            Specifies the Y-coordinate of the point. 
            </summary>
        </member>
        <member name="T:TotalApi.Utils.WinApi.MouseLLHookStruct">
            <summary>
            The MSLLHOOKSTRUCT structure contains information about a low-level keyboard input event. 
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.MouseLLHookStruct.Point">
            <summary>
            Specifies a Point structure that contains the X- and Y-coordinates of the cursor, in screen coordinates. 
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.MouseLLHookStruct.MouseData">
             <summary>
             If the message is WM_MOUSEWHEEL, the high-order word of this member is the wheel delta. 
             The low-order word is reserved. A positive value indicates that the wheel was rotated forward, 
             away from the user; a negative value indicates that the wheel was rotated backward, toward the user. 
             One wheel click is defined as WHEEL_DELTA, which is 120. 
            If the message is WM_XBUTTONDOWN, WM_XBUTTONUP, WM_XBUTTONDBLCLK, WM_NCXBUTTONDOWN, WM_NCXBUTTONUP,
             or WM_NCXBUTTONDBLCLK, the high-order word specifies which X button was pressed or released, 
             and the low-order word is reserved. This value can be one or more of the following values. Otherwise, MouseData is not used. 
            XBUTTON1
            The first X button was pressed or released.
            XBUTTON2
            The second X button was pressed or released.
             </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.MouseLLHookStruct.Flags">
             <summary>
             Specifies the event-injected flag. An application can use the following value to test the mouse Flags. Value Purpose 
            LLMHF_INJECTED Test the event-injected flag.  
            0
            Specifies whether the event was injected. The value is 1 if the event was injected; otherwise, it is 0.
            1-15
            Reserved.
             </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.MouseLLHookStruct.Time">
            <summary>
            Specifies the Time stamp for this message.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.MouseLLHookStruct.ExtraInfo">
            <summary>
            Specifies extra information associated with the message. 
            </summary>
        </member>
        <member name="T:TotalApi.Utils.WinApi.KeyboardLLHookStruct">
            <summary>
            The KBDLLHOOKSTRUCT structure contains information about a low-level keyboard input event. 
            </summary>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/windowing/hooks/hookreference/hookstructures/cwpstruct.asp
            </remarks>
        </member>
        <member name="F:TotalApi.Utils.WinApi.KeyboardLLHookStruct.VirtualKeyCode">
            <summary>
            Specifies a virtual-key code. The code must be a value in the range 1 to 254. 
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.KeyboardLLHookStruct.ScanCode">
            <summary>
            Specifies a hardware scan code for the key. 
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.KeyboardLLHookStruct.Flags">
            <summary>
            Specifies the extended-key flag, event-injected flag, context code, and transition-state flag.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.KeyboardLLHookStruct.Time">
            <summary>
            Specifies the Time stamp for this message.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.KeyboardLLHookStruct.ExtraInfo">
            <summary>
            Specifies extra information associated with the message. 
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.RedrawWindowFlags.Invalidate">
            <summary>
            Invalidates the rectangle or region that you specify in lprcUpdate or hrgnUpdate.
            You can set only one of these parameters to a non-NULL value. If both are NULL, RDW_INVALIDATE invalidates the entire window.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.RedrawWindowFlags.InternalPaint">
            <summary>Causes the OS to post a WM_PAINT message to the window regardless of whether a portion of the window is invalid.</summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.RedrawWindowFlags.Erase">
            <summary>
            Causes the window to receive a WM_ERASEBKGND message when the window is repainted.
            Specify this value in combination with the RDW_INVALIDATE value; otherwise, RDW_ERASE has no effect.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.RedrawWindowFlags.Validate">
            <summary>
            Validates the rectangle or region that you specify in lprcUpdate or hrgnUpdate.
            You can set only one of these parameters to a non-NULL value. If both are NULL, RDW_VALIDATE validates the entire window.
            This value does not affect internal WM_PAINT messages.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.RedrawWindowFlags.NoErase">
            <summary>Suppresses any pending WM_ERASEBKGND messages.</summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.RedrawWindowFlags.NoChildren">
            <summary>Excludes child windows, if any, from the repainting operation.</summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.RedrawWindowFlags.AllChildren">
            <summary>Includes child windows, if any, in the repainting operation.</summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.RedrawWindowFlags.UpdateNow">
            <summary>Causes the affected windows, which you specify by setting the RDW_ALLCHILDREN and RDW_NOCHILDREN values, to receive WM_ERASEBKGND and WM_PAINT messages before the RedrawWindow returns, if necessary.</summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.RedrawWindowFlags.EraseNow">
            <summary>
            Causes the affected windows, which you specify by setting the RDW_ALLCHILDREN and RDW_NOCHILDREN values, to receive WM_ERASEBKGND messages before RedrawWindow returns, if necessary.
            The affected windows receive WM_PAINT messages at the ordinary time.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.EFileAccess.GenericRead">
             <summary>
            
             </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.EFileAccess.GenericWrite">
             <summary>
            
             </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.EFileAccess.GenericExecute">
             <summary>
            
             </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.EFileAccess.GenericAll">
             <summary>
            
             </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.EFileShare.None">
             <summary>
            
             </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.EFileShare.Read">
            <summary>
            Enables subsequent open operations on an object to request read access.
            Otherwise, other processes cannot open the object if they request read access.
            If this flag is not specified, but the object has been opened for read access, the function fails.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.EFileShare.Write">
            <summary>
            Enables subsequent open operations on an object to request write access.
            Otherwise, other processes cannot open the object if they request write access.
            If this flag is not specified, but the object has been opened for write access, the function fails.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.EFileShare.Delete">
            <summary>
            Enables subsequent open operations on an object to request delete access.
            Otherwise, other processes cannot open the object if they request delete access.
            If this flag is not specified, but the object has been opened for delete access, the function fails.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.ECreationDisposition.New">
            <summary>
            Creates a new file. The function fails if a specified file exists.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.ECreationDisposition.CreateAlways">
            <summary>
            Creates a new file, always.
            If a file exists, the function overwrites the file, clears the existing attributes, combines the specified file attributes,
            and flags with FILE_ATTRIBUTE_ARCHIVE, but does not set the security descriptor that the SECURITY_ATTRIBUTES structure specifies.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.ECreationDisposition.OpenExisting">
            <summary>
            Opens a file. The function fails if the file does not exist.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.ECreationDisposition.OpenAlways">
            <summary>
            Opens a file, always.
            If a file does not exist, the function creates a file as if dwCreationDisposition is CREATE_NEW.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.ECreationDisposition.TruncateExisting">
            <summary>
            Opens a file and truncates it so that its size is 0 (zero) bytes. The function fails if the file does not exist.
            The calling process must open the file with the GENERIC_WRITE access right.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.LogonType.LOGON32_LOGON_INTERACTIVE">
            <summary>
            This logon type is intended for users who will be interactively using the computer, such as a user being logged on  
            by a terminal server, remote shell, or similar process.
            This logon type has the additional expense of caching logon information for disconnected operations;
            therefore, it is inappropriate for some client/server applications,
            such as a mail server.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:TotalApi.Utils.WinApi.LogonType.LOGON32_LOGON_NETWORK" -->
        <member name="F:TotalApi.Utils.WinApi.LogonType.LOGON32_LOGON_BATCH">
            <summary>
            This logon type is intended for batch servers, where processes may be executing on behalf of a user without
            their direct intervention. This type is also for higher performance servers that process many plaintext
            authentication attempts at a time, such as mail or Web servers.
            The LogonUser function does not cache credentials for this logon type.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.LogonType.LOGON32_LOGON_SERVICE">
            <summary>
            Indicates a service-type logon. The account provided must have the service privilege enabled.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.LogonType.LOGON32_LOGON_UNLOCK">
            <summary>
            This logon type is for GINA DLLs that log on users who will be interactively using the computer.
            This logon type can generate a unique audit record that shows when the workstation was unlocked.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.LogonType.LOGON32_LOGON_NETWORK_CLEARTEXT">
            <summary>
            This logon type preserves the name and password in the authentication package, which allows the server to make
            connections to other network servers while impersonating the client. A server can accept plaintext credentials
            from a client, call LogonUser, verify that the user can access the system across the network, and still
            communicate with other servers.
            NOTE: Windows NT:  This value is not supported.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.LogonType.LOGON32_LOGON_NEW_CREDENTIALS">
            <summary>
            This logon type allows the caller to clone its current token and specify new credentials for outbound connections.
            The new logon session has the same local identifier but uses different credentials for other network connections.
            NOTE: This logon type is supported only by the LOGON32_PROVIDER_WINNT50 logon provider.
            NOTE: Windows NT:  This value is not supported.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.LogonProvider.LOGON32_PROVIDER_DEFAULT">
            <summary>
            Use the standard logon provider for the system.
            The default security provider is negotiate, unless you pass NULL for the domain name and the user name
            is not in UPN format. In this case, the default provider is NTLM.
            NOTE: Windows 2000/NT:   The default security provider is NTLM.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.ShowWindowCommand.Hide">
            <summary>
            Hides the window and activates another window.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.ShowWindowCommand.Normal">
            <summary>
            Activates and displays a window. If the window is minimized or
            maximized, the system restores it to its original size and position.
            An application should specify this flag when displaying the window
            for the first time.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.ShowWindowCommand.ShowMinimized">
            <summary>
            Activates the window and displays it as a minimized window.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.ShowWindowCommand.Maximize">
            <summary>
            Maximizes the specified window.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.ShowWindowCommand.ShowMaximized">
            <summary>
            Activates the window and displays it as a maximized window.
            </summary>      
        </member>
        <member name="F:TotalApi.Utils.WinApi.ShowWindowCommand.ShowNoActivate">
            <summary>
            Displays a window in its most recent size and position. This value
            is similar to <see cref="F:TotalApi.Utils.WinApi.ShowWindowCommand.Normal"/>, except
            the window is not activated.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.ShowWindowCommand.Show">
            <summary>
            Activates the window and displays it in its current size and position.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.ShowWindowCommand.Minimize">
            <summary>
            Minimizes the specified window and activates the next top-level
            window in the Z order.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.ShowWindowCommand.ShowMinNoActive">
            <summary>
            Displays the window as a minimized window. This value is similar to
            <see cref="F:TotalApi.Utils.WinApi.ShowWindowCommand.ShowMinimized"/>, except the
            window is not activated.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.ShowWindowCommand.ShowNA">
            <summary>
            Displays the window in its current size and position. This value is
            similar to <see cref="F:TotalApi.Utils.WinApi.ShowWindowCommand.Show"/>, except the
            window is not activated.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.ShowWindowCommand.Restore">
            <summary>
            Activates and displays the window. If the window is minimized or
            maximized, the system restores it to its original size and position.
            An application should specify this flag when restoring a minimized window.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.ShowWindowCommand.ShowDefault">
            <summary>
            Sets the show state based on the SW_* value specified in the
            STARTUPINFO structure passed to the CreateProcess function by the
            program that started the application.
            </summary>
        </member>
        <member name="F:TotalApi.Utils.WinApi.ShowWindowCommand.ForceMinimize">
            <summary>
             <b>Windows 2000/XP:</b> Minimizes a window, even if the thread
            that owns the window is not responding. This flag should only be
            used when minimizing windows from a different thread.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage.
            </summary>
            <example><code>
            [CanBeNull] object Test() => null;
            
            void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>.
            </summary>
            <example><code>
            [NotNull] object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.ItemNotNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can never be null.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ItemCanBeNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can be null.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form.
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            void ShowError(string message, params object[] args) { /* do something */ }
            
            void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:JetBrains.Annotations.ValueProviderAttribute">
            <summary>
            For a parameter that is expected to be one of the limited set of values.
            Specify fields of which type should be used as values for this parameter.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <example><code>
            void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
             is used to notify that some property value changed.
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
             
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               string _name;
             
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output.
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            class Foo {
              string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            
            class UsesNoEquality {
              void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            class ComponentAttribute : Attribute { }
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes
            as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type.</summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked
            with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used.</summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
            If the parameter is a delegate, indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>.
            </summary>
            <example><code>
            [Pure] int Multiply(int x, int y) => x * y;
            
            void M() {
              Multiply(123, 42); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.MustUseReturnValueAttribute">
            <summary>
            Indicates that the return value of method invocation must be used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ProvidesContextAttribute">
            <summary>
            Indicates the type member or parameter of some type, that should be used instead of all other ways
            to get the value that type. This annotation is useful when you have some "context" value evaluated
            and stored somewhere, meaning that all other ways to get this value must be consolidated with existing one.
            </summary>
            <example><code>
            class Foo {
              [ProvidesContext] IBarService _barService = ...;
            
              void ProcessNode(INode node) {
                DoSomething(node, node.GetGlobalServices().Bar);
                //              ^ Warning: use value of '_barService' field
              }
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder within a web project.
            Path can be relative or absolute, starting from web root (~).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.SourceTemplateAttribute">
            <summary>
            An extension method marked with this attribute is processed by ReSharper code completion
            as a 'Source Template'. When extension method is completed over some expression, it's source code
            is automatically expanded like a template at call site.
            </summary>
            <remarks>
            Template method body can contain valid source code and/or special comments starting with '$'.
            Text inside these comments is added as source code when the template is applied. Template parameters
            can be used either as additional method parameters or as identifiers wrapped in two '$' signs.
            Use the <see cref="T:JetBrains.Annotations.MacroAttribute"/> attribute to specify macros for parameters.
            </remarks>
            <example>
            In this example, the 'forEach' method is a source template available over all values
            of enumerable types, producing ordinary C# 'foreach' statement and placing caret inside block:
            <code>
            [SourceTemplate]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; xs) {
              foreach (var x in xs) {
                 //$ $END$
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.MacroAttribute">
            <summary>
            Allows specifying a macro for a parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see>.
            </summary>
            <remarks>
            You can apply the attribute on the whole method or on any of its additional parameters. The macro expression
            is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Expression"/> property. When applied on a method, the target
            template parameter is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Target"/> property. To apply the macro silently
            for the parameter, set the <see cref="P:JetBrains.Annotations.MacroAttribute.Editable"/> property value = -1.
            </remarks>
            <example>
            Applying the attribute on a source template method:
            <code>
            [SourceTemplate, Macro(Target = "item", Expression = "suggestVariableName()")]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; collection) {
              foreach (var item in collection) {
                //$ $END$
              }
            }
            </code>
            Applying the attribute on a template method parameter:
            <code>
            [SourceTemplate]
            public static void something(this Entity x, [Macro(Expression = "guid()", Editable = -1)] string newguid) {
              /*$ var $x$Id = "$newguid$" + x.ToString();
              x.DoSomething($x$Id); */
            }
            </code>
            </example>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Expression">
            <summary>
            Allows specifying a macro that will be executed for a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see>
            parameter when the template is expanded.
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Editable">
            <summary>
            Allows specifying which occurrence of the target parameter becomes editable when the template is deployed.
            </summary>
            <remarks>
            If the target parameter is used several times in the template, only one occurrence becomes editable;
            other occurrences are changed synchronously. To specify the zero-based index of the editable occurrence,
            use values >= 0. To make the parameter non-editable when the template is expanded, use -1.
            </remarks>>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Target">
            <summary>
            Identifies the target parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see> if the
            <see cref="T:JetBrains.Annotations.MacroAttribute"/> is applied on a template method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is
            an MVC controller. If applied to a method, the MVC controller name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC
            partial view. If applied to a method, the MVC partial view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcSuppressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling inspections for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewComponentAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component name.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewComponentViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component view. If applied to a method, the MVC view component view name is default.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name.
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CollectionAccessAttribute">
            <summary>
            Indicates how method, constructor invocation or property access
            over collection type affects content of the collection.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.None">
            <summary>Method does not use or modify content of the collection.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.Read">
            <summary>Method only reads content of the collection but does not modify it.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.ModifyExistingContent">
            <summary>Method can change content of the collection but does not add new elements.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.UpdatedContent">
            <summary>Method can add new elements to the collection.</summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if
            one of the conditions is satisfied. To set the condition, mark one of the parameters with 
            <see cref="T:JetBrains.Annotations.AssertionConditionAttribute"/> attribute.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. The method itself should be
            marked by <see cref="T:JetBrains.Annotations.AssertionMethodAttribute"/> attribute. The mandatory argument of
            the attribute is the assertion type.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisfies the condition,
            then the execution continues. Otherwise, execution is assumed to be halted.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_TRUE">
            <summary>Marked parameter should be evaluated to true.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_FALSE">
            <summary>Marked parameter should be evaluated to false.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NULL">
            <summary>Marked parameter should be evaluated to null value.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>Marked parameter should be evaluated to not null value.</summary>
        </member>
        <member name="T:JetBrains.Annotations.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.LinqTunnelAttribute">
            <summary>
            Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
            .Where). This annotation allows inference of [InstantHandle] annotation for parameters
            of delegate type by analyzing LINQ method chains.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NoEnumerationAttribute">
            <summary>
            Indicates that IEnumerable, passed as parameter, is not enumerated.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.RegexPatternAttribute">
            <summary>
            Indicates that parameter is regular expression pattern.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be treated
            as <c>ItemsControl</c>-derived type, to enable inner items <c>DataContext</c> type resolve.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemBindingOfItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the property of some <c>BindingBase</c>-derived type, that
            is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
            enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
            <remarks>
            Property should have the tree ancestor of the <c>ItemsControl</c> type or
            marked with the <see cref="T:JetBrains.Annotations.XamlItemsControlAttribute"/> attribute.
            </remarks>
        </member>
        <member name="T:JetBrains.Annotations.NoReorder">
            <summary>
            Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
            <remarks>
            The attribute must be mentioned in your member reordering patterns
            </remarks>
        </member>
    </members>
</doc>
